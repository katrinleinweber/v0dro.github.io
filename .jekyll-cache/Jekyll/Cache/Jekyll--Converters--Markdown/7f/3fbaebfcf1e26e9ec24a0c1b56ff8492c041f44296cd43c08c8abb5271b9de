I"F<h1 id="introduction">Introduction</h1>

<p>String encoding is an important matter in Ruby, however most of the blog posts
that I came acoross (some of which are linked at the end of this post) tend to
look at a ‘user-level’ point of view of the subject and do not explore Ruby
internals with respect to string encoding. In this blog post I will try to 
shed some light on the topic and talk about the important APIs and terminologies
that one should be aware of when interfacing with Ruby strings internally.</p>

<h2 id="code-points-and-character-sets">Code points and character sets</h2>

<p>Character sets and code points are abstractions that sit between bytes and encodings. 
A character set defines a group of characters, their order, and it assigns each an 
identifier. The identifier is known as a “code point”. It allows for character 
interaction without having to understand the underlying byte structure of a character.</p>

<p>So basically code point is group of bytes that make a character. It can be thought of
as the ‘visual’ size of the string. The <code>size</code> method on a string actually returns
the number of code points in the string.</p>

<h2 id="unicode-characters-in-regular-ruby-strings">Unicode characters in regular Ruby strings</h2>

<p>Using the <code>\u</code> escape sequence, we can specify the value of an 8-bit hexadecimal string
in Ruby.</p>

<h2 id="usual-string-encodings">Usual string encodings</h2>

<p>The default string encoding in Ruby is UTF-8.</p>

<h2 id="byte-strings">Byte strings</h2>

<p>Byte strings can be said to be just a sequence of bytes. They are not necessarily
human-readable (in a way that makes sense). The closest brother of byte strings in Ruby
can be <a href="https://stackoverflow.com/questions/6224052/what-is-the-difference-between-a-string-and-a-byte-string">Python byte strings</a>.</p>

<p>These strings do not implicitly carry an encoding any must be ‘coded’ into a particular
encoding before being used. They’re primary use case is for storing data to disk in
machine readable form. The size of a byte string is exactly the same as the number of
characters in the string.</p>

<p>Since UTF-8 is the default string encoding, you need to force Ruby to convert a string
into a byte string (a.k.a US-ASCII) string using the <code>force_encoding</code> method. For example:</p>
<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre><span style="color:#60E">2.4</span>.<span style="color:#F00;background-color:#FAA">1</span> :<span style="color:#00D">026</span> &gt; a = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ありが</span><span style="color:#710">&quot;</span></span>
<span style="color:#777"># =&gt; &quot;ありが&quot; </span>
<span style="color:#60E">2.4</span>.<span style="color:#F00;background-color:#FAA">1</span> :<span style="color:#00D">027</span> &gt; a.bytes
<span style="color:#777"># =&gt; [227, 129, 130, 227, 130, 138, 227, 129, 140] </span>
<span style="color:#60E">2.4</span>.<span style="color:#F00;background-color:#FAA">1</span> :<span style="color:#00D">02</span><span style="color:#00D">8</span> &gt; a.force_encoding <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">US-ASCII</span><span style="color:#710">&quot;</span></span>
<span style="color:#777"># =&gt; &quot;\xE3\x81\x82\xE3\x82\x8A\xE3\x81\x8C&quot; </span>
<span style="color:#60E">2.4</span>.<span style="color:#F00;background-color:#FAA">1</span> :<span style="color:#00D">02</span><span style="color:#00D">9</span> &gt; a.bytes
<span style="color:#777"># =&gt; [227, 129, 130, 227, 130, 138, 227, 129, 140] </span>
</pre></td>
</tr></table>
</div>

<p>Unfortunately there is no direct way of specifying byte strings in Ruby like the <code>b''</code>
short-hand syntax in Python.</p>

<h2 id="useful-apis">Useful APIs</h2>

<p>The <code>RSTRING_LEN()</code> macro returns the string data <strong>in bytes</strong> as variable of <code>size_t</code> type.</p>

<p>The encoding of strings is stored in the <code>rb_encoding</code> data type.</p>

<p>The <code>rb_str_new()</code> function that is used for creating strings from <code>char*</code> arrays returns
Ruby strings are encoded as <code>US-ASCII</code>.</p>

<p><code>rb_enc_get_index(VALUE obj)</code> gives an integer value for the particular encoding. The file
<a href="https://github.com/ruby/ruby/blob/trunk/encindex.h">encindex.h</a> defines several constants that
are associate a single <code>int</code> with the encoding of a string. These macros can be combined with
<code>rb_enc_get_index</code> to easily compare the encoding of a Ruby string. However, this file is not
accesssible for C extension writers since it is not present under the <code>include/ruby</code> directory.</p>

<p>Since I cannot yet find a fast and simple way of checking the encoding via C API calls,
I’m resorting to rather ugly and slow Ruby method calls. Here’s the functions:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre></pre></td>
</tr></table>
</div>

<h1 id="other-posts-and-links">Other posts and links</h1>

<ul>
  <li>Andre Arko’s blogpost : https://andre.arko.net/2013/12/01/strings-in-ruby-are-utf-8-now/</li>
  <li>The string type is broken: https://mortoray.com/2013/11/27/the-string-type-is-broken/</li>
  <li>String encodings book : https://aaronlasseigne.com/books/mastering-ruby/strings-and-encodings/</li>
  <li>Ruby encoding wikibook: https://en.wikibooks.org/wiki/Ruby_Programming/Encoding</li>
  <li>Post with some internals of bytes: https://www.justinweiss.com/articles/3-steps-to-fix-encoding-problems-in-ruby/</li>
  <li>Helpful blog on some internals: https://blog.codeship.com/how-ruby-string-encoding-benefits-developers/</li>
  <li>Post from Yehuda Katz: https://yehudakatz.com/2010/05/17/encodings-unabridged/</li>
  <li>https://blog.daftcode.pl/fixing-unicode-for-ruby-developers-60d7f6377388</li>
</ul>
:ET