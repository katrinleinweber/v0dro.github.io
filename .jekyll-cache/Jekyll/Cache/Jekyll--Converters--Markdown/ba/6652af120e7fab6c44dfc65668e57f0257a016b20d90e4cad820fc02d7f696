I" ƒ<p>PBLAS (or Parallel BLAS) is a parallel version of BLAS that use BLACS internally for
parallel computing. It expects the matrix to be already distributed among processors
before it starts computing. You first create the data in each process and then provide 
PBLAS with information that will help it determine how exactly the matrix is distributed.
Each process can access only its local data.</p>

<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->
<p><strong>Table of Contents</strong></p>

<ul>
  <li><a href="#array-descriptor">Array descriptor</a></li>
  <li><a href="#multiplication-function-description">Multiplication function description</a></li>
  <li><a href="#full-code">Full code</a></li>
  <li><a href="#resources">Resources</a></li>
</ul>

<!-- markdown-toc end -->

<h1 id="array-descriptor">Array descriptor</h1>

<p>You also need to define an â€˜array descriptorâ€™ for the matrix that you are working on. 
The array descriptor is an integer array of length 9 that contains the following data:</p>
<div class="language-cpp highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre><span style="color:#0a8;font-weight:bold">int</span> array_desc[<span style="color:#00D">9</span>] = {
    dtype,   <span style="color:#777">// descriptor type (=1 for dense matrix)</span>
    context, <span style="color:#777">// BLACS context handle for process grid</span>
    m,       <span style="color:#777">// num of rows in the global array</span>
    n,       <span style="color:#777">// num of cols in the global array</span>
    mb,      <span style="color:#777">// num of rows in a block</span>
    nb,      <span style="color:#777">// num of cols in a block</span>
    rsrc,    <span style="color:#777">// process row over which first row of the global array is distributed</span>
    csrc,    <span style="color:#777">// process col over which first col of the global array is distributed</span>
    lld      <span style="color:#777">// leading dimension of the local array</span>
}
</pre></td>
</tr></table>
</div>

<p>Although you can do it yourself, using the <code>descinit</code> function for initializing the array descriptor is a good way to keep the code clean. This function looks as follows:</p>
<pre><code>void descinit_ (
    int *desc, 
    const int *m, 
    const int *n, 
    const int *mb, 
    const int *nb, 
    const int *irsrc, 
    const int *icsrc, 
    const int *ictxt, 
    const int *lld, 
    int *info
);
</code></pre>

<h1 id="multiplication-function-description">Multiplication function description</h1>

<p>According to PBLAS conventions, the global matrix can be denoted by <code>A</code> and the 
block of matrix possessed by the particlar process as <code>sub(A)</code>. The number of
rows and columns of a global dense matrix that a particular process in a grid
receives after data distributing is denoted by <code>LOCr()</code> and <code>LOCc()</code>, respectively.
To compute these numbers, you can use the ScaLAPACK tool routine <code>numroc</code>.</p>

<p>To explain with example, see the prototype of the <code>pdgemm</code> routine 
(<a href="https://software.intel.com/en-us/mkl-developer-reference-c-p-gemm#5258C6E6-D85C-4E79-A64C-A45F300B0C3C">intel</a> resource):</p>
<div class="language-cpp highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
</pre></td>
  <td class="code"><pre><span style="color:#088;font-weight:bold">void</span> pdgemm_(
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">char</span> *transa ,  <span style="color:#777">// (g) form of sub(A)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">char</span> *transb ,  <span style="color:#777">// (g) form of sub(B)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *m ,        <span style="color:#777">// (g) number of rows of sub(A) and sub(C)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *n ,        <span style="color:#777">// (g) number of cols of sub(B) and sub(C)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *k ,        <span style="color:#777">// (g) Number of cols of sub(A) and rows of sub(A)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">double</span> *alpha , <span style="color:#777">// (g) scalar alpha</span>
    <span style="color:#777">// array that contains local pieces of distributed matrix sub(A). size lld_a by kla.</span>
    <span style="color:#777">//   kla is LOCq(ja+m-1) for C code (transposed).</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">double</span> *a ,     <span style="color:#777">// (l)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *ia ,       <span style="color:#777">// (g) row index in the distributed matrix A indicating first row of sub(A)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *ja ,       <span style="color:#777">// (g) col index in the distributed matrix A indicating first col of sub(A)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *desca ,    <span style="color:#777">// (g &amp; l)array of dim 9. Array descriptor of A.</span>
    <span style="color:#777">// array that contains local pieces of dist matrix sub(B). size lld_b by klb.</span>
    <span style="color:#777">//   klb is LOCq(jb+k-1) for C code (transposed).</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">double</span> *b ,     <span style="color:#777">// (l)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *ib ,       <span style="color:#777">// (g) row index of dist matrix B indicating first row of sub(B)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *jb ,       <span style="color:#777">// (g) col index of dist matrix B indicating first col of sub(B)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *descb ,    <span style="color:#777">// (g &amp; l) array desc of matrix B (dim 9).</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">double</span> *beta ,  <span style="color:#777">// (g) scalar beta</span>
    <span style="color:#0a8;font-weight:bold">double</span> *c ,           <span style="color:#777">// (l) Array of size (lld_a, LOCq(jc+n-1)). contains sub(C) pieces.</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *ic ,       <span style="color:#777">// (g) row index of dist matrix C indicating first row of sub(C)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *jc ,       <span style="color:#777">// (g) col index of dist matrix C indicating first col of sub(C)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *descc      <span style="color:#777">// (g &amp; l) array of dim 9. Array desc of C.</span>
)
</pre></td>
</tr></table>
</div>
<p>The above function looks very similar to non-parallel <code>dgemm</code> from BLAS, with
additions for making it easy to find elements in a parallel scenario. Keep in
mind that there are some arguments that refer to the global array properties
and some that refer to the local array properties.</p>

<p>A function called <code>numroc</code> from ScaLAPACK is useful for determining how many
rows or cols of the global matrix are present in a particular process. The 
prototype looks as follows:</p>
<div class="language-cpp highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre><span style="color:#0a8;font-weight:bold">int</span> numroc_(
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *n,       <span style="color:#777">// (g) number of rows/cols in dist matrix (global matrix).</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *nb,      <span style="color:#777">// (g input) block size. (must be square blocks)</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *iproc,   <span style="color:#777">// (l input) co-ordinate of process whole local array row/col is to be determined.</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *srcproc, <span style="color:#777">// (g input) co-ordinate of the process that contains the frist row or col of the dist matrix.</span>
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *nprocs   <span style="color:#777">// (g input) total number of processes.</span>
)
</pre></td>
</tr></table>
</div>

<p>When compiling these functions, donâ€™t forget to link with the <code>-lgfortran</code> flag.</p>

<h1 id="full-code">Full code</h1>

<p>A simple implementation of matrix multiplication using BLACS and PBLAS:</p>

<div class="language-cpp highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
<a href="#n56" name="n56">56</a>
<a href="#n57" name="n57">57</a>
<a href="#n58" name="n58">58</a>
<a href="#n59" name="n59">59</a>
<strong><a href="#n60" name="n60">60</a></strong>
<a href="#n61" name="n61">61</a>
<a href="#n62" name="n62">62</a>
<a href="#n63" name="n63">63</a>
<a href="#n64" name="n64">64</a>
<a href="#n65" name="n65">65</a>
<a href="#n66" name="n66">66</a>
<a href="#n67" name="n67">67</a>
<a href="#n68" name="n68">68</a>
<a href="#n69" name="n69">69</a>
<strong><a href="#n70" name="n70">70</a></strong>
<a href="#n71" name="n71">71</a>
<a href="#n72" name="n72">72</a>
<a href="#n73" name="n73">73</a>
<a href="#n74" name="n74">74</a>
<a href="#n75" name="n75">75</a>
<a href="#n76" name="n76">76</a>
<a href="#n77" name="n77">77</a>
<a href="#n78" name="n78">78</a>
<a href="#n79" name="n79">79</a>
<strong><a href="#n80" name="n80">80</a></strong>
<a href="#n81" name="n81">81</a>
<a href="#n82" name="n82">82</a>
<a href="#n83" name="n83">83</a>
<a href="#n84" name="n84">84</a>
<a href="#n85" name="n85">85</a>
<a href="#n86" name="n86">86</a>
<a href="#n87" name="n87">87</a>
<a href="#n88" name="n88">88</a>
<a href="#n89" name="n89">89</a>
<strong><a href="#n90" name="n90">90</a></strong>
<a href="#n91" name="n91">91</a>
<a href="#n92" name="n92">92</a>
<a href="#n93" name="n93">93</a>
<a href="#n94" name="n94">94</a>
<a href="#n95" name="n95">95</a>
<a href="#n96" name="n96">96</a>
<a href="#n97" name="n97">97</a>
<a href="#n98" name="n98">98</a>
<a href="#n99" name="n99">99</a>
<strong><a href="#n100" name="n100">100</a></strong>
<a href="#n101" name="n101">101</a>
<a href="#n102" name="n102">102</a>
<a href="#n103" name="n103">103</a>
<a href="#n104" name="n104">104</a>
<a href="#n105" name="n105">105</a>
<a href="#n106" name="n106">106</a>
<a href="#n107" name="n107">107</a>
<a href="#n108" name="n108">108</a>
<a href="#n109" name="n109">109</a>
<strong><a href="#n110" name="n110">110</a></strong>
<a href="#n111" name="n111">111</a>
<a href="#n112" name="n112">112</a>
<a href="#n113" name="n113">113</a>
<a href="#n114" name="n114">114</a>
<a href="#n115" name="n115">115</a>
<a href="#n116" name="n116">116</a>
<a href="#n117" name="n117">117</a>
<a href="#n118" name="n118">118</a>
<a href="#n119" name="n119">119</a>
<strong><a href="#n120" name="n120">120</a></strong>
<a href="#n121" name="n121">121</a>
<a href="#n122" name="n122">122</a>
<a href="#n123" name="n123">123</a>
<a href="#n124" name="n124">124</a>
<a href="#n125" name="n125">125</a>
<a href="#n126" name="n126">126</a>
<a href="#n127" name="n127">127</a>
<a href="#n128" name="n128">128</a>
<a href="#n129" name="n129">129</a>
<strong><a href="#n130" name="n130">130</a></strong>
<a href="#n131" name="n131">131</a>
<a href="#n132" name="n132">132</a>
<a href="#n133" name="n133">133</a>
<a href="#n134" name="n134">134</a>
<a href="#n135" name="n135">135</a>
</pre></td>
  <td class="code"><pre><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&quot;mpi.h&quot;</span>
<span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;iostream&gt;</span>
<span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;cstdlib&gt;</span>
<span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;cmath&gt;</span>
<span style="color:#088;font-weight:bold">using</span> <span style="color:#080;font-weight:bold">namespace</span> std;

<span style="color:#088;font-weight:bold">extern</span> <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">C</span><span style="color:#710">&quot;</span></span> {
  <span style="color:#777">/* Cblacs declarations */</span>
  <span style="color:#088;font-weight:bold">void</span> Cblacs_pinfo(<span style="color:#0a8;font-weight:bold">int</span>*, <span style="color:#0a8;font-weight:bold">int</span>*);
  <span style="color:#088;font-weight:bold">void</span> Cblacs_get(<span style="color:#0a8;font-weight:bold">int</span>, <span style="color:#0a8;font-weight:bold">int</span>, <span style="color:#0a8;font-weight:bold">int</span>*);
  <span style="color:#088;font-weight:bold">void</span> Cblacs_gridinit(<span style="color:#0a8;font-weight:bold">int</span>*, <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">char</span>*, <span style="color:#0a8;font-weight:bold">int</span>, <span style="color:#0a8;font-weight:bold">int</span>);
  <span style="color:#088;font-weight:bold">void</span> Cblacs_pcoord(<span style="color:#0a8;font-weight:bold">int</span>, <span style="color:#0a8;font-weight:bold">int</span>, <span style="color:#0a8;font-weight:bold">int</span>*, <span style="color:#0a8;font-weight:bold">int</span>*);
  <span style="color:#088;font-weight:bold">void</span> Cblacs_gridexit(<span style="color:#0a8;font-weight:bold">int</span>);
  <span style="color:#088;font-weight:bold">void</span> Cblacs_barrier(<span style="color:#0a8;font-weight:bold">int</span>, <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">char</span>*);
 
  <span style="color:#0a8;font-weight:bold">int</span> numroc_(<span style="color:#0a8;font-weight:bold">int</span>*, <span style="color:#0a8;font-weight:bold">int</span>*, <span style="color:#0a8;font-weight:bold">int</span>*, <span style="color:#0a8;font-weight:bold">int</span>*, <span style="color:#0a8;font-weight:bold">int</span>*);

  <span style="color:#088;font-weight:bold">void</span> descinit_(<span style="color:#0a8;font-weight:bold">int</span> *desc, <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *m,  <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *n, <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *mb, 
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *nb, <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *irsrc, <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *icsrc, <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *ictxt, 
    <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">int</span> *lld, <span style="color:#0a8;font-weight:bold">int</span> *info);

  <span style="color:#088;font-weight:bold">void</span> pdgemm_( <span style="color:#0a8;font-weight:bold">char</span>* TRANSA, <span style="color:#0a8;font-weight:bold">char</span>* TRANSB,
                <span style="color:#0a8;font-weight:bold">int</span> * M, <span style="color:#0a8;font-weight:bold">int</span> * N, <span style="color:#0a8;font-weight:bold">int</span> * K,
                <span style="color:#0a8;font-weight:bold">double</span> * ALPHA,
                <span style="color:#0a8;font-weight:bold">double</span> * A, <span style="color:#0a8;font-weight:bold">int</span> * IA, <span style="color:#0a8;font-weight:bold">int</span> * JA, <span style="color:#0a8;font-weight:bold">int</span> * DESCA,
                <span style="color:#0a8;font-weight:bold">double</span> * B, <span style="color:#0a8;font-weight:bold">int</span> * IB, <span style="color:#0a8;font-weight:bold">int</span> * JB, <span style="color:#0a8;font-weight:bold">int</span> * DESCB,
                <span style="color:#0a8;font-weight:bold">double</span> * BETA,
                <span style="color:#0a8;font-weight:bold">double</span> * C, <span style="color:#0a8;font-weight:bold">int</span> * IC, <span style="color:#0a8;font-weight:bold">int</span> * JC, <span style="color:#0a8;font-weight:bold">int</span> * DESCC );
}


<span style="color:#0a8;font-weight:bold">int</span> main(<span style="color:#0a8;font-weight:bold">int</span> argc, <span style="color:#0a8;font-weight:bold">char</span> ** argv)
{
  <span style="color:#777">// MPI init</span>
  MPI_Init(&amp;argc, &amp;argv);
  <span style="color:#0a8;font-weight:bold">int</span> mpi_rank, mpi_size;
  MPI_Comm_rank(MPI_COMM_WORLD, &amp;mpi_rank);
  MPI_Comm_size(MPI_COMM_WORLD, &amp;mpi_size);
  <span style="color:#777">// end MPI init</span>

  <span style="color:#777">// BLACS init</span>
  <span style="color:#0a8;font-weight:bold">int</span> BLACS_CONTEXT, proc_nrows, proc_ncols, myrow, mycol;
  <span style="color:#0a8;font-weight:bold">int</span> proc_id, num_procs;
  proc_nrows = <span style="color:#00D">2</span>; proc_ncols = <span style="color:#00D">2</span>;
n  <span style="color:#777">//int proc_dims[2] = {proc_nrows, proc_ncols};</span>
  Cblacs_pinfo(&amp;proc_id, &amp;num_procs);
  Cblacs_get( -<span style="color:#00D">1</span>, <span style="color:#00D">0</span>, &amp;BLACS_CONTEXT );
  Cblacs_gridinit( &amp;BLACS_CONTEXT, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Row</span><span style="color:#710">&quot;</span></span>, proc_nrows, proc_ncols );
  Cblacs_pcoord(BLACS_CONTEXT, mpi_rank, &amp;myrow, &amp;mycol);
  cout &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">myrow </span><span style="color:#710">&quot;</span></span> &lt;&lt; myrow &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> mycol </span><span style="color:#710">&quot;</span></span> &lt;&lt; mycol &lt;&lt; endl;
  cout &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">procid </span><span style="color:#710">&quot;</span></span> &lt;&lt; proc_id &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> num_procs </span><span style="color:#710">&quot;</span></span> &lt;&lt; num_procs &lt;&lt; endl;
  <span style="color:#777">// end BLACS init</span>

  <span style="color:#777">// matrix properties</span>
  <span style="color:#0a8;font-weight:bold">int</span> N = <span style="color:#00D">8</span>, nb = <span style="color:#00D">4</span>; <span style="color:#777">// mat size, blk size.</span>
  <span style="color:#0a8;font-weight:bold">double</span>* a = (<span style="color:#0a8;font-weight:bold">double</span>*)malloc(<span style="color:#080;font-weight:bold">sizeof</span>(<span style="color:#0a8;font-weight:bold">double</span>)*nb*nb);
  <span style="color:#0a8;font-weight:bold">double</span>* b = (<span style="color:#0a8;font-weight:bold">double</span>*)malloc(<span style="color:#080;font-weight:bold">sizeof</span>(<span style="color:#0a8;font-weight:bold">double</span>)*nb*nb);
  <span style="color:#0a8;font-weight:bold">double</span>* c = (<span style="color:#0a8;font-weight:bold">double</span>*)malloc(<span style="color:#080;font-weight:bold">sizeof</span>(<span style="color:#0a8;font-weight:bold">double</span>)*nb*nb);

  <span style="color:#777">// generate matrix data</span>
  <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>; i &lt; nb*nb; ++i) {
    a[i] = <span style="color:#00D">1</span>;
    b[i] = <span style="color:#00D">2</span>;
    c[i] = <span style="color:#00D">0</span>;
  }
  <span style="color:#777">// end matrix properties</span>

  <span style="color:#777">// create array descriptor</span>
  <span style="color:#0a8;font-weight:bold">int</span> desca[<span style="color:#00D">9</span>];
  <span style="color:#0a8;font-weight:bold">int</span> descb[<span style="color:#00D">9</span>];
  <span style="color:#0a8;font-weight:bold">int</span> descc[<span style="color:#00D">9</span>];
  <span style="color:#0a8;font-weight:bold">int</span> rsrc = <span style="color:#00D">0</span>, csrc = <span style="color:#00D">0</span>, info;
  descinit_(desca, &amp;N, &amp;N, &amp;nb, &amp;nb, &amp;rsrc, &amp;csrc, &amp;BLACS_CONTEXT, &amp;nb, &amp;info);
  descinit_(descb, &amp;N, &amp;N, &amp;nb, &amp;nb, &amp;rsrc, &amp;csrc, &amp;BLACS_CONTEXT, &amp;nb, &amp;info);
  descinit_(descc, &amp;N, &amp;N, &amp;nb, &amp;nb, &amp;rsrc, &amp;csrc, &amp;BLACS_CONTEXT, &amp;nb, &amp;info);
  cout &lt;&lt; proc_id &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> info: </span><span style="color:#710">&quot;</span></span> &lt;&lt; info &lt;&lt; endl;
  <span style="color:#777">// end create array descriptor</span>
  
  Cblacs_barrier(BLACS_CONTEXT, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">All</span><span style="color:#710">&quot;</span></span>);
  <span style="color:#0a8;font-weight:bold">int</span> ia = <span style="color:#00D">1</span>, ja = <span style="color:#00D">1</span>, ib = <span style="color:#00D">1</span>, jb = <span style="color:#00D">1</span>, ic = <span style="color:#00D">1</span>, jc = <span style="color:#00D">1</span>;
  <span style="color:#0a8;font-weight:bold">double</span> alpha = <span style="color:#00D">1</span>, beta = <span style="color:#00D">1</span>;
  pdgemm_(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">T</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">T</span><span style="color:#710">&quot;</span></span>, &amp;N, &amp;N, &amp;N, &amp;alpha, a, &amp;ia, &amp;ja, desca, b, &amp;ib, &amp;jb, descb,
          &amp;beta, c, &amp;ic, &amp;jc, descc);

  <span style="color:#777">// print results on a per-process basis</span>
  <span style="color:#080;font-weight:bold">if</span> (proc_id == <span style="color:#00D">0</span>) {
    cout &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">proc : </span><span style="color:#710">&quot;</span></span> &lt;&lt; proc_id &lt;&lt; endl;
    <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>; i &lt; nb; ++i) {
      <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> j = <span style="color:#00D">0</span>; j &lt; nb; ++j) {
        cout &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">(</span><span style="color:#710">&quot;</span></span> &lt;&lt; nb*myrow + i &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">,</span><span style="color:#710">&quot;</span></span> &lt;&lt;
          nb*mycol + j &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">) </span><span style="color:#710">&quot;</span></span> &lt;&lt; c[i*nb + j] &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> </span><span style="color:#710">&quot;</span></span>;
      }
      cout &lt;&lt; endl;
    }
    cout &lt;&lt; endl;
  }

  <span style="color:#080;font-weight:bold">if</span> (proc_id == <span style="color:#00D">1</span>) {
    cout &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">proc : </span><span style="color:#710">&quot;</span></span> &lt;&lt; proc_id &lt;&lt; endl;
    <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>; i &lt; nb; ++i) {
      <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> j = <span style="color:#00D">0</span>; j &lt; nb; ++j) {
        cout &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">(</span><span style="color:#710">&quot;</span></span> &lt;&lt; nb*myrow + i &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">,</span><span style="color:#710">&quot;</span></span> &lt;&lt;
          nb*mycol + j &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">) </span><span style="color:#710">&quot;</span></span> &lt;&lt; c[i*nb + j] &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> </span><span style="color:#710">&quot;</span></span>;
      }
      cout &lt;&lt; endl;
    }
    cout &lt;&lt; endl;
  }

  <span style="color:#080;font-weight:bold">if</span> (proc_id == <span style="color:#00D">2</span>) {
    cout &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">proc : </span><span style="color:#710">&quot;</span></span> &lt;&lt; proc_id &lt;&lt; endl;
    <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>; i &lt; nb; ++i) {
      <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> j = <span style="color:#00D">0</span>; j &lt; nb; ++j) {
        cout &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">(</span><span style="color:#710">&quot;</span></span> &lt;&lt; nb*myrow + i &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">,</span><span style="color:#710">&quot;</span></span> &lt;&lt;
          nb*mycol + j &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">) </span><span style="color:#710">&quot;</span></span> &lt;&lt; c[i*nb + j] &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> </span><span style="color:#710">&quot;</span></span>;
      }
      cout &lt;&lt; endl;
    }
    cout &lt;&lt; endl;
  }

  <span style="color:#080;font-weight:bold">if</span> (proc_id == <span style="color:#00D">3</span>) {
    cout &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">proc : </span><span style="color:#710">&quot;</span></span> &lt;&lt; proc_id &lt;&lt; endl;
    <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>; i &lt; nb; ++i) {
      <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> j = <span style="color:#00D">0</span>; j &lt; nb; ++j) {
        cout &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">(</span><span style="color:#710">&quot;</span></span> &lt;&lt; nb*myrow + i &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">,</span><span style="color:#710">&quot;</span></span> &lt;&lt;
          nb*mycol + j &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">) </span><span style="color:#710">&quot;</span></span> &lt;&lt; c[i*nb + j] &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> </span><span style="color:#710">&quot;</span></span>;
      }
      cout &lt;&lt; endl;
    }
    cout &lt;&lt; endl;
  }

  MPI_Finalize();
}
</pre></td>
</tr></table>
</div>

<h1 id="resources">Resources</h1>

<ul>
  <li><a href="http://www.netlib.org/utk/papers/pblas/node20.html">Use of PBLAS from netlib.</a></li>
  <li><a href="https://www.ibm.com/support/knowledgecenter/en/SSNR5K_5.1.0/com.ibm.cluster.pessl.v5r1.pssl100.doc/am6gr_lnumroc.htm">numroc IBM explanation.</a></li>
</ul>

:ET