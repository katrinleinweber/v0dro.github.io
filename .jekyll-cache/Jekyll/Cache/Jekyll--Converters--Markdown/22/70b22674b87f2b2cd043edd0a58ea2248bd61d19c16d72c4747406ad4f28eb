I"19<p>The newest release of daru brings alongwith it added support for time series data analysis, manipulation and visualization.</p>

<p>A time series is any data is indexed (or labelled) by time. This includes the stock market index, prices of crude oil or precious metals, or even geo-locations over a period of time.</p>

<p>The primary manner in which daru implements a time series is by indexing data objects (i.e Daru::Vector or Daru::DataFrame) on a new index called the DateTimeIndex. A DateTimeIndex consists of dates, which can queried individually or sliced.</p>

<h2 id="introduction">Introduction</h2>

<p>A very basic time series can be created with something like this:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">distribution</span><span style="color:#710">'</span></span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">daru</span><span style="color:#710">'</span></span>

rng = <span style="color:#036;font-weight:bold">Distribution</span>::<span style="color:#036;font-weight:bold">Normal</span>.rng

index  = <span style="color:#036;font-weight:bold">Daru</span>::<span style="color:#036;font-weight:bold">DateTimeIndex</span>.date_range(<span style="color:#A60">:start</span> =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">2012-4-2</span><span style="color:#710">'</span></span>, <span style="color:#A60">:periods</span> =&gt; <span style="color:#00D">1000</span>, <span style="color:#A60">:freq</span> =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">D</span><span style="color:#710">'</span></span>)
vector = <span style="color:#036;font-weight:bold">Daru</span>::<span style="color:#036;font-weight:bold">Vector</span>.new(<span style="color:#00D">1000</span>.times.map {rng.call}, <span style="color:#606">index</span>: index)
</pre></td>
</tr></table>
</div>
<p>![/assets//images/daru_time_series/simple_vector.png][A Simple Vector indexed on DateTimeIndex]</p>

<p>In the above code, the <code>DateTimeIndex.date_range</code> function is creating a <code>DateTimeIndex</code> starting from a particular date and spanning for 1000 periods, with a frequency of 1 day between period. For a complete coverage of DateTimeIndex see <a href="">this</a> notebook. For an introduction to the date offsets used by daru see <a href="http://v0dro.github.io/blog/2015/07/27/date-offsets-in-daru/">this blog post</a>.</p>

<p>The index is passed into the Vector like a normal <code>Daru::Index</code> object.</p>

<h2 id="statistics-functions-and-plotting-for-time-series">Statistics functions and plotting for time series</h2>

<p>Many functions are avaiable in daru for computing useful statistics and analysis. A brief of summary of statistics methods available on time series is as follows:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>Method Name</strong></th>
      <th style="text-align: center"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><code>rolling_mean</code></td>
      <td style="text-align: center">Calculate Moving Average</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_median</code></td>
      <td style="text-align: center">Calculate Moving Median</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_std</code></td>
      <td style="text-align: center">Calculate Moving Standard Deviation</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_variance</code></td>
      <td style="text-align: center">Calculate Moving Variance</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_max</code></td>
      <td style="text-align: center">Calculate Moving Maximum value</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_min</code></td>
      <td style="text-align: center">Calcuclate moving minimum value</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_count</code></td>
      <td style="text-align: center">Calculate moving non-missing values</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_sum</code></td>
      <td style="text-align: center">Calculate moving sum</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>ema</code></td>
      <td style="text-align: center">Calculate exponential moving average</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>macd</code></td>
      <td style="text-align: center">Moving Average Convergence-Divergence</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>acf</code></td>
      <td style="text-align: center">Calculate Autocorrelation Co-efficients of the Series</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>acvf</code></td>
      <td style="text-align: center">Provide the auto-covariance value</td>
    </tr>
  </tbody>
</table>

<p>To demonstrate, the rolling mean of a Daru::Vector can be computed as follows:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
</pre></td>
  <td class="code"><pre>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">daru</span><span style="color:#710">'</span></span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">distribution</span><span style="color:#710">'</span></span>

rng    = <span style="color:#036;font-weight:bold">Distribution</span>::<span style="color:#036;font-weight:bold">Normal</span>.rng
vector = <span style="color:#036;font-weight:bold">Daru</span>::<span style="color:#036;font-weight:bold">Vector</span>.new(
  <span style="color:#00D">1000</span>.times.map { rng.call }, 
  <span style="color:#606">index</span>: <span style="color:#036;font-weight:bold">Daru</span>::<span style="color:#036;font-weight:bold">DateTimeIndex</span>.date_range(
    <span style="color:#A60">:start</span> =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">2012-4-2</span><span style="color:#710">'</span></span>, <span style="color:#A60">:periods</span> =&gt; <span style="color:#00D">1000</span>, <span style="color:#A60">:freq</span> =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">D</span><span style="color:#710">'</span></span>)
)
<span style="color:#777"># Compute the cumulative sum</span>
vector = vector.cumsum
rolling = vector.rolling_mean <span style="color:#00D">60</span>

rolling.tail
</pre></td>
</tr></table>
</div>
<p>![/assets//images/daru_time_series/rolling_mean.png][Rolling Mean Tail]</p>

<p>This time series can be very easily plotted with its rolling mean by using the <a href="https://github.com/dilcom/gnuplotrb">GnuplotRB</a> gem:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">gnuplotrb</span><span style="color:#710">'</span></span>

<span style="color:#036;font-weight:bold">GnuplotRB</span>::<span style="color:#036;font-weight:bold">Plot</span>.new(
  [vector , <span style="color:#606">with</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">lines</span><span style="color:#710">'</span></span>, <span style="color:#606">title</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Vector</span><span style="color:#710">'</span></span>],
  [rolling, <span style="color:#606">with</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">lines</span><span style="color:#710">'</span></span>, <span style="color:#606">title</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Rolling Mean</span><span style="color:#710">'</span></span>])
</pre></td>
</tr></table>
</div>

<p>![/assets//images/daru_time_series/cumsum_rolling_line_graph.png][Line Graph of Rolling mean and cumsum]</p>

<p>These methods are also available on DataFrame, which results in calling them on each of numeric vectors:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">daru</span><span style="color:#710">'</span></span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">distribution</span><span style="color:#710">'</span></span>

rng    = <span style="color:#036;font-weight:bold">Distribution</span>::<span style="color:#036;font-weight:bold">Normal</span>.rng
index  = <span style="color:#036;font-weight:bold">Daru</span>::<span style="color:#036;font-weight:bold">DateTimeIndex</span>.date_range(<span style="color:#A60">:start</span> =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">2012-4-2</span><span style="color:#710">'</span></span>, <span style="color:#A60">:periods</span> =&gt; <span style="color:#00D">1000</span>, <span style="color:#A60">:freq</span> =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">D</span><span style="color:#710">'</span></span>)
df = <span style="color:#036;font-weight:bold">Daru</span>::<span style="color:#036;font-weight:bold">DataFrame</span>.new({
  <span style="color:#606">a</span>: <span style="color:#00D">1000</span>.times.map { rng.call },
  <span style="color:#606">b</span>: <span style="color:#00D">1000</span>.times.map { rng.call },
  <span style="color:#606">c</span>: <span style="color:#00D">1000</span>.times.map { rng.call }
}, <span style="color:#606">index</span>: index)
</pre></td>
</tr></table>
</div>
<p>![/assets//images/daru_time_series/dataframe.png][DateTime indexed DataFrame]</p>

<p>In a manner similar to that done with Vectors above, we can easily plot each Vector of the DataFrame with GNU plot:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
</pre></td>
  <td class="code"><pre>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">gnuplotrb</span><span style="color:#710">'</span></span>

<span style="color:#777"># Calculate cumulative sum of each Vector</span>
df = df.cumsum

<span style="color:#777"># Compute rolling sum of each Vector with a loopback length of 60.</span>
r_sum = df.rolling_sum(<span style="color:#00D">60</span>)

plots = []
r_sum.each_vector_with_index <span style="color:#080;font-weight:bold">do</span> |vec,n|
  plots &lt;&lt; <span style="color:#036;font-weight:bold">GnuplotRB</span>::<span style="color:#036;font-weight:bold">Plot</span>.new([vec, <span style="color:#606">with</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">lines</span><span style="color:#710">'</span></span>, <span style="color:#606">title</span>: n])
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#036;font-weight:bold">GnuplotRB</span>::<span style="color:#036;font-weight:bold">Multiplot</span>.new(*plots, <span style="color:#606">layout</span>: [<span style="color:#00D">3</span>,<span style="color:#00D">1</span>], <span style="color:#606">title</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Rolling sums</span><span style="color:#710">'</span></span>)
</pre></td>
</tr></table>
</div>
<p>![/assets//images/daru_time_series/dataframe_plot.png][Plotting the DataFrame]</p>

<h2 id="usage-with-statsample-timeseries">Usage with statsample-timeseries</h2>

<p>Daru now integrates with <a href="https://github.com/SciRuby/statsample-timeseries">statsample-timeseries</a>, a <a href="https://github.com/sciruby/statsample">statsample</a> extension that provides many useful statistical analysis tools commonly applied to time series.</p>

<p>Some examples with working examples of daru and statsample-timseries are coming soon. Stay tuned!</p>
:ET