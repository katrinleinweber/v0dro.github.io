I"
<p>In this post I will document certain things Iâ€™ve learned when working with numpy.
Might be interesting to some people.</p>

<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again -->
<p><strong>Table of Contents</strong></p>

<ul>
  <li><a href="#axes-in-numpy">Axes in numpy</a></li>
  <li><a href="#printoptions">Printoptions</a></li>
  <li><a href="#debugging">Debugging</a></li>
  <li><a href="#useful-functions">Useful functions</a>
    <ul>
      <li><a href="#setting-diagonals">Setting diagonals</a></li>
    </ul>
  </li>
  <li><a href="#resources">Resources</a></li>
</ul>

<!-- markdown-toc end -->

<h1 id="axes-in-numpy">Axes in numpy</h1>

<p>Axes in numpy are defined for arrays in more than one dim. A 2D array has the 0th axis running
vertically <em>downwards</em> across rows and the 1st axis is running <em>horizontally</em> running across
columns.</p>

<p>See https://docs.scipy.org/doc/numpy-1.10.0/glossary.html</p>

<h1 id="printoptions">Printoptions</h1>

<p>The <code>numpy.printoptions</code> function can be used for setting various global print options like
linewidth and precision during printing to console. Useful for debugging and viewing:</p>
<ul>
  <li><code>suppress</code> - Suppress printing in scientific notation.</li>
  <li><code>precision</code> - Limit the precision of numbers printed.</li>
  <li><code>linewidth</code> - Max width of printing.</li>
</ul>

<h1 id="debugging">Debugging</h1>

<p>The <code>pdb</code> module is useful for debugging python. Place <code>pdb.set_trace()</code> in some place
in the code where you want the code to break. It will then provide you with a python
REPL.</p>

<p>Hereâ€™s a link to it: https://pythonconquerstheuniverse.wordpress.com/2009/09/10/debugging-in-python/</p>

<h1 id="broadcasting">Broadcasting</h1>

<p>Numpy uses â€˜broadcastableâ€™ data structures. It describes how numpy treats arrays with
different shapes during arithmetic operations.</p>

<p>Link:</p>
<ul>
  <li>https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html</li>
  <li>https://eli.thegreenplace.net/2015/broadcasting-arrays-in-numpy/</li>
</ul>

<h1 id="shape-parameters">Shape parameters</h1>

<p>Sometimes, some operations return their shape at <code>(R,1)</code> and some as <code>(R,)</code>. This design
decision is taken because numpy arrays are indexed by two numbers in the former case and
a single number in the latter case. This allows single number indexing and storage in
flat-indexed arrays.</p>

<p>Link: https://stackoverflow.com/questions/22053050/difference-between-numpy-array-shape-r-1-and-r/22074424</p>

<h1 id="useful-functions">Useful functions</h1>

<h2 id="setting-diagonals">Setting diagonals</h2>

<p>Use <code>numpy.fill_diagonal()</code> for filling the diagonal of an array with some number.
Take note that this is an in-place modification function and that it does not return
any value.</p>

<p>Link: https://docs.scipy.org/doc/numpy/reference/generated/numpy.fill_diagonal.html</p>

<h2 id="matrix-lower-triangle">Matrix lower triangle</h2>

<p>Use <code>numpy.tril()</code> and pass the object.</p>

<h2 id="inverse-of-a-matrix">Inverse of a matrix</h2>

<p>Compute multiplicative inverse of a matrix using <code>numpy.linalg.inv()</code>.</p>

<p>Link: https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.linalg.inv.html</p>

<h2 id="multiplication">Multiplication</h2>

<p><code>*</code> is element-wise multiplication between two arrays. For matrix multiplication use
<code>numpy.matmul</code>.</p>

<h1 id="resources">Resources</h1>
:ET