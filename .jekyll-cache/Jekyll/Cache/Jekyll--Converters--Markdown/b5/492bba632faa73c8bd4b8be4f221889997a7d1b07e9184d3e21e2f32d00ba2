I"Å<p>When programming with MPI you might get run time errors like segfaults due to faulty IO programming or the like. The openMPI <a href="https://www.open-mpi.org/faq/?category=debugging">FAQ</a> has some useful insights.</p>

<h1 id="basic-stuff">Basic stuff</h1>

<p>Since you‚Äôre programming in a distributed environment, using gdb with MPI programs 
is a bit of a challenge, but is quite possible and reasonalbly easy to use as well. 
All you need to do is use the <code>mpirun</code> command with gdb in the following manner:</p>
<pre><code>mpirun -np &lt;num_processes&gt; xterm -e gdb ./a.out
</code></pre>

<p>A modified Makefile using the above command would look like so:</p>
<pre><code>mpi_debug: mpi_types.o $(SOURCES)
	$(CXX) $? -llapacke -llapack -lcblas
    mpirun -np 2 xterm -e gdb ./a.out
</code></pre>

<p>You can then call <code>run</code> inside gdb for each process. <a href="https://stackoverflow.com/questions/329259/how-do-i-debug-an-mpi-program">This stackoverflow answer</a> provides more insights into this. 
Basically just use the <code>-ex</code> argument right after the <code>gdb</code> command.</p>

<p>For example:</p>
<pre><code>mpirun -np 4 xterm -e gdb -ex="run" --args ./a.out
</code></pre>

<p>In case your processes exit after they‚Äôre finished and the xterm window closes, use
the following to prevent that from happening:</p>
<pre><code>mpirun -n 4 xterm -hold -e gdb -ex="run" --args matmul
</code></pre>
<p>The <code>hold</code> option does the trick.</p>

<h1 id="multiple-nodes">Multiple nodes</h1>

<p>If you‚Äôre using multiple nodes for running your MPI processes, the debugging process is
slightly different.</p>

:ET