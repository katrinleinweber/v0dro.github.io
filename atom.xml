<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Travel &lt;code&gt; Music]]></title>
  <link href="http://v0dro.github.io/atom.xml" rel="self"/>
  <link href="http://v0dro.github.io/"/>
  <updated>2016-08-25T12:50:23+05:30</updated>
  <id>http://v0dro.github.io/</id>
  <author>
    <name><![CDATA[Sameer Deshmukh]]></name>
    <email><![CDATA[sameer.deshmukh93@icloud.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Up a Lexical Analyser and Parser in Ruby]]></title>
    <link href="http://v0dro.github.io/blog/2016/08/21/setting-up-a-lexical-analyser-and-parser-in-ruby/"/>
    <updated>2016-08-21T12:36:05+05:30</updated>
    <id>http://v0dro.github.io/blog/2016/08/21/setting-up-a-lexical-analyser-and-parser-in-ruby</id>
    <content type="html"><![CDATA[<p>I wrote this post as I was setting up the lexer and parser for Rubex, a new superset of Ruby that I’m developing.</p>

<p>Let’s demonstrate the basic working of a lexical analyser and parser in action with a demonstration of a very simple addition program. Before you start, please make sure <a href="https://github.com/ruby/rake">rake</a>, <a href="https://github.com/seattlerb/oedipus_lex">oedipus_lex</a> and <a href="https://github.com/tenderlove/racc">racc</a> are installed on your computer.</p>

<h3 id="configuring-the-lexical-analyser">Configuring the lexical analyser</h3>

<p>The most fundamental need of any parser is that it needs string tokens to work with, which we will provide by way of lexical analysis by using the <a href="https://github.com/seattlerb/oedipus_lex">oedipus_lex</a> gem (the logical successor of <a href="https://github.com/tenderlove/rexical">rexical</a>). Go ahead and create a file <code>lexer.rex</code> with the following code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">AddLexer</span>
</span><span class="line"><span class="n">macro</span>
</span><span class="line">  <span class="no">DIGIT</span>         <span class="sr">/\d+/</span>
</span><span class="line"><span class="n">rule</span>
</span><span class="line">  <span class="sr">/</span><span class="si">#{</span><span class="no">DIGIT</span><span class="si">}</span><span class="sr">/</span>    <span class="p">{</span> <span class="o">[</span><span class="ss">:DIGIT</span><span class="p">,</span> <span class="n">text</span><span class="o">.</span><span class="n">to_i</span><span class="o">]</span> <span class="p">}</span>
</span><span class="line">  <span class="sr">/.|\n/</span>        <span class="p">{</span> <span class="o">[</span><span class="n">text</span><span class="p">,</span> <span class="n">text</span><span class="o">]</span> <span class="p">}</span>
</span><span class="line"><span class="n">inner</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">do_parse</span><span class="p">;</span> <span class="k">end</span> <span class="c1"># this is a stub.</span>
</span><span class="line"><span class="k">end</span> <span class="c1"># AddLexer</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the above code, we have defined the lexical analyser using Oedipus Lex’s syntax inside the <code>AddLexer</code> class. Let’s go over each element of the lexer one by one:</p>

<p><strong>macro</strong></p>

<p>The macro keyword lets you define macros for certain regular expressions
that you might need to write repeatedly. In the above lexer, the macro <code>DIGIT</code> is a regular expression (<code>\d+</code>) for detecting one or more integers. We place the regular expression inside forward slashes (<code>/../</code>) because oedipus_lex requires it that way. The lexer can handle any valid Ruby regular expression. See the Ruby docs for details on Ruby regexps.</p>

<p><strong>rule</strong></p>

<p>The section under the <code>rule</code> keyword defines your rules for the lexical analysis. Now it so happens that we’ve defined a macro for detecting digits, and in order to use that macro in the rules, it must be inside a Ruby string interpolation (<code>#{..}</code>). The line to the right of the <code>/#{DIGIT}/</code> states the action that must be taken if such a regular expression is encountered. Thus the lexer will return a Ruby Array that contains the first element as <code>:DIGIT</code>. The second element uses the <code>text</code> variable. This is a reserved variable in lex that holds the text that the lexer has matched. Similar the second rule will match any character (<code>.</code>) or a newline (<code>/n</code>) and return an <code>Array</code> with <code>[text, text]</code> inside it.</p>

<p><strong>inner</strong></p>

<p>Under the <code>inner</code> keyword you can specify any code that you want to occur inside your lexer class. This can be any logic that you want your lexer to execute. The Ruby code under the <code>inner</code> section is copied as-is into the final lexer class. In the above example, we’ve written an empty method called <code>do_parse</code> inside this section. This method is mandatory if you want your lexer to sucessfully execute. We’ll be coupling the lexer with <code>racc</code> shortly, so unless you want to write your own parsing logic, you should leave this method empty.</p>

<h3 id="configuring-the-parser">Configuring the parser</h3>

<p>In order for our addition program to be successful, it needs to know what to do with the tokens that are generated by the lexer. For this purpose, we need <a href="">racc</a>, an LALR(1) parser generator for Ruby. It is similar to yacc or bison and let’s you specify grammars easily.</p>

<p>Go ahead and create a file called <code>parser.racc</code> in the same folder as the previous <code>lexer.rex</code> and <code>Rakefile</code>, and put the following code inside it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">AddParser</span>
</span><span class="line"><span class="n">rule</span>
</span><span class="line">  <span class="ss">target</span><span class="p">:</span> <span class="n">exp</span> <span class="p">{</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="ss">exp</span><span class="p">:</span> <span class="n">exp</span> <span class="s1">&#39;+&#39;</span> <span class="n">exp</span> <span class="p">{</span> <span class="n">result</span> <span class="o">+=</span> <span class="n">val</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">;</span> <span class="nb">puts</span> <span class="n">result</span> <span class="p">}</span>
</span><span class="line">     <span class="o">|</span> <span class="no">DIGIT</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="o">----</span> <span class="n">header</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;lexer.rex.rb&#39;</span>
</span><span class="line">
</span><span class="line"><span class="o">----</span> <span class="n">inner</span>
</span><span class="line"><span class="k">def</span> <span class="nf">next_token</span>
</span><span class="line">  <span class="vi">@lexer</span><span class="o">.</span><span class="n">next_token</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">prepare_parser</span> <span class="n">file_name</span>
</span><span class="line">  <span class="vi">@lexer</span> <span class="o">=</span> <span class="no">AddLexer</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="vi">@lexer</span><span class="o">.</span><span class="n">parse_file</span> <span class="n">file_name</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see, we’ve put the logic for the parser inside the <code>AddParser</code> class. Notice that in oedipus_lex, only the parsing logic exists inside the class and everything else (i.e under <code>header</code> and <code>inner</code>) exists <em>outside</em> the class. Let’s go over each part of the parser one by one:</p>

<p><strong>class AddParser</strong></p>

<p>This is the core class that contains the parsing logic for the addition parser. Similar to <code>oedipus_lex</code>, it contains a <code>rule</code> section that specifies the grammar. The parser expects tokens in the form of <code>[:TOKEN_NAME, matched_text]</code>. The <code>:TOKEN_NAME</code> must be a symbol. This token name is matched to literal characters in the grammar (<code>DIGIT</code> in the above case). <code>token</code> and <code>expr</code> are varibles. Have a look at <a href="https://en.wikipedia.org/wiki/LALR_parser">this introduction to LALR(1) grammars</a> for further information.</p>

<p><strong>header</strong></p>

<p>The <code>header</code> keyword tells racc what code should be put at the top of the parser that it generates. You usually put your <code>require</code> statements here. In this case, we load the lexer class so that the parser can use it for accessing the tokens generated by the lexer. Notice that <code>header</code> has 4 hyphens (<code>-</code>) and a space before it. This is mandatory if your program is to not malfunction.</p>

<p><strong>inner</strong></p>

<p>The <code>inner</code> keyword tells racc what should be put <em>inside</em> the generated parser class. As you can see there are two methods in the above example - <code>next_token</code> and <code>prepare_parser</code>. The <code>next_token</code> method is mandatory for the parser to function and you must include it in your code. It should contain logic that will return the next token for the parser to consider. Moving on the <code>prepare_parser</code> method, it takes a file name that is to be parsed as an argument (how we pass that argument in will be seen later), and initialzes the lexer. It then calls the <code>parse_file</code> method, which is present in the lexer class by default.</p>

<p>The <code>next_token</code> method in turn uses the <code>@lexer</code> object’s <code>next_token</code> method to get a token generated by the lexer so that it can be used by the parser.</p>

<h3 id="putting-it-all-together">Putting it all together</h3>

<p>Our lexical analyser and parser are now coupled to work with each other, and we now use them in a Ruby program to parse a file. Create a new file called <code>adder.rb</code> and put the following code in it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;parser.racc.rb&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">file_name</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line"><span class="n">parser</span> <span class="o">=</span> <span class="no">AddParser</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">parser</span><span class="o">.</span><span class="n">prepare_parser</span><span class="p">(</span><span class="n">file_name</span><span class="p">)</span>
</span><span class="line"><span class="n">parser</span><span class="o">.</span><span class="n">do_parse</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>prepare_parser</code> is the same one that was defined in the <code>inner</code> section of the <code>parser.racc</code> above. The <code>do_parse</code> method called on the parser will signal the parser to start doing it’s job.</p>

<p>In a separate file called <code>text.txt</code> put the following text:
&lt;div class='bogus-wrapper'&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="mi">2</span><span class="o">+</span><span class="mi">2</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>Oedipus Lex does not have a command line tool like rexical for generating a lexer from the logic specified, but rather has a bunch of rake tasks defined for doing this job.
So now create a <code>Rakefile</code> in the same folder and put this code inside it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;oedipus_lex&#39;</span>
</span><span class="line">
</span><span class="line"><span class="no">Rake</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">rake_require</span> <span class="s2">&quot;oedipus_lex&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">desc</span> <span class="s2">&quot;Generate Lexer&quot;</span>
</span><span class="line"><span class="n">task</span> <span class="ss">:lexer</span>  <span class="o">=&gt;</span> <span class="s2">&quot;lexer.rex.rb&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">desc</span> <span class="s2">&quot;Generate Parser&quot;</span>
</span><span class="line"><span class="n">task</span> <span class="ss">:parser</span> <span class="o">=&gt;</span> <span class="ss">:lexer</span> <span class="k">do</span>
</span><span class="line">  <span class="sb">`racc parser.racc -o parser.racc.rb`</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Running <code>rake parser</code> will generate a two new files - <code>lexer.rex.rb</code> and <code>parser.racc.rb</code> - which will house the classes and logic for the lexer and parser, respectively. You can use your newly written lexer + parser with a <code>ruby adder.rb text.txt</code> command. It should output <code>4</code> as the answer.</p>

<p>You can find all the code in this blogpost <a href="https://github.com/v0dro/scratch/tree/master/lexer_parser">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Thoughts on Music Theory.]]></title>
    <link href="http://v0dro.github.io/blog/2016/08/16/random-thoughts-on-music-theory/"/>
    <updated>2016-08-16T19:07:01+05:30</updated>
    <id>http://v0dro.github.io/blog/2016/08/16/random-thoughts-on-music-theory</id>
    <content type="html"><![CDATA[<p>Title explains what this is about.</p>

<h3 id="august-2016">16 August 2016</h3>

<p>Was checking out <a href="https://www.youtube.com/watch?v=0qIP3_YLKpk">this</a> video (Contortionist - Language 1) and learned about standard C# tuning on a 6 string bass guitar today. He’s used tuning G# C# F# B E A. Killer bass tone. <a href="https://en.wikipedia.org/wiki/D%E2%99%AD_tuning">This wiki</a> says something different about C# standard, though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searching for Graduate Degree Courses in USA and Japan.]]></title>
    <link href="http://v0dro.github.io/blog/2016/08/05/searching-for-graduate-degree-courses-in-usa-and-japan/"/>
    <updated>2016-08-05T16:29:23+05:30</updated>
    <id>http://v0dro.github.io/blog/2016/08/05/searching-for-graduate-degree-courses-in-usa-and-japan</id>
    <content type="html"><![CDATA[<p>I’m currently searching for master’s degree courses in various colleges in Japan and USA. I want to pursue a Computer Science degree specializing in distributed systems. Searching for the right graduate degree courses can get depressing. Here I’m posting various links and leads that I came across through the course of my search.</p>

<h3 id="august-2016">5 August 2016</h3>

<p>Searching for options in Japan and started with University of Tokyo. Most of their courses seem to be in Japanese but there are a few in English as well. <a href="http://www.i.u-tokyo.ac.jp/ist_en/en-course/prg.shtml">This page</a> has some starting info about the English courses. Also found a collection of colleges <a href="http://www.mastersportal.eu/study-options/270286872/computer-science-it-japan.html">here</a>.</p>

<p>So apparently the process for getting into a Japanese college for Master’s can take two paths. The first is like so:</p>

<ol>
  <li>Talk to a professor and gain a research assistantship with him/her.</li>
  <li>Give an exam and enroll for a 2 year master’s course if you pass that exam.</li>
</ol>

<p>The second is directly give the exam, but I’m not sure how that can be done since they all appear to be written examinations that are conducted in Japan.</p>

<h3 id="august-2016-1">16 August 2016</h3>

<p>Having a look at the graudate schools of <a href="http://www.u-tokyo.ac.jp/en/academics/grad_ist.html">University of Tokyo</a>, <a href="http://educ.titech.ac.jp/eng/">Tokyo Insitute of Technology</a> and Kyoto University today.</p>

<p><strong>University of Tokyo</strong></p>

<p>UoT seems to have some special selection process for international applicants (<a href="http://www.i.u-tokyo.ac.jp/ist_en/howto_apply/special.shtml">link</a>), though it’s not useful for me. There’s a decent contact page <a href="http://www.i.u-tokyo.ac.jp/edu/entra/index_e.shtml">here</a>. They’ve also put up a check list for applications <a href="http://www.i.u-tokyo.ac.jp/edu/entra/pdf/check_list_m_e_revised.pdf">here</a>.</p>

<p><strong>Tokyo Inst. of Technology</strong></p>

<p>This also has a good <a href="http://www.titech.ac.jp/english/graduate_school/">graduate program</a>.Tokyo Inst. of Technology has an <a href="http://www.titech.ac.jp/english/graduate_school/international/international_graduate/">international graduate program for overseas applicants</a>. The courses seems to be in English mostly. The school of computer science has also <a href="http://www.titech.ac.jp/english/graduate_school/international/international_graduate/participating.html">participated</a> in the IGP and accept the IGP(A), IGP(B)3 and IGP(C) types of applicants. I seem to be most qualified for the <a href="http://www.titech.ac.jp/english/graduate_school/international/graduate_program_a/index.html">IGP(A)</a> and <a href="http://www.titech.ac.jp/english/graduate_school/international/graduate_program_c/overseas.html">IGP(C)</a> applications. </p>

<p>The ‘Education Program of Advanced Information Technology Leaders’ seems to be most relevant to my case. <a href="http://www.titech.ac.jp/guide/guide_28/English/index.html">This</a> looks like a good PDF to brief about the program.</p>

<p>All the courses require students to arrange for a Tokyo Tech faculty member to serve as their academic supervisor. <a href="http://search.star.titech.ac.jp/titech-ss/lang.act?forward=search.act&amp;lang=en&amp;">This handy web application</a> allows you to do that. They also have the MEXT scholarship for outstanding students.</p>

<p><strong>University of Kyoto</strong></p>

<p><a href="http://www.kuis.kyoto-u.ac.jp/kuis/">Page of dept. of information science</a>.</p>

<h3 id="august-2016-2">17 August 2016</h3>

<p>Continuing my research on Tokyo Inst. of Technology. The PDF I pointed to yesterday brought out an interesting observation - IGP(A) students and IGP(C) students seem to have different course work.</p>

<h3 id="august-2016-3">18 August 2016</h3>

<p>It seems the IGP C program at Tokyo Tech. is best for me. I will research that further today. Most probably I’ll need to do a 6 month research assistantship first. <a href="http://www.cs.titech.ac.jp/labs-e.html">Here’s a list</a> of the research groups of the Computer Sci. deptartment at Tokyo Tech.</p>

<h3 id="august-2016-4">20 August 2016</h3>

<p><strong>Tokyo Inst. of Technology</strong></p>

<p>Found a list of faculties under the IGP(C) program <a href="http://www.titech.ac.jp/english/graduate_school/international/graduate_program_c/pdf/listoffaculties_1609c.pdf">here</a>.</p>

<h3 id="august-2016-5">23 August 2016</h3>

<p>Had a look at Kyushu Inst. of Technology today. The <a href="http://www.kyutech.ac.jp/english/admissions/guidelines/iizuka_master.html">program for international students</a> looks good.</p>

<p>Also check out scholarship opportunities at Tokyo Inst. of Technology. Links - <a href="http://www.titech.ac.jp/english/graduate_school/international/scholarships/">1</a>, <a href="http://www.titech.ac.jp/english/graduate_school/international/scholarships/before_enrollment.html">2</a>, <a href="http://www.mastersportal.eu/universities/scholarships/13128/tokyo-institute-of-technology.html">3</a>. There are a bunch of scholarships that can be applied to before you enrol in university. Have a look <a href="http://www.titech.ac.jp/english/graduate_school/international/scholarships/before_enrollment.html">here</a>.</p>

<p>There’s also the <a href="http://www.titech.ac.jp/english/graduate_school/international/scholarships/mext_scholarship.html">MEXT scholarship</a>from the Japanese government.</p>

<h3 id="august-2016-6">24 August 2016</h3>

<p>Found an interesting <a href="http://www.ic.u-tokyo.ac.jp/ic/guidance/guide05_e.html">FAQ on the UoT website</a>.</p>

<p>Also having a look at <a href="http://www.jasso.go.jp/en/study_j/scholarships/brochure.html">JASSO scholarships</a>. Found some great scholarships <a href="http://www.jasso.go.jp/en/study_j/scholarships/__icsFiles/afieldfile/2016/03/29/scholarshipse_private.pdf">here</a>.</p>

<h3 id="august-2016-7">25 August 2016</h3>

<p>Found some scholarships. Also, I can also enrol as a <a href="http://www.titech.ac.jp/english/graduate_school/international/research_students/privately_funded.html">privately funded research student</a> at Tokyo Tech.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Thoughts on Bass Tone]]></title>
    <link href="http://v0dro.github.io/blog/2016/07/12/random-thoughts-on-bass-tone/"/>
    <updated>2016-07-12T16:39:06+05:30</updated>
    <id>http://v0dro.github.io/blog/2016/07/12/random-thoughts-on-bass-tone</id>
    <content type="html"><![CDATA[<p>This post is about my learnings about bass tone. I’m currently using the following rig:</p>

<ul>
  <li>Laney RB2 amplifier</li>
  <li>Tech 21 Sansamp Bass Driver Programmable DI</li>
  <li>Fender Mexican Standard Jazz Bass (4 string)</li>
</ul>

<p>I will updating this post as and when I learn something new that I’d like to document or share. Suggestions are welcome. You can email me (see the ‘about’ section) or post a comment below.</p>

<h4 id="july-2016">26 July 2016</h4>

<p>As of now I’m tweaking the sansamp and trying to achieve good tone that will compliment the post/prog rock sound of my band <a href="">Cat Kamikazee</a>. I’m also reading up on different terminologies and use cases on the internet. For instance I found <a href="http://www.premierguitar.com/articles/solving-the-bass-di-dilemma-1">this explanation</a> on DI boxes quite useful. For instance I learned that the ‘XLR Out Pad’ button on the sansamp actually provides a 20 db cut to the soundboard if your signal is too hot.</p>

<p>I am trying to couple the sansamp with a basic overdrive pedal I picked up from a friend. <a href="https://www.talkbass.com/threads/sansamp-bddi-pedal-placement.843750/">This thread on talkbass</a> is pretty useful for that. The guy who answered the question states that it’s better to place the sansamp last in the chain so that the DI can deliver the output of the sound chain.</p>

<p>So the BLEND knob on the sansamp modulates how much of the dry signal is mixed with the sansamp tube amplifier emulation circutry. Can be useful when chaining effects pedals with the sansamp by reducing the blend and letting more of the dry signal pass through. Btw the <em>bass</em>, <em>treble</em> and <em>level</em> controls remain active irrespective of the position of BLEND.</p>

<p>One thing that was a little confusing was the whole thing about ‘harmonic partials’. I found a pretty informative thread about the same on <a href="https://www.talkbass.com/threads/what-are-upper-harmonics-or-harmonic-partials.471553/">this TalkBass thread</a>.</p>

<p><a href="http://www.studybass.com/gear/bass-effects/bass-compressor-settings/">Here’s</a> an interesting piece on compressors.</p>

<p>Some more useful links I came across over the course of the past few days:</p>

<ul>
  <li>https://theproaudiofiles.com/amp-overdrive-vs-pedal-overdrive/</li>
  <li>http://www.offbeatband.com/2009/08/the-difference-between-gain-volume-level-and-loudness/</li>
</ul>

<h4 id="july-2016-1">28 July 2016</h4>

<p>Found an interesting and informative piece on bass pedals <a href="http://www.premierguitar.com/articles/Bass_Pedals_Basic_to_Playhouse">here</a>. It’s a good walkthrough of different pedal types and their functionality and purpose.</p>

<p>I wanted to check out some overdrive pedals today but was soon sinking in a sea of terminologies. One thing that intrigued me is the difference between an overdrive, distortion and fuzz. I found a <a href="http://www.gibson.com/News-Lifestyle/Features/en-us/effects-explained-overdrive-di.aspx">pretty informative article</a> on this topic. The author has the following to say about these 3 different but seemingly similar things.</p>

<p>I had a look at the Darkglass b3k and b7k pedals too. They look like promising overdrive pedals. I’ll explore the b3k more since the only difference between the 3 and the 7 is that the 7 also functions as a DI box and has an EQ, while the 3 doesn’t. I already have a DI with a 2 band EQ in the sansamp.</p>

<h4 id="july-2016-2">29 July 2016</h4>

<p>One thing that I noticed when tweaking my sansamp is the level of ‘distortion’ in my tone varies a LOT when you change the bass or treble keeping the drive at the same level. Why does this happen?</p>

<h4 id="august-2016">2 August 2016</h4>

<p>Trying to dive further into distortion today. Found <a href="http://www.tyquinn.com/2009/lead-tone-part-3-distortion/">this</a> article kind of useful. It relates mostly to lead guitar tones, but I think it applies in a general case too. I learned about symmetric and asymmetric clipping in that article. </p>

<p>According to the article, symmetric clipping is more focused and clear, because it is only generating one set of harmonic overtones. Since asymmetric clipping can be hard-clipped on one side, and soft-clipped on the other, it has the potential to create very thick complex sounds. This means that if you want plenty of overtones, but do not want a lot of gain, asymmetric clipping can be useful. For full-blown distortion symmetric clipping is usually more suitable, since high-gain tones are already very harmonically complex. <em>Typically asymmetric clipping will have a predominant first harmonic, which the symmetric clipping will not</em> (that’s probably why in <a href="https://www.youtube.com/watch?v=pzua3-xZKHM">this</a> video, the SD1 sounds brigther than than the TS-9). High gain distortion tones sound best with most of the distortion coming from the pre-amp, so try to use a fairly neutral pickup or even a slightly ‘bright’ pickup.</p>

<p>The follow up to the above post <a href="http://www.tyquinn.com/2009/lead-tone-part-4-eq-for-distortion-voicing/">talks about EQ in relation with distortion</a>. It has stuff on pre and post EQ distortion and how it can affect the overall tone. If you place the EQ before the distortion, you can actually shape which frequencies will be clipped. However if you place it after the distortion then the EQ will only act for shaping the already distorted tone. Pre-dist EQ is more useful in most cases since it let’s you control the frequencies for clipping.</p>

<p>It also says that humbucking pickups have a mid-boost that is more focused by the lower part of the frequency range. Single coil pickups on the other hand have a mid-boost focused by the upper part of the frequency range. Single coils generally have clearer, more articulate bass end.</p>

<h4 id="august-2016-1">3 August 2016</h4>

<p>Read something about bass DI in <a href="http://www.bestbassgear.com/ebass/gear/electronics/pedals/why-is-di-so-important-to-bass-players.html">this</a> article today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Screencasts in Debian]]></title>
    <link href="http://v0dro.github.io/blog/2016/07/05/making-screencasts-in-debian/"/>
    <updated>2016-07-05T13:07:45+05:30</updated>
    <id>http://v0dro.github.io/blog/2016/07/05/making-screencasts-in-debian</id>
    <content type="html"><![CDATA[<h1 id="overview">Overview</h1>

<p>I thought I’ll try something new by recording screencasts for some of my <a href="https://github.com/v0dro">work on Ruby</a> open source libraries.</p>

<p>This is quite a change for me since I’m primarily focused on the programming and designing side of things. Creating documentation is something I’ve not ventured into a lot except the usual <a href="http://yardoc.org/">YARD markup</a> for Ruby methods and classes.</p>

<p>In this blog post (which I will keep updating as time progresses) I hope to document my efforts in creating screencasts. Mind you this is the first time I’m creating a screencast so if you find any potential improvements in my methods please point them out in the comments.</p>

<h1 id="creating-the-video">Creating the video</h1>

<p>My first ever screencast will be for my <a href="https://github.com/v0dro/benchmark-plot">benchmark-plot</a> gem. For creating the video I’m mainly using two tools - <a href="https://kdenlive.org/">Kdenlive</a> for video editing and <a href="https://launchpad.net/kazam">Kazam</a> for recording screen activity. I initially tried using <a href="http://www.pitivi.org/">Pitivi</a> and <a href="http://www.openshot.org/">OpenShot</a> for video editing, but the former did not seem user friendly and the latter kept crashing on my system. For the desktop recording I first tried using <a href="http://recordmydesktop.sourceforge.net/about.php">RecordMyDesktop</a> but gave up on it since it’s too heavy on resources and recoreded poor quality screencasts with not too many customization options.</p>

<p>For creating informative visuals, I’m using <a href="https://www.libreoffice.org/discover/impress/">LibreOffice Impress</a> so that I can create a slide, take it’s screenshot when in slideshow mode and put in the screencast. However I’ve generally found that using slides does not serve well the content delivery in a screencast and will probably not feature too many slides in future screencasts.</p>

<p><a href="https://www.sublimetext.com/3">Sublime Text 3</a> is my primary text editor. I use it’s in built code execution functionality (by pressing <code>Ctrl + Shift + B</code>) to execute a code snippet and display the results immediately.</p>

<h1 id="creating-the-audio">Creating the audio</h1>

<p>I am using Audacity for recording sound. Sadly my mic produces a lot of noise, so for removing that noise in Audacity, I use the inbuilt noise reduction tools.</p>

<p>Noise reduction in Audacity can be achieved by first selecting a small part of the sound that does not contain speech, then go to Effects -&gt; Noise Reduction and click on ‘Get Noise Profile’. Then select the whole sound wave with <code>Ctrl + A</code>. Go to Effects -&gt; Noise Reduction again and click ‘OK’. It should considerably reduce static noise from your sound file.</p>

<p>All files are exported to Ogg Vorbis.</p>

<h1 id="putting-it-all-together">Putting it all together</h1>

<p>I did some research on the screencasting process and found <a href="http://devblog.avdi.org/2013/01/21/my-screencasting-process/">this article</a> by Avdi Grimm and <a href="https://build-podcast.com/setup/">this one</a> by Sayanee Basu extremely helpful.</p>

<p>I first started by writing the transcript along with any code samples that I had to show. I made it a point to describe the code being typed/displayed on the screen since it’s generally more useful to have a voice over explaning the code than having to pause the video and go over it yourself.</p>

<p>Then I recorded the voice over just for the part that featured slides. I imported the screenshots of the slides in kdenlive and adjusted them such that they fit the voice over. Recording the code samples was a bit of a challenge. I started typing out the code and talking about it into the mic. This was more difficult than I thought, almost like playing a Guitar and singing at the same time. I ended up recording the screencast in 4 separate takes, with several retakes for each take.</p>

<p>After importing the screencast with voice over into kdenlive and separating the audio and video components, I did some cuts to reduce redundancy or imperfections in my VO. Some of the parts of the video where there was a lot of typing had to be sped up by using kdenlive’s Speed tool.</p>

<p>Once this was upto my satisfaction, I exported it to mp4.</p>

<p>The video of my first screencast is now up on YouTube in the video below. Have a look and leave your feedback in the comments!</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/WW6M4Df-soQ" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summary of Work This Summer for GSOC 2015]]></title>
    <link href="http://v0dro.github.io/blog/2015/08/16/summary-of-work-this-summer-for-gsoc-2015/"/>
    <updated>2015-08-16T13:38:51+05:30</updated>
    <id>http://v0dro.github.io/blog/2015/08/16/summary-of-work-this-summer-for-gsoc-2015</id>
    <content type="html"><![CDATA[<p>Over this summer as a part of <a href="www.google-melange.com">Google Summer of Code 2015</a>, <a href="www.github.com/v0dro/daru/">daru</a> received a lot of upgrades and new features which have made a pretty robust tool for data analysis in pure ruby. Of course, a lot of work still remains for bringing daru at par with the other data analysis solutions on offer today, but I feel the work done this summer has put daru on that path.</p>

<p>The new features led to the inclusion of daru in many of SciRuby’s gems, which use daru’s data storage, access and indexing features for storing and carrying around data. <a href="https://github.com/SciRuby/statsample">Statsample</a>, <a href="https://github.com/SciRuby/statsample-glm">statsample-glm</a>, <a href="https://github.com/SciRuby/statsample-timeseries">statsample-timeseries</a>, <a href="https://github.com/SciRuby/statsample-bivariate-extension">statsample-bivariate-extensions</a> are all now compatible with daru and use Vector and DataFrame as their primary data structures. Daru’s <a href="http://nbviewer.ipython.org/github/SciRuby/sciruby-notebooks/blob/master/Visualization/Visualizing%20data%20with%20daru%20DataFrame.ipynb">plotting functionality</a>, that interfaced with <a href="https://github.com/domitry/nyaplot">nyaplot</a> for creating interactive plots directly from the data was also significantly overhauled.</p>

<p>Also, new gems developed by other GSOC students, notably <a href="https://github.com/dilcom/gnuplotrb">Ivan’s GnuplotRB gem</a> and <a href="https://github.com/agisga/mixed_models">Alexej’s mixed_models gem</a> both accept data from daru data structures. Do see their repo pages for seeing interesting ways of using daru.</p>

<p>The work on daru is also proving to be quite useful for other people, which led a talk/presentation at <a href="http://www.deccanrubyconf.org/">DeccanRubyConf 2015</a>, which is one of the three major ruby conferences in India. You can see the slides and notebooks presented at the talk <a href="https://github.com/v0dro/talks/tree/master/DeccanRubyConf15">here</a>. Given the current interest in data analysis and the need for a viable solution in ruby, I plan to take daru much further. Keep watching the repo for interesting updates :)</p>

<p>In the rest of this post I’ll elaborate on all the work done this summer.</p>

<h2 id="pre-mid-term-submissions">Pre-mid term submissions</h2>

<p>Daru as a gem before GSOC was not exactly user friendly. There were many cases, particularly the iterators, that required some thinking before anybody used them. This is against the design philosophy of daru, or even ruby general, where surprising programmers with ubiqtuos constructs is usually frowned down upon by the community. So the first thing that I did mainly concerned overhauling the daru’s many iterators for both <code>Vector</code> and <code>DataFrame</code>.</p>

<p>For example, the <code>#map</code> iterator from <code>Enumerable</code> returns an <code>Array</code> no matter object you call it on. This was not the case before, where <code>#map</code> would a <code>Daru::Vector</code> or <code>Daru::DataFrame</code>. This behaviour was changed, and now <code>#map</code> returns an <code>Array</code>. If you want a <code>Vector</code> or a <code>DataFrame</code> of the modified values, you should call <code>#recode</code> on <code>Vector</code> or <code>DataFrame</code>.</p>

<p>Each of these iterators also accepts an optional argument, <code>:row</code> or <code>:vector</code>, which will define the axis over which iteration is supposed to be carried out. So now there are the <code>#each</code>, <code>#map</code>, <code>#map!</code>, <code>#recode</code>, <code>#recode!</code>, <code>#collect</code>, <code>#collect_matrix</code>, <code>#all?</code>, <code>#any?</code>, <code>#keep_vector_if</code> and <code>#keep_row_if</code>. To iterate over elements along with their respective indexes (or labels), you can likewise use <code>#each_row_with_index</code>, <code>#each_vector_with_index</code>, <code>#map_rows_with_index</code>, <code>#map_vector_with_index</code>, <code>#collect_rows_with_index</code>, <code>#collect_vector_with_index</code> or <code>#each_index</code>. I urge you to go over the docs of each of these methods to utilize the full power of daru.</p>

<p>Apart from this there was also quite a bit of refactoring involved for many methods (courtesy <a href="https://github.com/agisga">Alexej</a>). This has made daru much faster than previous versions.</p>

<p>The next (major) thing to do was making daru compatible with statsample. This was very essential since statsample is very important tool for statistics in ruby and it was using its own <code>Vector</code> and <code>Dataset</code> classes, which weren’t very robust as computation tools and very difficult to use when it came to cleaning or munging data. So I replaced statsample’s Vector and Dataset clases with Daru::Vector and Daru::DataFrame. It involved a significant amount of work on both statsample and daru. Statsample because many constructs had to changed to make them compatible with daru, and daru because there was a lot of essential functionality in these classes that had to be ported to daru.</p>

<p>Porting code from statsample to daru improved daru significantly. There were a whole of statistics methods in statsample that were imported into daru and you can now use all them from daru. Statsample also works well with <a href="https://github.com/clbustos/rubyvis">rubyvis</a>, a great tool for visualization. <a href="https://github.com/SciRuby/statsample#visualizations">You can now do that with daru as well</a>.</p>

<p>Many new methods for reading and writing data to and from files were also added to daru. You can now read and write data to and from CSV, Excel, plain text files or even SQL databases.</p>

<p>In effect, daru is now completely compatible with statsample (and all the other statsample extensions). You can use daru data structures for storing data and pass them to statsample for performing computations. The biggest advantage of this approach is that the analysed data can be passed around to other scientific ruby libraries (some of which listed above) that use daru as well. Since daru offers in-built functions to better ‘see’ your data, better visualization is possible.</p>

<p>See these <a href="https://github.com/v0dro/daru#blog-posts">blogs</a> and <a href="https://github.com/v0dro/daru#notebooks">notebooks</a> for a complete overview of daru’s new features.</p>

<p>Also see the <a href="https://github.com/SciRuby/statsample#notebooks">notebooks in the statsample README</a> for using daru with statsample.</p>

<h2 id="post-mid-term-submissions">Post-mid term submissions</h2>

<p>Most of time post the mid term submissions was spent in implementing the time series functions for daru.</p>

<p>I implemented a new index, the DateTimeIndex, which can used for indexing data on time stamps. It enables users to query data based on time stamps. Time stamps can either be specified with precise ruby DateTime objects or can be specified as strings, which will lead to retrival of all the data falling under that time. For example specifying ‘2012’ returns all data that falls in the year 2012. See detailed usage of <code>DateTimeIndex</code> in conjunction with other daru constructs <a href="https://github.com/v0dro/daru/blob/master/README.md">in the daru README</a>.</p>

<p>An essential utility in implementing <code>DateTimeIndex</code> was <code>DateOffset</code>, which is a new set of classes that offsets dates based on certain rules or business logic. It can advance or lag a ruby <code>DateTime</code> to the nearest day or any day of the week or the end or beginning of the month etc. <code>DateOffset</code> is an essential part of <code>DateTimeIndex</code> and can also be used as a standalone utility for advancing/lagging <code>DateTime</code> objects. <a href="http://v0dro.github.io/blog/2015/07/27/date-offsets-in-daru/">This blog post</a> elaborates more on the nuances of <code>DateOffset</code> and its usage.</p>

<p>The last thing done during the post mid term was complete compatibility with <a href="https://github.com/SciRuby/statsample-timeseries">statsample-timeseries</a>, which was created by <a href="https://github.com/AnkurGel">Ankur Goel</a> during GSOC 2013. It offers many uesful functions for analysis of time series data. It now works with daru containers. See some use cases <a href="https://github.com/SciRuby/statsample-timeseries/blob/master/README.rdoc">here</a>.</p>

<p>Thats all, as far as I can remember.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elaboration on Certain Internals of Daru]]></title>
    <link href="http://v0dro.github.io/blog/2015/08/16/elaboration-on-certain-internals-of-daru/"/>
    <updated>2015-08-16T13:36:34+05:30</updated>
    <id>http://v0dro.github.io/blog/2015/08/16/elaboration-on-certain-internals-of-daru</id>
    <content type="html"><![CDATA[<p>In this blog post I will elaborate on how a few of the features in <a href="https://github.com/v0dro/daru">daru</a> were implemeted. Notably I will stress on what spurred a need for that particular design of the code.</p>

<p>This post is primarily intended to serve as documentation for me and future contributors. If readers have any inputs on improving this post, I’d be happy to accept new contributions :)</p>

<h2 id="index-factory-architecture">Index factory architecture</h2>

<p>Daru currently supports three types of indexes, Index, MultiIndex and DateTimeIndex.</p>

<p>It became very tedious to write if statements in the Vector or DataFrame codebase whenever a new data structure was to be created, since there were 3 possible indexes that could be attached with every data set. This mainly depended on what kind of data was present in the index, i.e. tuples would create a MultiIndex, DateTime objects or date-like strings would create a DateTimeIndex, and everything else would create a Daru::Index.</p>

<p>This looked something like the perfect use case for the <a href="https://en.wikipedia.org/wiki/Factory_method_pattern">factory pattern</a>, the only hurdle being that the factory pattern in the pure sense of the term would be a superclass, something called <code>Daru::IndexFactory</code> that created an Index, DateTimeIndex or MultiIndex index using some methods and logic. The problem is that I did not want to call a separate class for creating Indexes. This would break existing code and possibly cause problems in libraries that were already using daru (viz. <a href="https://github.com/SciRuby/statsample">statsample</a>), not to mention confusing users about which class they’re actually supposed to be using.</p>

<p>The solution came after I read <a href="http://blog.sidu.in/2007/12/rubys-new-as-factory.html">this blog post</a>, which demonstrates that the <code>.new</code> method for any class can be overridden. Thus, instead of calling <code>initialize</code> for creating the instance of a class, it calls the overridden <code>new</code>, which can then call initialize for instantiating an instance of that class. It so happens that you can make <code>new</code> return any object you want, unlike initialize which must an instance of the class it is declared in. Thus, for the factory pattern implementation of Daru::Index, we over-ride the <code>.new</code> method of the Daru::Index and write logic such that it manufactures the appropriate kind of index based on the data that is passed to <code>Daru::Index.new(data)</code>. The pseudo code for doing this looks something like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Daru</span><span class="o">::</span><span class="no">Index</span>
</span><span class="line">  <span class="c1"># some stuff...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">new</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
</span><span class="line">    <span class="n">source</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">source_looks_like_a_multi_index</span>
</span><span class="line">      <span class="n">create_multi_index_and_return</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">source_looks_like_date_time_index</span>
</span><span class="line">      <span class="n">create_date_time_index_and_return</span>
</span><span class="line">    <span class="k">else</span> <span class="c1"># Create the Daru::Index by calling initialize</span>
</span><span class="line">      <span class="n">i</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">allocate</span>
</span><span class="line">      <span class="n">i</span><span class="o">.</span><span class="n">send</span> <span class="ss">:initialize</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
</span><span class="line">      <span class="n">i</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># more stuff...</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Also, since over-riding <code>.new</code> tampers with the subclasses of the class as well, <a href="https://github.com/v0dro/daru/blob/master/lib/daru/index.rb#L14">an <code>inherited</code> hook that replaces the over-ridden <code>.new</code></a> of the inherited class with the original one was added to <code>Daru::Index</code>.</p>

<h2 id="working-of-the-where-clause">Working of the where clause</h2>

<p>The where clause in daru lets users query data with a Array containing boolean variables. So whenever you call <code>where</code> on Daru::Vector or DataFrame, and pass in an Array containing true or false values, all the rows corresponding with <code>true</code> will be returned as a Vector or DataFrame respectively.</p>

<p>Since the where clause works in cojunction with the comparator methods of Daru::Vector (which return a Boolean Array), it was essential for these boolean arrays to be combined together such that piecewise AND and OR operations could be performed between multiple boolean arrays. Hence, the <code>Daru::Core::Query::BoolArray</code> class was created, which is specialized for handling boolean arrays and performing piecewise boolean operations.</p>

<p>The BoolArray defines the <code>#&amp;</code> method for piecewise AND operations and it defines the <code>#|</code> method for piecewise OR operations. They work as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">Query</span><span class="o">::</span><span class="no">BoolArray</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="kp">true</span><span class="p">,</span><span class="kp">false</span><span class="p">,</span><span class="kp">false</span><span class="p">,</span><span class="kp">true</span><span class="p">,</span><span class="kp">false</span><span class="p">,</span><span class="kp">true</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="c1">#=&gt; (Daru::Core::Query::BoolArray:84314110 bool_arry=[true, false, false, true, false, true])</span>
</span><span class="line"><span class="n">b</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">Query</span><span class="o">::</span><span class="no">BoolArray</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="kp">false</span><span class="p">,</span><span class="kp">true</span><span class="p">,</span><span class="kp">false</span><span class="p">,</span><span class="kp">true</span><span class="p">,</span><span class="kp">false</span><span class="p">,</span><span class="kp">true</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="c1">#=&gt; (Daru::Core::Query::BoolArray:84143650 bool_arry=[false, true, false, true, false, true])</span>
</span><span class="line"><span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span>
</span><span class="line"><span class="c1">#=&gt; (Daru::Core::Query::BoolArray:83917880 bool_arry=[false, false, false, true, false, true])</span>
</span><span class="line"><span class="n">a</span> <span class="o">|</span> <span class="n">b</span>
</span><span class="line"><span class="c1">#=&gt; (Daru::Core::Query::BoolArray:83871560 bool_arry=[true, true, false, true, false, true])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding and Combining Data in Daru]]></title>
    <link href="http://v0dro.github.io/blog/2015/08/03/finding-and-combining-data-in-daru/"/>
    <updated>2015-08-03T00:22:19+05:30</updated>
    <id>http://v0dro.github.io/blog/2015/08/03/finding-and-combining-data-in-daru</id>
    <content type="html"><![CDATA[<h2 id="arel-like-query-syntax">Arel-like query syntax</h2>

<p><a href="https://github.com/rails/arel">Arel</a> is a very popular ruby gem that is one of the major components of the most popular ruby framework, <a href="https://github.com/rails/rails">Rails</a>. It is an ORM-helper of sorts that exposes a beatiful and intuitive syntax for creating SQL strings by chaining Ruby methods.</p>

<p>Daru successfully adopts this syntax and the result is a very intuitive and readable syntax for obtaining any sort of data from a DataFrame or Vector.</p>

<p>As a quick demonstration, lets create a DataFrame which looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span>
</span><span class="line">  <span class="ss">a</span><span class="p">:</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="o">]*</span><span class="mi">100</span><span class="p">,</span>
</span><span class="line">  <span class="ss">b</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">,</span><span class="s1">&#39;d&#39;</span><span class="p">,</span><span class="s1">&#39;e&#39;</span><span class="p">,</span><span class="s1">&#39;f&#39;</span><span class="o">]*</span><span class="mi">100</span><span class="p">,</span>
</span><span class="line">  <span class="ss">c</span><span class="p">:</span> <span class="o">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">66</span><span class="o">]*</span><span class="mi">100</span>
</span><span class="line"><span class="p">},</span> <span class="ss">index</span><span class="p">:</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">600</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">shuffle</span><span class="p">)</span>
</span><span class="line"><span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">#=&gt; </span>
</span><span class="line"><span class="c1">##&lt;Daru::DataFrame:80543480 @name = 3fc642f2-bd9a-4f6f-b4a8-0779253720f5 @size = 5&gt;</span>
</span><span class="line"><span class="c1">#                    a          b          c </span>
</span><span class="line"><span class="c1">#       109          1          a         11 </span>
</span><span class="line"><span class="c1">#       381          2          b         22 </span>
</span><span class="line"><span class="c1">#       598          3          c         33 </span>
</span><span class="line"><span class="c1">#       390          4          d         44 </span>
</span><span class="line"><span class="c1">#       344          5          e         55</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To select all rows where <code>df[:a]</code> equals 2 or <code>df[:c]</code> equals 55, just write this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">selected</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">df</span><span class="o">[</span><span class="ss">:a</span><span class="o">].</span><span class="n">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">|</span> <span class="n">df</span><span class="o">[</span><span class="ss">:c</span><span class="o">].</span><span class="n">eq</span><span class="p">(</span><span class="mi">55</span><span class="p">))</span>
</span><span class="line"><span class="n">selected</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># =&gt; </span>
</span><span class="line"><span class="c1">##&lt;Daru::DataFrame:79941980 @name = 74175f76-9dce-4b5d-b85b-bdfbb650953e @size = 5&gt;</span>
</span><span class="line"><span class="c1">#                    a          b          c </span>
</span><span class="line"><span class="c1">#       381          2          b         22 </span>
</span><span class="line"><span class="c1">#       344          5          e         55 </span>
</span><span class="line"><span class="c1">#       135          2          b         22 </span>
</span><span class="line"><span class="c1">#       524          5          e         55 </span>
</span><span class="line"><span class="c1">#       266          2          b         22 </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As is easily seen above, the Daru::Vector class has special comparators defined on it, which allow it to check each value of the Vector and return an object that can be evaluated by the <code>DataFrame#where</code> method.</p>

<p><strong>Notice that to club the two comparators above, we have used the union OR (<code>|</code>) operator.</strong></p>

<p>Daru::Vector has a bunch of comparator methods defined on it, which can be used with <code>#where</code> for obtaining the desired results. All of these return an object of type <code>Daru::Core::Query::BoolArray</code>, which is read by <code>#where</code>. <code>BoolArray</code> uses the methods <code>|</code> (also aliased as <code>#or</code>) and <code>&amp;</code> (also aliased as <code>#and</code>) for piecewise logical operations on other <code>BoolArray</code> objects.</p>

<p>BoolArray consists of an internal Array that contains <code>true</code> for every entry in the Vector that returns <code>true</code> for an operation between the comparable operand and a Vector entry.</p>

<p>For example,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">vector</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="n">vector</span><span class="o">.</span><span class="n">eq</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="c1">#=&gt;(Daru::Core::Query::BoolArray:82379030 bool_arry=[false, false, true, false, false, false, false, false, false, true])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>#&amp;</code> (or <code>#and</code>) and <code>#|</code> (or  <code>#or</code>) methods on BoolArray apply a logical <code>and</code> and a logical <code>or</code> respectively between each element of the BoolArray and return another BoolArray that contains the results. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">vector</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="n">vector</span><span class="o">.</span><span class="n">eq</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">or</span><span class="p">(</span><span class="n">vector</span><span class="o">.</span><span class="n">mt</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
</span><span class="line"><span class="c1">#=&gt; (Daru::Core::Query::BoolArray:82294620 bool_arry=[false, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true]) </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The following comparators can be used with a <code>Daru::Vector</code>:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Comparator Method</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><code>eq</code></td>
      <td style="text-align: left">Uses <code>==</code> and returns <code>true</code> for each <strong>equal</strong> entry</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>not_eq</code></td>
      <td style="text-align: left">Uses <code>!=</code> and returns <code>true</code> for each <strong>unequal</strong> entry</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>lt</code></td>
      <td style="text-align: left">Uses <code>&lt;</code> and returns <code>true</code> for each entry <strong>less than</strong> the supplied object</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>lteq</code></td>
      <td style="text-align: left">Uses <code>&lt;=</code> and returns <code>true</code> for each entry <strong>less than or equal to</strong> the supplied object</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>mt</code></td>
      <td style="text-align: left">Uses <code>&gt;</code> and returns <code>true</code> for each entry <strong>more than</strong> the supplied object</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>mteq</code></td>
      <td style="text-align: left">Uses <code>&gt;=</code> and returns <code>true</code> for each entry <strong>more than or equal to</strong> the supplied object</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>in</code></td>
      <td style="text-align: left">Uses <code>==</code> for each element in the collection (Array, Daru::Vector, etc.) passed and returns <code>true</code> for a match</td>
    </tr>
  </tbody>
</table>

<p>A major advantage of using the <code>#where</code> clause over <code>DataFrame#filter</code> or <code>Vector#keep_if</code>, apart from better readability and usability, is that it is much faster. <a href="https://github.com/v0dro/daru/blob/master/benchmarks/where_vs_filter.rb">These benchmarks</a> prove my point.</p>

<p>I’ll conclude this chapter with a little more complex example of using the arel-like query syntax with a <code>Daru::Vector</code> object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">vec</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">336</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">346</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">26</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">345</span><span class="p">,</span><span class="mi">2525</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="n">vec</span><span class="o">.</span><span class="n">where</span><span class="p">((</span><span class="n">vec</span><span class="o">.</span><span class="n">eq</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="o">|</span> <span class="n">vec</span><span class="o">.</span><span class="n">eq</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="n">vec</span><span class="o">.</span><span class="n">mt</span><span class="p">(</span><span class="mi">300</span><span class="p">))</span> <span class="o">&amp;</span> <span class="n">vec</span><span class="o">.</span><span class="n">lt</span><span class="p">(</span><span class="mi">2000</span><span class="p">))</span>
</span><span class="line"><span class="c1"># =&gt; </span>
</span><span class="line"><span class="c1"># #&lt;Daru::Vector:70585830 @name = nil @size = 5 &gt;</span>
</span><span class="line"><span class="c1">#     nil</span>
</span><span class="line"><span class="c1">#   0   1</span>
</span><span class="line"><span class="c1">#   3   4</span>
</span><span class="line"><span class="c1">#   7 336</span>
</span><span class="line"><span class="c1">#  14 346</span>
</span><span class="line"><span class="c1">#  21 345</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For more examples on using the arel-like query syntax, see <a href="">this notebook</a>.
## Joins</p>

<p>Daru::DataFrame offers the <code>#join</code> method for performing SQL style joins between two DataFrames. Currently #join supports inner, left outer, right outer and full outer joins between DataFrames.</p>

<p>In order to demonstrate joins, lets consider a single example of an inner on two DataFrames:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">left</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span>
</span><span class="line">  <span class="ss">:id</span>   <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Pirate&#39;</span><span class="p">,</span> <span class="s1">&#39;Monkey&#39;</span><span class="p">,</span> <span class="s1">&#39;Ninja&#39;</span><span class="p">,</span> <span class="s1">&#39;Spaghetti&#39;</span><span class="o">]</span>
</span><span class="line"><span class="p">})</span>
</span><span class="line"><span class="n">right</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span>
</span><span class="line">  <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Rutabaga&#39;</span><span class="p">,</span> <span class="s1">&#39;Pirate&#39;</span><span class="p">,</span> <span class="s1">&#39;Darth Vader&#39;</span><span class="p">,</span> <span class="s1">&#39;Ninja&#39;</span><span class="o">]</span>
</span><span class="line"><span class="p">})</span>
</span><span class="line"><span class="n">left</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="ss">on</span><span class="p">:</span> <span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="p">,</span> <span class="ss">how</span><span class="p">:</span> <span class="ss">:inner</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">#=&gt; </span>
</span><span class="line"><span class="c1">##&lt;Daru::DataFrame:73134350 @name = 7cc250a9-108c-4ea3-99ab-dcb828ff2b88 @size = 2&gt;</span>
</span><span class="line"><span class="c1">#                 id_1       name       id_2 </span>
</span><span class="line"><span class="c1">#         0          1     Pirate          2 </span>
</span><span class="line"><span class="c1">#         1          3      Ninja          4 </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For more examples please refer <a href="">this notebook</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analysis of Time Series in Daru]]></title>
    <link href="http://v0dro.github.io/blog/2015/07/31/analysis-of-time-series-in-daru/"/>
    <updated>2015-07-31T18:26:23+05:30</updated>
    <id>http://v0dro.github.io/blog/2015/07/31/analysis-of-time-series-in-daru</id>
    <content type="html"><![CDATA[<p>The newest release of daru brings alongwith it added support for time series data analysis, manipulation and visualization.</p>

<p>A time series is any data is indexed (or labelled) by time. This includes the stock market index, prices of crude oil or precious metals, or even geo-locations over a period of time.</p>

<p>The primary manner in which daru implements a time series is by indexing data objects (i.e Daru::Vector or Daru::DataFrame) on a new index called the DateTimeIndex. A DateTimeIndex consists of dates, which can queried individually or sliced.</p>

<h2 id="introduction">Introduction</h2>

<p>A very basic time series can be created with something like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;distribution&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">rng</span> <span class="o">=</span> <span class="no">Distribution</span><span class="o">::</span><span class="no">Normal</span><span class="o">.</span><span class="n">rng</span>
</span><span class="line">
</span><span class="line"><span class="n">index</span>  <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DateTimeIndex</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="ss">:start</span> <span class="o">=&gt;</span> <span class="s1">&#39;2012-4-2&#39;</span><span class="p">,</span> <span class="ss">:periods</span> <span class="o">=&gt;</span> <span class="mi">1000</span><span class="p">,</span> <span class="ss">:freq</span> <span class="o">=&gt;</span> <span class="s1">&#39;D&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">vector</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1000</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="n">rng</span><span class="o">.</span><span class="n">call</span><span class="p">},</span> <span class="ss">index</span><span class="p">:</span> <span class="n">index</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img class="center" src="http://v0dro.github.io/images/daru_time_series/simple_vector.png" title="'A Simple Vector indexed on DateTimeIndex'" /></p>

<p>In the above code, the <code>DateTimeIndex.date_range</code> function is creating a <code>DateTimeIndex</code> starting from a particular date and spanning for 1000 periods, with a frequency of 1 day between period. For a complete coverage of DateTimeIndex see <a href="">this</a> notebook. For an introduction to the date offsets used by daru see <a href="http://v0dro.github.io/blog/2015/07/27/date-offsets-in-daru/">this blog post</a>.</p>

<p>The index is passed into the Vector like a normal <code>Daru::Index</code> object.</p>

<h2 id="statistics-functions-and-plotting-for-time-series">Statistics functions and plotting for time series</h2>

<p>Many functions are avaiable in daru for computing useful statistics and analysis. A brief of summary of statistics methods available on time series is as follows:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>Method Name</strong></th>
      <th style="text-align: center"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><code>rolling_mean</code></td>
      <td style="text-align: center">Calculate Moving Average</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_median</code></td>
      <td style="text-align: center">Calculate Moving Median</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_std</code></td>
      <td style="text-align: center">Calculate Moving Standard Deviation</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_variance</code></td>
      <td style="text-align: center">Calculate Moving Variance</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_max</code></td>
      <td style="text-align: center">Calculate Moving Maximum value</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_min</code></td>
      <td style="text-align: center">Calcuclate moving minimum value</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_count</code></td>
      <td style="text-align: center">Calculate moving non-missing values</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_sum</code></td>
      <td style="text-align: center">Calculate moving sum</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>ema</code></td>
      <td style="text-align: center">Calculate exponential moving average</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>macd</code></td>
      <td style="text-align: center">Moving Average Convergence-Divergence</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>acf</code></td>
      <td style="text-align: center">Calculate Autocorrelation Co-efficients of the Series</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>acvf</code></td>
      <td style="text-align: center">Provide the auto-covariance value</td>
    </tr>
  </tbody>
</table>

<p>To demonstrate, the rolling mean of a Daru::Vector can be computed as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;distribution&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">rng</span>    <span class="o">=</span> <span class="no">Distribution</span><span class="o">::</span><span class="no">Normal</span><span class="o">.</span><span class="n">rng</span>
</span><span class="line"><span class="n">vector</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class="line">  <span class="mi">1000</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">rng</span><span class="o">.</span><span class="n">call</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">index</span><span class="p">:</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DateTimeIndex</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span>
</span><span class="line">    <span class="ss">:start</span> <span class="o">=&gt;</span> <span class="s1">&#39;2012-4-2&#39;</span><span class="p">,</span> <span class="ss">:periods</span> <span class="o">=&gt;</span> <span class="mi">1000</span><span class="p">,</span> <span class="ss">:freq</span> <span class="o">=&gt;</span> <span class="s1">&#39;D&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line"><span class="c1"># Compute the cumulative sum</span>
</span><span class="line"><span class="n">vector</span> <span class="o">=</span> <span class="n">vector</span><span class="o">.</span><span class="n">cumsum</span>
</span><span class="line"><span class="n">rolling</span> <span class="o">=</span> <span class="n">vector</span><span class="o">.</span><span class="n">rolling_mean</span> <span class="mi">60</span>
</span><span class="line">
</span><span class="line"><span class="n">rolling</span><span class="o">.</span><span class="n">tail</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img class="center" src="http://v0dro.github.io/images/daru_time_series/rolling_mean.png" title="'Rolling Mean Tail'" /></p>

<p>This time series can be very easily plotted with its rolling mean by using the <a href="https://github.com/dilcom/gnuplotrb">GnuplotRB</a> gem:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;gnuplotrb&#39;</span>
</span><span class="line">
</span><span class="line"><span class="no">GnuplotRB</span><span class="o">::</span><span class="no">Plot</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class="line">  <span class="o">[</span><span class="n">vector</span> <span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s1">&#39;lines&#39;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Vector&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="n">rolling</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s1">&#39;lines&#39;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Rolling Mean&#39;</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://v0dro.github.io/images/daru_time_series/cumsum_rolling_line_graph.png" title="'Line Graph of Rolling mean and cumsum'" /></p>

<p>These methods are also available on DataFrame, which results in calling them on each of numeric vectors:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;distribution&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">rng</span>    <span class="o">=</span> <span class="no">Distribution</span><span class="o">::</span><span class="no">Normal</span><span class="o">.</span><span class="n">rng</span>
</span><span class="line"><span class="n">index</span>  <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DateTimeIndex</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="ss">:start</span> <span class="o">=&gt;</span> <span class="s1">&#39;2012-4-2&#39;</span><span class="p">,</span> <span class="ss">:periods</span> <span class="o">=&gt;</span> <span class="mi">1000</span><span class="p">,</span> <span class="ss">:freq</span> <span class="o">=&gt;</span> <span class="s1">&#39;D&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span>
</span><span class="line">  <span class="ss">a</span><span class="p">:</span> <span class="mi">1000</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">rng</span><span class="o">.</span><span class="n">call</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">b</span><span class="p">:</span> <span class="mi">1000</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">rng</span><span class="o">.</span><span class="n">call</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">c</span><span class="p">:</span> <span class="mi">1000</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">rng</span><span class="o">.</span><span class="n">call</span> <span class="p">}</span>
</span><span class="line"><span class="p">},</span> <span class="ss">index</span><span class="p">:</span> <span class="n">index</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img class="center" src="http://v0dro.github.io/images/daru_time_series/dataframe.png" title="'DateTime indexed DataFrame'" /></p>

<p>In a manner similar to that done with Vectors above, we can easily plot each Vector of the DataFrame with GNU plot:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;gnuplotrb&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Calculate cumulative sum of each Vector</span>
</span><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">cumsum</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Compute rolling sum of each Vector with a loopback length of 60.</span>
</span><span class="line"><span class="n">r_sum</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">rolling_sum</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">plots</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line"><span class="n">r_sum</span><span class="o">.</span><span class="n">each_vector_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">vec</span><span class="p">,</span><span class="n">n</span><span class="o">|</span>
</span><span class="line">  <span class="n">plots</span> <span class="o">&lt;&lt;</span> <span class="no">GnuplotRB</span><span class="o">::</span><span class="no">Plot</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="n">vec</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s1">&#39;lines&#39;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="n">n</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="no">GnuplotRB</span><span class="o">::</span><span class="no">Multiplot</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">plots</span><span class="p">,</span> <span class="ss">layout</span><span class="p">:</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Rolling sums&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img class="center" src="http://v0dro.github.io/images/daru_time_series/dataframe_plot.png" title="'Plotting the DataFrame'" /></p>

<h2 id="usage-with-statsample-timeseries">Usage with statsample-timeseries</h2>

<p>Daru now integrates with <a href="https://github.com/SciRuby/statsample-timeseries">statsample-timeseries</a>, a <a href="https://github.com/sciruby/statsample">statsample</a> extension that provides many useful statistical analysis tools commonly applied to time series.</p>

<p>Some examples with working examples of daru and statsample-timseries are coming soon. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Date Offsets in Daru]]></title>
    <link href="http://v0dro.github.io/blog/2015/07/27/date-offsets-in-daru/"/>
    <updated>2015-07-27T13:21:42+05:30</updated>
    <id>http://v0dro.github.io/blog/2015/07/27/date-offsets-in-daru</id>
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Daru’s (Data Analysis in RUby) latest release (0.2.0) brings in a host of new features, most important among them being time series manipulation functionality. In this post, we will go over the date offsets that daru offers, which can be used for creating date indexes of specific intervals. The offsets offer a host of options for easy creation of different intervals and even work with standalone DateTime objects to increase or decrease time.</p>

<h2 id="offset-classes-and-behaviour">Offset classes and behaviour</h2>

<p>The date offsets are contained in the <code>Daru::Offsets</code> sub-module. A number of classes are offered, each of which implements business logic for advancing or retracting date times by a specific interval.</p>

<p>To demonstrate with a quick example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">offset</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Offsets</span><span class="o">::</span><span class="no">Hour</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">offset</span> <span class="o">+</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line"><span class="c1">#=&gt; #&lt;DateTime: 2012-04-05T05:00:00+00:00 ((2456023j,18000s,0n),+0s,2299161j)&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see in the above example, an hour was added to the time specified by DateTime and returned. All the offset classes work in a similar manner. Following offset classes are available to users:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>Offset Class</strong></th>
      <th style="text-align: center"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Daru::DateOffset</td>
      <td style="text-align: center">Generic offset class</td>
    </tr>
    <tr>
      <td style="text-align: center">Second</td>
      <td style="text-align: center">One Second</td>
    </tr>
    <tr>
      <td style="text-align: center">Minute</td>
      <td style="text-align: center">One Minute</td>
    </tr>
    <tr>
      <td style="text-align: center">Hour</td>
      <td style="text-align: center">One Hour</td>
    </tr>
    <tr>
      <td style="text-align: center">Day</td>
      <td style="text-align: center">One Day</td>
    </tr>
    <tr>
      <td style="text-align: center">Week</td>
      <td style="text-align: center">One Week. Can be anchored on any week of the day.</td>
    </tr>
    <tr>
      <td style="text-align: center">Month</td>
      <td style="text-align: center">One Month.</td>
    </tr>
    <tr>
      <td style="text-align: center">MonthBegin</td>
      <td style="text-align: center">Calendar Month Begin.</td>
    </tr>
    <tr>
      <td style="text-align: center">MonthEnd</td>
      <td style="text-align: center">Calendar Month End.</td>
    </tr>
    <tr>
      <td style="text-align: center">Year</td>
      <td style="text-align: center">One Year.</td>
    </tr>
    <tr>
      <td style="text-align: center">YearBegin</td>
      <td style="text-align: center">Calendar Year Begin.</td>
    </tr>
    <tr>
      <td style="text-align: center">YearEnd</td>
      <td style="text-align: center">Calendar Year End.</td>
    </tr>
  </tbody>
</table>

<p>The generic Daru::DateOffset class is used for creating a generic offset by passing the number of intervals you want as the value for a key that describes the type of interval. For example to create an offset of 3 days, you pass the option <code>days: 3</code> into the Daru::Offset constructor.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">offset</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DateOffset</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">days</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="n">offset</span> <span class="o">+</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="c1">#=&gt; #&lt;DateTime: 2012-04-08T02:00:00+00:00 ((2456026j,7200s,0n),+0s,2299161j)&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On a similar note, the DateOffset class constructor can accept the options <code>:secs</code>, <code>:mins</code>,<code>:hours</code>, <code>:days</code>, <code>:weeks</code>, <code>:months</code> or <code>:years</code>. Optionally, specifying the <code>:n</code> option will tell DateOffset to apply a particular offset more than once. To elaborate:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">offset</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DateOffset</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">months</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">n</span><span class="p">:</span> <span class="mi">4</span><span class="p">)</span>
</span><span class="line"><span class="n">offset</span> <span class="o">+</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2011</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="c1">#=&gt; #&lt;DateTime: 2012-01-02T00:00:00+00:00 ((2455929j,0s,0n),+0s,2299161j)&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The specialized offset classes like MonthBegin, YearEnd, etc. all reside inside the <code>Daru::Offsets</code> namespace and can be used by simply calling <code>.new</code> on them. All accept an optional Integer argument that works like the <code>:n</code> option for Daru::DateOffset, i.e it applies the offset multiple times.</p>

<p>To elaborate, consider the YearEnd offset. This offsets the date to the nearest year end after itself:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">offset</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Offsets</span><span class="o">::</span><span class="no">YearEnd</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">offset</span> <span class="o">+</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="c1">#=&gt; #&lt;DateTime: 2012-12-31T05:02:01+00:00 ((2456293j,18121s,0n),+0s,2299161j)&gt;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Passing an Integer into an Offsets object will apply the offset that many times:</span>
</span><span class="line">
</span><span class="line"><span class="n">offset</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Offsets</span><span class="o">::</span><span class="no">MonthBegin</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="n">offset</span> <span class="o">+</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line"><span class="c1">#=&gt; #&lt;DateTime: 2015-06-01T00:00:00+00:00 ((2457175j,0s,0n),+0s,2299161j)&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Of special note is the <code>Week</code> offset. This offset can be ‘anchored’ to any week of the day that you specify. When this is done, the DateTime that is being offset will be offset to that day of the week.</p>

<p>For example, to anchor the Week offset to a Wednesday, pass ‘3’ as a value to the <code>:weekday</code> option:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">offset</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Offsets</span><span class="o">::</span><span class="no">Week</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">weekday</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="n">date</span>   <span class="o">=</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span>
</span><span class="line"><span class="n">date</span><span class="o">.</span><span class="n">wday</span> <span class="c1">#=&gt; 5</span>
</span><span class="line">
</span><span class="line"><span class="n">o</span> <span class="o">=</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">date</span>
</span><span class="line"><span class="c1">#=&gt; #&lt;DateTime: 2012-01-11T00:00:00+00:00 ((2455938j,0s,0n),+0s,2299161j)&gt;</span>
</span><span class="line"><span class="n">o</span><span class="o">.</span><span class="n">wday</span> <span class="c1">#=&gt; 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Likewise, the Week offset can be anchored on any day of the week, by simplying specifying the <code>:weekday</code> option. Indexing for days of the week starts from 0 for Sunday and goes on 6 for Saturday.</p>

<h2 id="offset-string-aliases">Offset string aliases</h2>

<p>The most obvious use of date offsets is for creating <code>DateTimeIndex</code> objects with a fixed time interval between each date index. To make creation of indexes easy, each of the offset classes have been linked to certain <em>string alaises</em>, which can directly passed to the DateTimeIndex class.</p>

<p>For example, to create a DateTimeIndex of 100 periods with a frequency of 1 hour between each period:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">offset</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DateTimeIndex</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span>
</span><span class="line">  <span class="ss">:start</span> <span class="o">=&gt;</span> <span class="s1">&#39;2015-4-4&#39;</span><span class="p">,</span> <span class="ss">:periods</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span> <span class="ss">:freq</span> <span class="o">=&gt;</span> <span class="s1">&#39;H&#39;</span><span class="p">)</span>
</span><span class="line"><span class="c1">#=&gt; #&lt;DateTimeIndex:86417320 offset=H periods=100 data=[2015-04-04T00:00:00+00:00...2015-04-08T03:00:00+00:00]&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Likewise all of the above listed offsets can be aliased using strings, which can be used for specifying the offset in a DateTimeIndex index. The string aliases of each offset class are as follows:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>Alias String</strong></th>
      <th style="text-align: center"><strong>Offset Class / Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">‘S’</td>
      <td style="text-align: center">Second</td>
    </tr>
    <tr>
      <td style="text-align: center">‘M’</td>
      <td style="text-align: center">Minute</td>
    </tr>
    <tr>
      <td style="text-align: center">‘H’</td>
      <td style="text-align: center">Hour</td>
    </tr>
    <tr>
      <td style="text-align: center">‘D’</td>
      <td style="text-align: center">Days</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W’</td>
      <td style="text-align: center">Default Week. Anchored on SUN.</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-SUN’</td>
      <td style="text-align: center">Week anchored on sunday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-MON’</td>
      <td style="text-align: center">Week anchored on monday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-TUE’</td>
      <td style="text-align: center">Week anchored on tuesday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-WED’</td>
      <td style="text-align: center">Week anchored on wednesday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-THU’</td>
      <td style="text-align: center">Week anchored on thursday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-FRI’</td>
      <td style="text-align: center">Week anchored on friday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-SAT’</td>
      <td style="text-align: center">Week anchored on saturday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘MONTH’</td>
      <td style="text-align: center">Month</td>
    </tr>
    <tr>
      <td style="text-align: center">‘MB’</td>
      <td style="text-align: center">MonthBegin</td>
    </tr>
    <tr>
      <td style="text-align: center">‘ME’</td>
      <td style="text-align: center">MonthEnd</td>
    </tr>
    <tr>
      <td style="text-align: center">‘YEAR’</td>
      <td style="text-align: center">Year</td>
    </tr>
    <tr>
      <td style="text-align: center">‘YB’</td>
      <td style="text-align: center">YearBegin</td>
    </tr>
    <tr>
      <td style="text-align: center">‘YE’</td>
      <td style="text-align: center">YearEnd</td>
    </tr>
  </tbody>
</table>

<p>See this notebook on daru’s time series functions in order to get a good overview of daru’s time series manipulation functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Statsample Work With Rb-gsl and Gsl-nmatrix]]></title>
    <link href="http://v0dro.github.io/blog/2015/05/12/making-statsample-work-with-rb-gsl-and-gsl-nmatrix/"/>
    <updated>2015-05-12T18:23:46+05:30</updated>
    <id>http://v0dro.github.io/blog/2015/05/12/making-statsample-work-with-rb-gsl-and-gsl-nmatrix</id>
    <content type="html"><![CDATA[<p><strong>Note: It so happens that the latest release of rb-gsl does not depend on narray anymore. Hence rb-gsl can be directly used with statsample. However, if you want to use nmatrix with GSL, use gsl-nmatrix.</strong></p>

<p><a href="https://github.com/SciRuby/statsample">Statsample</a> is the most comprehensive statistical computation suite in Ruby as of now.</p>

<p>Previously, it so happened that statsample would depend on <a href="https://github.com/blackwinter/rb-gsl">rb-gsl</a> to speed up a lot of computations. This is great, but the biggest drawback of this approach is that rb-gsl depends on <a href="https://github.com/masa16/narray">narray</a>, which is incompatible with <a href="https://github.com/SciRuby/nmatrix">nmatrix</a> - the numerical storage and linear algebra library from the SciRuby foundation - due to namespace collisions. </p>

<p>NMatrix is used by many current and upcoming ruby scientific gems, most notably <a href="https://github.com/v0dro/daru">daru</a>, <a href="https://github.com/domitry/mikon">mikon</a>, <a href="https://github.com/thisMagpie/fftw">nmatrix-fftw</a>, etc. and the a big hurdle that these gems were facing was that they could not leverage the advanced functionality of rb-gsl or statsample because nmatrix cannot co-exist with narray. On a further note, daru’s <a href="https://github.com/v0dro/daru/blob/master/lib/daru/dataframe.rb">DataFrame</a> and <a href="https://github.com/v0dro/daru/blob/master/lib/daru/vector.rb">Vector</a> data structures are to replace statsample’s <a href="https://github.com/SciRuby/statsample/blob/master/lib/statsample/dataset.rb">Dataset</a> and <a href="https://github.com/SciRuby/statsample/blob/master/lib/statsample/vector.rb">Vector</a>, so that a dedicated library can be used for data storage and munging and statsample can be made to focus on statistical analysis.</p>

<p>The most promising solution to this problem was that rb-gsl must be made to depend on nmatrix instead of narray. This problem was solved by the <a href="https://github.com/v0dro/gsl-nmatrix">gsl-nmatrix</a> gem, which is a port of rb-gsl, but uses nmatrix instead of narray. Gsl-nmatrix also allows conversion of GSL objects to NMatrix and vice versa. Also, latest changes to statsample make it completely independent of GSL, and hence all the methods in statsample are now possible with or without GSL.</p>

<p>To make your installation of statsample work with gsl-nmatrix, follow these instructions:</p>

<ul>
  <li><a href="https://github.com/SciRuby/nmatrix/wiki/Installation">Install nmatrix</a> and clone, build and install the latest gsl-nmatrix from https://github.com/v0dro/gsl-nmatrix</li>
  <li>Clone the latest statsample from https://github.com/SciRuby/statsample</li>
  <li>Open the Gemfile of statsample and add the line <code>gem 'gsl-nmatrix', '~&gt;1.17'</code></li>
  <li>Build statsample using <code>rake gem</code> and install the resulting <code>.gem</code> file with <code>gem install</code>.</li>
</ul>

<p>You should be good able to use statsample with gsl-nmatrix on your system now. To use with rb-gsl, just install rb-gsl from rubygems (<code>gem install rb-gsl</code>) and put <code>gem 'rb-gsl', '~&gt;1.16.0.4'</code> in the Gemfile instead of gsl-nmatrix. This will activate the rb-gsl gem and you can use rb-gsl with statsample.</p>

<p>However please take note that narray and nmatrix cannot co-exist on the same gem list. Therefore, you should have either rb-gsl or gsl-nmatrix installed at a particular time otherwise things will malfunction.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interfacing and Benchmarking High Performance Linear Algebra Libraries With Ruby]]></title>
    <link href="http://v0dro.github.io/blog/2015/03/11/interfacing-and-benchmarking-high-performance-linear-algebra-libraries-with-ruby/"/>
    <updated>2015-03-11T13:35:45+05:30</updated>
    <id>http://v0dro.github.io/blog/2015/03/11/interfacing-and-benchmarking-high-performance-linear-algebra-libraries-with-ruby</id>
    <content type="html"><![CDATA[<p>For my GSOC project, I’m trying to build an extension to NMatrix which will interface with a high performance C library for fast linear algebra calculations. Since one of the major problems affecting the usability and portability of NMatrix is the effort taken for installation (adding/removing dependencies etc.), it is imperative to ship the source of this high performance C library alongwith the ruby gem.</p>

<p>This leaves us with quite a few choices about the library that can be used. The most common and obvious interfaces for performing fast linear algebra calculations are LAPACK and BLAS. Thus the library bundled with the nmatrix extension must expose an interface similar to LAPACK and BLAS. Since ruby running on MRI can only interface with libraries having a C interface, the contenders in this regard are CLAPACK or LAPACKE for a LAPACK in C, and openBLAS or ATLAS for a BLAS interface.</p>

<p>I need to choose an appropriate BLAS and LAPACK interface based on its speed and usability, and to do so, I decided to build some quick ruby interfaces to these libraries and benchmark the <a href="https://software.intel.com/en-us/node/520973"><code>?gesv</code> function</a>  (used for solving <em>n</em> linear equations in <em>n</em> unknowns) present in all LAPACK interfaces, so as to get an idea of what would be the fastest. This would also test the speed of the BLAS implemetation since LAPACK primarily depends on BLAS for actual computations.</p>

<p>To create these benchmarks, <a href="https://github.com/v0dro/scratch/tree/master/ruby_c_exp">I made a couple of simple ruby gems</a> which linked against the binaries of these libraries. All these gems <a href="https://github.com/v0dro/scratch/blob/master/ruby_c_exp/nm_lapacke/lib/nm_lapacke.rb">define a module</a> which contains a method <code>solve_gesv</code>, which calls the C extension that interfaces with the C library. Each library was made in its own little ruby gem so as to nullify any unknown side effects and also to provide more clarity.</p>

<p>To test these libraries against each other, I used the following test code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class="line">
</span><span class="line"><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class="line">  <span class="n">x</span><span class="o">.</span><span class="n">report</span> <span class="k">do</span>
</span><span class="line">    <span class="mi">10000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">      <span class="n">a</span> <span class="o">=</span> <span class="no">NMatrix</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">76</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span>
</span><span class="line">                              <span class="mi">27</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span>
</span><span class="line">                              <span class="mi">18</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">32</span><span class="o">]</span><span class="p">,</span> <span class="ss">dtype</span><span class="p">:</span> <span class="ss">:float64</span><span class="p">)</span>
</span><span class="line">      <span class="n">b</span> <span class="o">=</span> <span class="no">NMatrix</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span>
</span><span class="line">                               <span class="mi">7</span><span class="p">,</span>
</span><span class="line">                              <span class="mi">43</span><span class="o">]</span><span class="p">,</span> <span class="ss">dtype</span><span class="p">:</span> <span class="ss">:float64</span><span class="p">)</span>
</span><span class="line">      <span class="no">NMatrix</span><span class="o">::</span><span class="no">CLAPACK</span><span class="o">.</span><span class="n">solve_gesv</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class="line">      <span class="c1"># The `NMatrix::CLAPACK` is replaced with NMatrix::LAPACKE </span>
</span><span class="line">      <span class="c1"># or NMatrix::LAPACKE_ATLAS as per the underlying binding. Read the</span>
</span><span class="line">      <span class="c1"># source code for more details.</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here I will list the libraries that I used, the functions I interfaced with, the pros and cons of using each of these libraries, and of course the reported benchmarks:</p>

<h3 id="clapack-lapack-with-openblas-blas">CLAPACK (LAPACK) with openBLAS (BLAS)</h3>

<p><a href="http://www.netlib.org/clapack/">CLAPACK</a> is an F2C’d version of the original LAPACK written in FORTRAN. The creators have made some changes by hand because f2c spews out unnecessary code at times, but otherwise its pretty much as fast as the original LAPACK.</p>

<p>To interface with a BLAS implementation, CLAPACK uses a blas wrapper (blaswrap) to generate wrappers to the relevant CBLAS functions exposed by any BLAS implementation. The blaswrap source files and F2C source files are provided with the CLAPACK library.</p>

<p>The BLAS implementation that we’ll be using is <a href="http://www.openblas.net/">openBLAS</a>, which is a very stable and tested BLAS exposing a C interface. It is extremely simple to use and install, and configures itself automatically according to the computer it is being installed upon. It claims to achieve <a href="http://en.wikipedia.org/wiki/GotoBLAS">performance comparable to intel MKL</a>, which is phenomenal.</p>

<p>To compile CLAPACK with openBLAS, do the following:</p>

<ul>
  <li><code>cd</code> to your openBLAS directory and run <code>make NO_LAPACK=1</code>. This will create an openBLAS binary with the object files only for BLAS and CBLAS. LAPACK will not be compiled even though the source is present. This will generate a <code>.a</code> file which has a name that is similar to the processor that your computer uses. Mine was <code>libopenblas_sandybridgep-r0.2.13.a</code>.</li>
  <li>Now rename the openBLAS binary file to <code>libopenblas.a</code> so its easier to type and you lessen your chances of mistakes, and copy to your CLAPACK directory.</li>
  <li><code>cd</code> to your CLAPACK directory and open the <code>make.inc</code> file in your editor. In it, you should find a <code>BLASDIR</code> variable that points to the BLAS files to link against. Change the value of this variable to <code>../../libopenblas.a</code>.</li>
  <li>Now run <code>make f2clib</code> to make F2C library. This is needed for interconversion between C and FORTRAN data types.</li>
  <li>Then run <code>make lapacklib</code> from the CLAPACK root directory to compile CLAPACK against your specified implementation of CBLAS (openBLAS in this case).</li>
  <li>At the end of this process, you should end up with the CLAPACK, F2C and openBLAS binaries in your directory.</li>
</ul>

<p>Since the automation of this compilation process would take time, I copied these binaries to the gem and <a href="">wrote the extconf.rb</a> such that they link with these libraries.</p>

<p>On testing this with a ruby wrapper, the benchmarking code listed above yielded the following results:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">    <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class="line">    <span class="mi">0</span><span class="o">.</span><span class="mi">190000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">190000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">186355</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="lapacke-lapack-compiled-with-openblas-blas">LAPACKE (LAPACK) compiled with openBLAS (BLAS)</h3>

<p><a href="http://www.netlib.org/lapack/lapacke.html">LAPACKE</a> is the ‘official’ C interface to the FORTRAN-written LAPACK. It consists of two levels; a high level C interface for use with C programs and a low level one that talks to the original FORTRAN LAPACK code. This is not just an f2c’d version of LAPACK, and hence the design of this library is such that it is easy to create a bridge between C and FORTRAN. </p>

<p>For example, C has arrays stored in row-major format while FORTRAN had them column-major. To perform any computation, a matrix needs to be transposed to column-major form first and then be re-transposed to row-major form so as to yield correct results. This needs to be done by the programmer when using CLAPACK, but LAPACKE’s higher level interface accepts arguments (<a href="http://www.netlib.org/lapack/lapacke.html#_array_arguments">LAPACKE_ROW_MAJOR or LAPACKE_COL_MAJOR</a>) which specify whether the matrices passed to it are in row major or column major format. Thus extra (often unoptimized code) on part of the programmer for performing the tranposes is avoided.</p>

<p>To build binaries of LAPACKE compiled with openBLAS, just <code>cd</code> to your openBLAS source code directory and run <code>make</code>. This will generate a <code>.a</code> file with the binaries for LAPACKE and CBLAS interface of openBLAS.</p>

<p>LAPACKE benchmarks turn out to be faster mainly due to the absence of <a href="https://github.com/v0dro/scratch/blob/master/ruby_c_exp/nm_clapack/lib/nm_clapack.rb#L7">manual transposing by high-level code written in Ruby</a>  (the <a href="https://github.com/SciRuby/nmatrix/blob/master/lib/nmatrix/nmatrix.rb#L535">NMatrix#transpose</a> function in this case). I think performing the tranposing using openBLAS functions should remedy this problem.</p>

<p>The benchmarks for LAPACKE are:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">    <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class="line">    <span class="mi">0</span><span class="o">.</span><span class="mi">150000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">150000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">147790</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see these are quite faster than CLAPACK with openBLAS, listed above.</p>

<h3 id="clapacklapack-with-atlasblas">CLAPACK(LAPACK) with ATLAS(BLAS)</h3>

<p>This is the combination that is currently in use with nmatrix. It involves installing the <code>libatlas-base-dev</code> package from the Debian repositories. This pacakage will load all the relevant clapack, atlas, blas and cblas binaries into your computer.</p>

<p>The benchmarks turned out to be:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">    <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class="line">    <span class="mi">0</span><span class="o">.</span><span class="mi">130000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">130000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">130056</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is fast. But a big limitation on using this approach is that the CLAPACK library exposed by the <code>libatlas-base-dev</code> is outdated and no longer maintained. To top it all, it does not have all the functions that a LAPACK library is supposed to have.</p>

<h3 id="lapackelapack-with-atlasblas">LAPACKE(LAPACK) with ATLAS(BLAS)</h3>

<p>For this test case I compiled <a href="http://www.netlib.org/lapack/lapacke">LAPACKE (downloaded from netlib)</a> with an ATLAS implementation from the Debian repositories. I then included the generated static libraries in the sample ruby gem and compiled the gem against those.</p>

<p>To do this on your machine:
* Install the package <code>libatlas-base-dev</code> with your package manager. This will install the ATLAS and CBLAS shared objects onto your system.
* <code>cd</code> to the lapack library and in the <code>make.inc</code> file change the <code>BLASLIB = -lblas -lcblas -latlas</code>. Then run <code>make</code>. This will compile LAPACK with ATLAS installed on your system.
* Then <code>cd</code> to the lacpack/lapacke folder and run <code>make</code>.</p>

<p>Again the function chosen was <code>LAPACKE_?gesv</code>. This test should tell us a great deal about the speed differences between openBLAS and ATLAS, since tranposing overheads are handled by LAPACKE and no Ruby code is interfering with the benchmarks.</p>

<p>The benchmarks turned out to be:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">    <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class="line">    <span class="mi">0</span><span class="o">.</span><span class="mi">140000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">140000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">140540</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>As you can see from the benchmarks above, the approach followed by nmatrix currently (CLAPACK with ATLAS) is the fastest, but this approach has certain limitations:</p>

<ul>
  <li>Requires installation of tedious to install dependencies.</li>
  <li>Many pacakages offer the same binaries, causing confusion.</li>
  <li>CLAPACK library is outdated and not maintained any longer.</li>
  <li>ATLAS-CLAPACK does not expose all the functions present in LAPACK.</li>
</ul>

<p>The LAPACKE-openBLAS and the LAPACKE-ATLAS, though a little slower(~10-20 ms), offer a HUGE advantage over CLAPACK-ATLAS, viz. :</p>

<ul>
  <li>LAPACKE is the ‘standard’ C interface to the LAPACK libraries and is actively maintained, with regular release cycles.</li>
  <li>LAPACKE is compatible with intel’s MKL, in case a future need arises.</li>
  <li>LAPACKE bridges the differences between C and FORTRAN with a well thought out interface.</li>
  <li>LAPACKE exposes the entire LAPACK interface.</li>
  <li>openBLAS is trivial to install.</li>
  <li>ATLAS is a little non-trivial to install but is fast.</li>
</ul>

<p>For a further explanation of the differences between these CBLAS, CLAPACK and LAPACKE, read <a href="http://nicolas.limare.net/pro/notes/2014/10/31_cblas_clapack_lapacke/">this</a> blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Analysis in RUby: Part 2]]></title>
    <link href="http://v0dro.github.io/blog/2015/02/24/data-analysis-in-ruby-part-2/"/>
    <updated>2015-02-24T00:19:08+05:30</updated>
    <id>http://v0dro.github.io/blog/2015/02/24/data-analysis-in-ruby-part-2</id>
    <content type="html"><![CDATA[<p>I’ve just released daru version 0.0.5, which brings in a lot of new features and consolidates existing ones. <a href="https://github.com/SciRuby/nmatrix">NMatrix</a> is now well integrated into Daru and all of the operations that can be performed using Arrays as the underlying implementation can be performed using NMatrix as well (except some operations involving missing data).</p>

<p>The new features include extensive support for missing data, hierarchial sorting of data frames and vectors by preserving indexing, ability to group, split and aggregate data with group by, and quickly summarizing data by generating excel-style pivot tables. This release also includes new aritmetic and statistical functions on Data Frames and Vectors. Both DataFrame and Vector are now mostly compatible with <a href="https://github.com/clbustos/statsample">statsample</a>, allowing for a much larger scope of statistical analysis by leveraging the methods already provided in statsample.</p>

<p>The interface for interacting with nyaplot for plotting has also been revamped, allowing much greater control on the way graphs are handled by giving direct access to the graph object. A new class for hierarchial indexing of data (called MultiIndex) has also been added, which is immensely useful when grouping/splitting/aggregating data.</p>

<p>Lets look at all these features one by one:</p>

<h2 id="data-types">Data Types</h2>

<p>You can now either use Ruby Arrays or NMatrix as the underlying implementation. Since NMatrix is fast and makes use of C storage, it is recommended to use nmatrix when dealing with large sets of data. Daru will store any data as Ruby Array unless explicitly specified.</p>

<p>Thus to specify the data type of a Vector use the option <code>:dtype</code> and either supply it with <code>:array</code> or <code>:nmatrix</code>, and if using the NMatrix dtype, you can also specify the C data type that NMatrix will use internall by using the option <code>:nm_dtype</code> and supplying it with one of the NMatrix data types (it currently supports ints, floats, rationals and complex numbers. Check the docs for further details).</p>

<p>As an example, consider creating a Vector which uses NMatrix underneath, and stores data using the <code>:float64</code> NMatrix data type, which stands for double precision floating point numbers.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">v</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="mi">44</span><span class="p">,</span><span class="mi">55</span><span class="o">.</span><span class="mi">54</span><span class="p">,</span><span class="mi">33</span><span class="o">.</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="o">.</span><span class="mi">6</span><span class="o">]</span><span class="p">,</span><span class="ss">dtype</span><span class="p">:</span> <span class="ss">:nmatrix</span><span class="p">,</span> <span class="ss">nm_dtype</span><span class="p">:</span> <span class="ss">:float64</span><span class="p">)</span>
</span><span class="line"><span class="c1">#        nil</span>
</span><span class="line"><span class="c1">#    0  1.44</span>
</span><span class="line"><span class="c1">#    1 55.54</span>
</span><span class="line"><span class="c1">#    2  33.2</span>
</span><span class="line"><span class="c1">#    3   5.6</span>
</span><span class="line"><span class="n">v</span><span class="o">.</span><span class="n">dtype</span> <span class="c1">#=&gt; :nmatrix</span>
</span><span class="line"><span class="n">v</span><span class="o">.</span><span class="n">type</span>  <span class="c1">#=&gt; :float64</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Another distinction between types of data that daru offers is <code>:numeric</code> and <code>:object</code>. This is a generic feature for distinguishing numerical data from other types of data (like Strings or DateTime objects) that might be contained inside Vectors or DataFrames. These distinctions are important because statistical and arithmetic operations can only be applied on structures with type numeric.</p>

<p>To query the data structure for its type, use the <code>#type</code> method. If the underlying implemetation is an NMatrix, it will return the NMatrix data type, otherwise for Ruby Arrays, it will be either <code>:numeric</code> or <code>:object</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">v</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span> <span class="ss">dtype</span><span class="p">:</span> <span class="ss">:array</span><span class="p">)</span>
</span><span class="line"><span class="n">v</span><span class="o">.</span><span class="n">type</span> <span class="c1">#=&gt; :numeric</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Thus Daru exposes three methods for querying the type of data: 
* <code>#type</code> - Get the generic type of data to know whether numeric computation can be performed on the object. Get the C data type used by nmatrix in case of dtype NMatrix.
* <code>#dtype</code> - Get the underlying data representation (either :array or :nmatrix).</p>

<h2 id="working-with-missing-data">Working with Missing Data</h2>

<p>Any data scientist knows how common missing data is in real-life data sets, and to address that need, daru provides a host of functions for this purpose.
This functionality is still in its infancy but should be up to speed soon.</p>

<p>The <code>#is_nil?</code> function will return a Vector object with <code>true</code> if a value is <code>nil</code> and <code>false</code> otherwise.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">v</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="kp">nil</span><span class="p">,</span><span class="kp">nil</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="o">[</span><span class="ss">:a</span><span class="p">,</span> <span class="ss">:b</span><span class="p">,</span> <span class="ss">:c</span><span class="p">,</span> <span class="ss">:d</span><span class="p">,</span> <span class="ss">:e</span><span class="p">,</span> <span class="ss">:f</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="n">v</span><span class="o">.</span><span class="n">is_nil?</span>
</span><span class="line"><span class="c1">#=&gt; </span>
</span><span class="line"><span class="c1">##&lt;Daru::Vector:93025420 @name = nil @size = 6 &gt;</span>
</span><span class="line"><span class="c1">#        nil</span>
</span><span class="line"><span class="c1">#    a   nil</span>
</span><span class="line"><span class="c1">#    b   nil</span>
</span><span class="line"><span class="c1">#    c   nil</span>
</span><span class="line"><span class="c1">#    d  true</span>
</span><span class="line"><span class="c1">#    e  true</span>
</span><span class="line"><span class="c1">#    f   nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>#nil_positions</code> function returns an Array that contains the indexes of all the nils in the Vector.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">v</span><span class="o">.</span><span class="n">nil_positions</span> <span class="c1">#=&gt; [:d, :e]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>#replace_nils</code> functions replaces nils with a supplied value.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">v</span><span class="o">.</span><span class="n">replace_nils</span> <span class="mi">69</span>
</span><span class="line"><span class="c1">#=&gt; </span>
</span><span class="line"><span class="c1">##&lt;Daru::Vector:92796730 @name = nil @size = 6 &gt;</span>
</span><span class="line"><span class="c1">#    nil</span>
</span><span class="line"><span class="c1">#  a   1</span>
</span><span class="line"><span class="c1">#  b   2</span>
</span><span class="line"><span class="c1">#  c   3</span>
</span><span class="line"><span class="c1">#  d  69</span>
</span><span class="line"><span class="c1">#  e  69</span>
</span><span class="line"><span class="c1">#  f   4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The statistics functions implemented on Vectors ensure that missing data is not considered during computation and are thus safe to call on missing data.</p>

<h2 id="hierarchical-sorting-of-dataframe">Hierarchical sorting of DataFrame</h2>

<p>It is now possible to use the <code>#sort</code> function on Daru::DataFrame such that sorting happens hierarchically according to the order of the specified vector names.</p>

<p>In case you want to sort according to a certain attribute of the data in a particular vector, for example sort a Vector of strings by length, then you can supply a code block to the <code>:by</code> option of the sort method.</p>

<p>Supply the <code>:ascending</code> option with an Array containing ‘true’ or ‘false’ depending on whether you want the corresponding vector sorted in ascending or descending order.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span>
</span><span class="line">  <span class="ss">a</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;ff&#39;</span>  <span class="p">,</span>  <span class="s1">&#39;fwwq&#39;</span><span class="p">,</span>  <span class="s1">&#39;efe&#39;</span><span class="p">,</span>  <span class="s1">&#39;a&#39;</span><span class="p">,</span>  <span class="s1">&#39;efef&#39;</span><span class="p">,</span>  <span class="s1">&#39;zzzz&#39;</span><span class="p">,</span>  <span class="s1">&#39;efgg&#39;</span><span class="p">,</span>  <span class="s1">&#39;q&#39;</span><span class="p">,</span>  <span class="s1">&#39;ggf&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="ss">b</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;one&#39;</span>  <span class="p">,</span>  <span class="s1">&#39;one&#39;</span><span class="p">,</span>  <span class="s1">&#39;one&#39;</span><span class="p">,</span>  <span class="s1">&#39;two&#39;</span><span class="p">,</span>  <span class="s1">&#39;two&#39;</span><span class="p">,</span>  <span class="s1">&#39;one&#39;</span><span class="p">,</span>  <span class="s1">&#39;one&#39;</span><span class="p">,</span>  <span class="s1">&#39;two&#39;</span><span class="p">,</span>  <span class="s1">&#39;two&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="ss">c</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;small&#39;</span><span class="p">,</span><span class="s1">&#39;large&#39;</span><span class="p">,</span><span class="s1">&#39;large&#39;</span><span class="p">,</span><span class="s1">&#39;small&#39;</span><span class="p">,</span><span class="s1">&#39;small&#39;</span><span class="p">,</span><span class="s1">&#39;large&#39;</span><span class="p">,</span><span class="s1">&#39;small&#39;</span><span class="p">,</span><span class="s1">&#39;large&#39;</span><span class="p">,</span><span class="s1">&#39;small&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="ss">d</span><span class="p">:</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="ss">e</span><span class="p">:</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">14</span><span class="o">]</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line">
</span><span class="line"><span class="n">df</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="o">[</span><span class="ss">:a</span><span class="p">,</span><span class="ss">:d</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="ss">by</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">    <span class="ss">a</span><span class="p">:</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=&gt;</span> <span class="n">b</span><span class="o">.</span><span class="n">length</span> <span class="p">},</span>
</span><span class="line">    <span class="ss">b</span><span class="p">:</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">abs</span> <span class="o">&lt;=&gt;</span> <span class="n">b</span><span class="o">.</span><span class="n">abs</span> <span class="p">}</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="ss">ascending</span><span class="p">:</span> <span class="o">[</span><span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="o">]</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/sorted_df.png" title="'Hierarchically sorted DataFrame'" /></p>

<p>Vector objects also have a similar sorting method implemented. Check the docs for more details. Indexing is preserved while sorting of both DataFrame and Vector.</p>

<h2 id="dsl-for-plotting-with-nyaplothttpsgithubcomdomitrynyaplot">DSL for plotting with <a href="https://github.com/domitry/nyaplot">Nyaplot</a></h2>

<p>Previously plotting with daru required a lot of arguments to be supplied by the user. The interface did not take advatage of Ruby’s blocks, nor did it expose many functionalities of nyaplot. All that changes with this new version, that brings in a new DSL for easy plotting (recommended usage with <a href="https://github.com/minad/iruby">iruby notebook</a>).</p>

<p>Thus to plot a line graph with data present in a DataFrame:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">a</span><span class="p">:</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">44</span><span class="o">]</span><span class="p">})</span>
</span><span class="line"><span class="n">df</span><span class="o">.</span><span class="n">plot</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:line</span><span class="p">,</span> <span class="ss">x</span><span class="p">:</span> <span class="ss">:a</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="ss">:b</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="p">,</span><span class="n">d</span><span class="o">|</span>
</span><span class="line">  <span class="nb">p</span><span class="o">.</span><span class="n">yrange</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="o">]</span>
</span><span class="line">  <span class="nb">p</span><span class="o">.</span><span class="n">legend</span> <span class="kp">true</span>
</span><span class="line">  <span class="n">d</span><span class="o">.</span><span class="n">color</span> <span class="s2">&quot;green&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img class="center" src="http://v0dro.github.io/images/daru2/line_graph.png" title="'Line Graph From DataFrame'" /></p>

<p>As you can see, the <code>#plot</code> function exposes the <code>Nyaplot::Plot</code> and <code>Nyaplot::Diagram</code> objects to user after populating them with the relevant data. So the new interface lets experienced users utilize the full power of nyaplot but keeps basic plotting very simple to use for new users or for quick and dirty visualization needs. Unfortunately for now, until a viable solution to interfacing with nyaplot is found, you will need to use the nyaplot API directly.</p>

<p>Refer to <a href="http://nbviewer.ipython.org/github/SciRuby/sciruby-notebooks/blob/master/Visualization/Visualizing%20data%20with%20daru%20DataFrame.ipynb">this notebook</a> for advanced plotting tutorials.</p>

<h2 id="statistics-and-arithmetic-on-dataframes">Statistics and arithmetic on DataFrames.</h2>

<p>Daru includes a host of methods for simple statistical analysis on numeric data. You can call <code>mean</code>, <code>std</code>, <code>sum</code>, <code>product</code>, etc. directly on the DataFrame. The corresponding computation is performed on numeric Vectors within the DataFrame, and missing data if any is excluded from the calculation by default.</p>

<p>So for this DataFrame:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span>
</span><span class="line">  <span class="ss">a</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;foo&#39;</span>  <span class="p">,</span>  <span class="s1">&#39;foo&#39;</span><span class="p">,</span>  <span class="s1">&#39;foo&#39;</span><span class="p">,</span>  <span class="s1">&#39;foo&#39;</span><span class="p">,</span>  <span class="s1">&#39;foo&#39;</span><span class="p">,</span>  <span class="s1">&#39;bar&#39;</span><span class="p">,</span>  <span class="s1">&#39;bar&#39;</span><span class="p">,</span>  <span class="s1">&#39;bar&#39;</span><span class="p">,</span>  <span class="s1">&#39;bar&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="ss">b</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;one&#39;</span>  <span class="p">,</span>  <span class="s1">&#39;one&#39;</span><span class="p">,</span>  <span class="s1">&#39;one&#39;</span><span class="p">,</span>  <span class="s1">&#39;two&#39;</span><span class="p">,</span>  <span class="s1">&#39;two&#39;</span><span class="p">,</span>  <span class="s1">&#39;one&#39;</span><span class="p">,</span>  <span class="s1">&#39;one&#39;</span><span class="p">,</span>  <span class="s1">&#39;two&#39;</span><span class="p">,</span>  <span class="s1">&#39;two&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="ss">c</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;small&#39;</span><span class="p">,</span><span class="s1">&#39;large&#39;</span><span class="p">,</span><span class="s1">&#39;large&#39;</span><span class="p">,</span><span class="s1">&#39;small&#39;</span><span class="p">,</span><span class="s1">&#39;small&#39;</span><span class="p">,</span><span class="s1">&#39;large&#39;</span><span class="p">,</span><span class="s1">&#39;small&#39;</span><span class="p">,</span><span class="s1">&#39;large&#39;</span><span class="p">,</span><span class="s1">&#39;small&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="ss">d</span><span class="p">:</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="ss">e</span><span class="p">:</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">14</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="ss">f</span><span class="p">:</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">60</span><span class="p">,</span><span class="mi">70</span><span class="o">]</span>
</span><span class="line"><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To calculate the mean of numeric vectors:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">df</span><span class="o">.</span><span class="n">mean</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/df_mean.png" title="'Calculate Mean of Numeric Vectors'" /></p>

<p>Apart from that you can use the <code>#describe</code> method to calculate many statistical features of numeric Vectors in one shot and see a summary of statistics for numerical vectors in the DataFrame that is returned. For example,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">df</span><span class="o">.</span><span class="n">describe</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/df_describe.png" title="'Describe Multiple Statistics in One Shot'" /></p>

<p>The covariance and correlation coeffiecients between the numeric vectors can also be found with <code>#cov</code> and <code>#corr</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">df</span><span class="o">.</span><span class="n">cov</span>
</span><span class="line"><span class="c1"># =&gt; </span>
</span><span class="line"><span class="c1"># #&lt;Daru::DataFrame:91700830 @name = f5ae5d7e-9fcb-46c8-90ac-a6420c9dc27f @size # = 3&gt;</span>
</span><span class="line"><span class="c1">#                     d          e          f </span>
</span><span class="line"><span class="c1">#          d          4          8         40 </span>
</span><span class="line"><span class="c1">#          e          8         16         80 </span>
</span><span class="line"><span class="c1">#          f         40         80        400 </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="hierarchial-indexing">Hierarchial indexing</h2>

<p>A new way of hierarchially indexing data has been introduced in version 0.0.5. This is done with the new <code>Daru::MultiIndex</code> class. Hierarchial indexing allows grouping sets of similar data by index and lets you select sub sets of data by specifying an index name in the upper hierarchy.</p>

<p>A MultiIndex can be created by passing a bunch of tuples into the Daru::MultiIndex class. A DataFrame or Vector can be created by passing it a MultiIndex object into the <code>index</code> option. A MultiIndex can be used for determining the order of Vectors in a DataFrame too.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">tuples</span> <span class="o">=</span> <span class="o">[</span>
</span><span class="line">  <span class="o">[</span><span class="ss">:a</span><span class="p">,</span><span class="ss">:one</span><span class="p">,</span><span class="ss">:bar</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="ss">:a</span><span class="p">,</span><span class="ss">:one</span><span class="p">,</span><span class="ss">:baz</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="ss">:a</span><span class="p">,</span><span class="ss">:two</span><span class="p">,</span><span class="ss">:bar</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="ss">:a</span><span class="p">,</span><span class="ss">:two</span><span class="p">,</span><span class="ss">:baz</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="ss">:b</span><span class="p">,</span><span class="ss">:one</span><span class="p">,</span><span class="ss">:bar</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="ss">:b</span><span class="p">,</span><span class="ss">:two</span><span class="p">,</span><span class="ss">:bar</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="ss">:b</span><span class="p">,</span><span class="ss">:two</span><span class="p">,</span><span class="ss">:baz</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="ss">:b</span><span class="p">,</span><span class="ss">:one</span><span class="p">,</span><span class="ss">:foo</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="ss">:c</span><span class="p">,</span><span class="ss">:one</span><span class="p">,</span><span class="ss">:bar</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="ss">:c</span><span class="p">,</span><span class="ss">:one</span><span class="p">,</span><span class="ss">:baz</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="ss">:c</span><span class="p">,</span><span class="ss">:two</span><span class="p">,</span><span class="ss">:foo</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="ss">:c</span><span class="p">,</span><span class="ss">:two</span><span class="p">,</span><span class="ss">:bar</span><span class="o">]</span>
</span><span class="line"><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">multi_index</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">MultiIndex</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">tuples</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">vector_arry1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="o">]</span>
</span><span class="line"><span class="n">vector_arry2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">order_mi</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">MultiIndex</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span>
</span><span class="line">    <span class="o">[</span><span class="ss">:a</span><span class="p">,</span><span class="ss">:one</span><span class="p">,</span><span class="ss">:bar</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">    <span class="o">[</span><span class="ss">:a</span><span class="p">,</span><span class="ss">:two</span><span class="p">,</span><span class="ss">:baz</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">    <span class="o">[</span><span class="ss">:b</span><span class="p">,</span><span class="ss">:two</span><span class="p">,</span><span class="ss">:foo</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">    <span class="o">[</span><span class="ss">:b</span><span class="p">,</span><span class="ss">:one</span><span class="p">,</span><span class="ss">:foo</span><span class="o">]]</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">df_mi</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span>
</span><span class="line">    <span class="n">vector_arry1</span><span class="p">,</span>
</span><span class="line">    <span class="n">vector_arry2</span><span class="p">,</span>
</span><span class="line">    <span class="n">vector_arry1</span><span class="p">,</span>
</span><span class="line">    <span class="n">vector_arry2</span><span class="o">]</span><span class="p">,</span> <span class="ss">order</span><span class="p">:</span> <span class="n">order_mi</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="n">multi_index</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/multi_index_table.png" title="'DataFrame with hierarchical indexing'" /></p>

<p>Selecting a top level index from the hierarchy will select all the rows under that name, and return a new DataFrame with just that much data and indexes.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">df_mi</span><span class="o">.</span><span class="n">row</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/multi_index_partial.png" title="'Partial Selection Of Multi Indexed DataFrame'" /></p>

<p>Alternatively passing the entire tuple will return just that row as a <code>Daru::Vector</code>, indexed according to the column index.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">df_mi</span><span class="o">.</span><span class="n">row</span><span class="o">[</span><span class="ss">:a</span><span class="p">,</span> <span class="ss">:one</span><span class="p">,</span><span class="ss">:bar</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img class="center" src="http://v0dro.github.io/images/daru2/multi_index_exact.png" title="'Selecting A Single Row From A Multi Indexed DataFrame'" /></p>

<p>Hierachical indexing is especially useful when aggregating or splitting data, or generating data summaries as we’ll see in the following examples.</p>

<h2 id="splitting-and-aggregation-of-data">Splitting and aggregation of data</h2>

<p>When dealing with large sets of scattered data, it is often useful to ‘see’ the data grouped according to similar values in a Vector instead of it being scattered all over the place.</p>

<p>The <code>#group_by</code> function does exactly that. For those familiar SQL, <code>#group_by</code> works exactly like the GROUP BY clause, but is much easier since its all Ruby.</p>

<p>The <code>#group_by</code> function will accept one or more Vector names and will scan those vectors for common elements that can be grouped together. In case multiple names are specified it will check for common attributes accross rows.</p>

<p>So for example consider this DataFrame:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span>
</span><span class="line">  <span class="ss">a</span><span class="p">:</span> <span class="sx">%w{foo bar foo bar   foo bar foo foo}</span><span class="p">,</span>
</span><span class="line">  <span class="ss">b</span><span class="p">:</span> <span class="sx">%w{one one two three two two one three}</span><span class="p">,</span>
</span><span class="line">  <span class="ss">c</span><span class="p">:</span>   <span class="o">[</span><span class="mi">1</span>  <span class="p">,</span><span class="mi">2</span>  <span class="p">,</span><span class="mi">3</span>  <span class="p">,</span><span class="mi">1</span>    <span class="p">,</span><span class="mi">3</span>  <span class="p">,</span><span class="mi">6</span>  <span class="p">,</span><span class="mi">3</span>  <span class="p">,</span><span class="mi">8</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="ss">d</span><span class="p">:</span>   <span class="o">[</span><span class="mi">11</span> <span class="p">,</span><span class="mi">22</span> <span class="p">,</span><span class="mi">33</span> <span class="p">,</span><span class="mi">44</span>   <span class="p">,</span><span class="mi">55</span> <span class="p">,</span><span class="mi">66</span> <span class="p">,</span><span class="mi">77</span> <span class="p">,</span><span class="mi">88</span><span class="o">]</span>
</span><span class="line"><span class="p">})</span>
</span><span class="line"><span class="c1">#&lt;Daru::DataFrame:88462950 @name = 0dbc2869-9a82-4044-b72d-a4ef963401fc @size = 8&gt;</span>
</span><span class="line"><span class="c1">#            a          b          c          d </span>
</span><span class="line"><span class="c1"># 0        foo        one          1         11 </span>
</span><span class="line"><span class="c1"># 1        bar        one          2         22 </span>
</span><span class="line"><span class="c1"># 2        foo        two          3         33 </span>
</span><span class="line"><span class="c1"># 3        bar      three          1         44 </span>
</span><span class="line"><span class="c1"># 4        foo        two          3         55 </span>
</span><span class="line"><span class="c1"># 5        bar        two          6         66 </span>
</span><span class="line"><span class="c1"># 6        foo        one          3         77 </span>
</span><span class="line"><span class="c1"># 7        foo      three          8         88 </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To group this DataFrame by the columns <code>:a</code> and <code>:b</code>, pass them as arguments to the <code>#group_by</code> function, which returns a <code>Daru::Core::GroupBy</code> object.</p>

<p>Calling <code>#groups</code> on the returned <code>GroupBy</code> object returns a <code>Hash</code> with the grouped rows.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">grouped</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="o">[</span><span class="ss">:a</span><span class="p">,</span> <span class="ss">:b</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="n">grouped</span><span class="o">.</span><span class="n">groups</span>
</span><span class="line"><span class="c1"># =&gt; {</span>
</span><span class="line"><span class="c1">#  [&quot;bar&quot;, &quot;one&quot;]=&gt;[1],</span>
</span><span class="line"><span class="c1">#  [&quot;bar&quot;, &quot;three&quot;]=&gt;[3],</span>
</span><span class="line"><span class="c1">#  [&quot;bar&quot;, &quot;two&quot;]=&gt;[5],</span>
</span><span class="line"><span class="c1">#  [&quot;foo&quot;, &quot;one&quot;]=&gt;[0, 6],</span>
</span><span class="line"><span class="c1">#  [&quot;foo&quot;, &quot;three&quot;]=&gt;[7],</span>
</span><span class="line"><span class="c1">#  [&quot;foo&quot;, &quot;two&quot;]=&gt;[2, 4]}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To see the first group of each group from this collection, call <code>#first</code> on the <code>grouped</code> variable. Calling <code>#last</code> will return the last member of each group.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">grouped</span><span class="o">.</span><span class="n">first</span>
</span><span class="line">
</span><span class="line"><span class="c1">#=&gt;           a          b          c          d </span>
</span><span class="line"><span class="c1">#  1        bar        one          2         22 </span>
</span><span class="line"><span class="c1">#  3        bar      three          1         44 </span>
</span><span class="line"><span class="c1">#  5        bar        two          6         66 </span>
</span><span class="line"><span class="c1">#  0        foo        one          1         11 </span>
</span><span class="line"><span class="c1">#  7        foo      three          8         88 </span>
</span><span class="line"><span class="c1">#  2        foo        two          3         33 </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On a similar note <code>#head(n)</code> will return the first <code>n</code> groups and <code>#tail(n)</code> the last <code>n</code> groups.</p>

<p>The <code>#get_group</code> function will select only the rows that a particular group belongs to and return a DataFrame with those rows. The original indexing is ofcourse preserved.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">grouped</span><span class="o">.</span><span class="n">get_group</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;one&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; </span>
</span><span class="line"><span class="c1"># #&lt;Daru::DataFrame:90777050 @name = cdd0afa8-252d-4d07-ad0f-76c7581a492a @size # = 2&gt;</span>
</span><span class="line"><span class="c1">#                     a          b          c          d </span>
</span><span class="line"><span class="c1">#          0        foo        one          1         11 </span>
</span><span class="line"><span class="c1">#          6        foo        one          3         77 </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>Daru::Core::GroupBy</code> object contains a bunch of methods for creating summaries of the grouped data. These currently include <code>#mean</code>, <code>#std</code>, <code>#product</code>, <code>#sum</code>, etc. and many more to be added in the future. Calling any of the aggregation methods will create a new DataFrame which will have the index as the group and the aggregated data of the non-group vectors as the corresponding value. Of course this aggregation will apply only to <code>:numeric</code> type Vectors and missing data will not be considered while aggregation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">grouped</span><span class="o">.</span><span class="n">mean</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img class="center" src="http://v0dro.github.io/images/daru2/group_by_mean.png" title="'Aggregating by Mean After Grouping'" /></p>

<p>A hierarchichally indexed DataFrame is returned. Check the <code>GroupBy</code> docs for more aggregation methods.</p>

<h2 id="generating-excel-style-pivot-tables">Generating Excel-style Pivot Tables</h2>

<p>You can generate an excel-style pivot table with the <code>#pivot_table</code> function. The levels of the pivot table are stored in MultiIndex objects.</p>

<p>To demonstrate with an example, consider <a href="https://github.com/v0dro/daru/blob/master/spec/fixtures/sales-funnel.csv">this CSV file on sales data</a>.</p>

<p><img class="center" src="http://v0dro.github.io/images/daru2/pivot_table_data.png" title="'Data For Pivot Table Demo'" /></p>

<p>To look at the data from the point of view of the manager and rep:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">sales</span><span class="o">.</span><span class="n">pivot_table</span> <span class="ss">index</span><span class="p">:</span> <span class="o">[</span><span class="ss">:manager</span><span class="p">,</span> <span class="ss">:rep</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/pivot_table_index.png" title="'Data Pivoted on Index Only.'" /></p>

<p>You can see that the pivot table has summarized the data and grouped it according to the manager and representative.</p>

<p>To see the sales broken down by the products:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">sales</span><span class="o">.</span><span class="n">pivot_table</span><span class="p">(</span><span class="ss">index</span><span class="p">:</span> <span class="o">[</span><span class="ss">:manager</span><span class="p">,</span><span class="ss">:rep</span><span class="o">]</span><span class="p">,</span> <span class="ss">values</span><span class="p">:</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">vectors</span><span class="p">:</span> <span class="o">[</span><span class="ss">:product</span><span class="o">]</span><span class="p">,</span> <span class="ss">agg</span><span class="p">:</span> <span class="ss">:sum</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/pivoted_data.png" title="'Data Pivoted to Reflect Sales'" /></p>

<h2 id="compatibility-with-statsample">Compatibility with statsample</h2>

<p>Daru is now completely compatible with <a href="https://github.com/clbustos/statsample">statsample</a> and you can now perform all of the functions by just passing it a Daru::DataFrame or Daru::Vector to perform statistical analysis.</p>

<p>Find more examples of using daru for statistics <a href="https://github.com/SciRuby/sciruby-notebooks/tree/master/Statistics">in these notebooks</a>.</p>

<p>Heres an example to demonstrate:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">a</span><span class="p">:</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="o">]</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="o">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">77</span><span class="o">]</span><span class="p">})</span>
</span><span class="line">
</span><span class="line"><span class="no">Statsample</span><span class="o">::</span><span class="no">Analysis</span><span class="o">.</span><span class="n">store</span><span class="p">(</span><span class="no">Statsample</span><span class="o">::</span><span class="no">Test</span><span class="o">::</span><span class="n">T</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">  <span class="n">t_2</span> <span class="o">=</span> <span class="no">Statsample</span><span class="o">::</span><span class="no">Test</span><span class="o">.</span><span class="n">t_two_samples_independent</span><span class="p">(</span><span class="n">df</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span><span class="p">,</span> <span class="n">df</span><span class="o">[</span><span class="ss">:b</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="n">summary</span> <span class="n">t_2</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Statsample</span><span class="o">::</span><span class="no">Analysis</span><span class="o">.</span><span class="n">run_batch</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Analysis 2015-02-25 13:34:32 +0530</span>
</span><span class="line"><span class="c1"># = Statsample::Test::T</span>
</span><span class="line"><span class="c1">#   == Two Sample T Test</span>
</span><span class="line"><span class="c1">#     Mean and standard deviation</span>
</span><span class="line"><span class="c1"># +----------+---------+---------+---+</span>
</span><span class="line"><span class="c1"># | Variable |  mean   |   sd    | n |</span>
</span><span class="line"><span class="c1"># +----------+---------+---------+---+</span>
</span><span class="line"><span class="c1"># | a        | 4.0000  | 2.1602  | 7 |</span>
</span><span class="line"><span class="c1"># | b        | 44.0000 | 23.7627 | 7 |</span>
</span><span class="line"><span class="c1"># +----------+---------+---------+---+</span>
</span><span class="line"><span class="c1"># </span>
</span><span class="line"><span class="c1">#     Levene test for equality of variances : F(1, 12) = 13.6192 , p = 0.0031</span>
</span><span class="line"><span class="c1">#     T statistics</span>
</span><span class="line"><span class="c1"># +--------------------+---------+--------+----------------+</span>
</span><span class="line"><span class="c1"># |        Type        |    t    |   df   | p (both tails) |</span>
</span><span class="line"><span class="c1"># +--------------------+---------+--------+----------------+</span>
</span><span class="line"><span class="c1"># | Equal variance     | -4.4353 | 12     | 0.0008         |</span>
</span><span class="line"><span class="c1"># | Non equal variance | -4.4353 | 6.0992 | 0.0042         |</span>
</span><span class="line"><span class="c1"># +--------------------+---------+--------+----------------+</span>
</span><span class="line"><span class="c1"># </span>
</span><span class="line"><span class="c1">#     Effect size</span>
</span><span class="line"><span class="c1"># +-------+----------+</span>
</span><span class="line"><span class="c1"># | x1-x2 | -40.0000 |</span>
</span><span class="line"><span class="c1"># | d     | -12.0007 |</span>
</span><span class="line"><span class="c1"># +-------+----------+</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="references">References</h5>

<ul>
  <li>Pivot Tables example taken from <a href="http://pbpython.com/pandas-pivot-table-explained.html">here</a>. </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving Systems of Linear Equations in Ruby]]></title>
    <link href="http://v0dro.github.io/blog/2014/12/14/solving-systems-of-linear-equations-in-ruby/"/>
    <updated>2014-12-14T11:57:34+05:30</updated>
    <id>http://v0dro.github.io/blog/2014/12/14/solving-systems-of-linear-equations-in-ruby</id>
    <content type="html"><![CDATA[<p>Solving systems of linear equations is a very important part of scientific computing (some would say most important), and in this post I will show you how a system of linear equations involving <em>n</em> equations and <em>n</em> unknowns can be solved in Ruby using the <a href="https://github.com/SciRuby/nmatrix">NMatrix</a> gem and the methodology that I used for simplyfying the algorithms involved.</p>

<p>This involved solving a system of linear equations using forward substution followed by back substution using the LU factorization of the matrix of co-efficients.</p>

<p>The reduction techniques were quite baffling at first, because I had always solved equations in the traditional way and this was something completely new. I eventually figured it out and also <a href="https://github.com/SciRuby/nmatrix/commit/4241d241ca7744ca2ca5e090782588581160d42b">implemented it in NMatrix</a>. Here I will document how I did that. Hopefully, this will be useful to others like me!</p>

<p>I’m assuming that you are familiar with the LU decomposed form of a square matrix. If not, read <a href="http://en.wikipedia.org/wiki/LU_decomposition">this</a> resource first.</p>

<p>Throughout this post, I will refer to <em>A</em> as the square matrix of co-efficients, <em>x</em> as the column matrix of unknowns and <em>b</em> as column matrix of right hand sides.</p>

<p>Lets say that the equation you want to solve is represented by:</p>

<script type="math/tex; mode=display"> A.x = b .. (1)</script>

<p>The basic idea behind an LU decomposition is that a square matrix A can be represented as the product of two matrices <em>L</em> and <em>U</em>, where <em>L</em> is a lower <a href="http://en.wikipedia.org/wiki/Triangular_matrix">triangular matrix</a> and <em>U</em> is an upper triangular matrix.</p>

<script type="math/tex; mode=display"> L.U = A </script>

<p>Given this, equation (1) can be represented as:</p>

<script type="math/tex; mode=display"> L.(U.x) = b </script>

<p>Which we can use for solving the vector <em>y</em> such that:</p>

<script type="math/tex; mode=display"> L.y = b .. (2) </script>

<p>and then solving:</p>

<script type="math/tex; mode=display"> U.x = y ..(3) </script>

<p>The LU decomposed matrix is typically carried in a single matrix to reduce storage overhead, and thus the diagonal elements of <em>L</em> are assumed to have a value <em>1</em>. The diagonal elements of <em>U</em> can have any value.</p>

<p>The reason for breaking down <em>A</em> and first solving for an upper triangular matrix is that the solution of an upper triangular matrix is quite trivial and thus the solution to (2) is found using the technique of <em>forward substitution</em>. </p>

<p>Forward substitution is a technique that involves scanning an upper triangular matrix from top to bottom, computing a value for the top most variable and substituting that value into subsequent variables below it. This proved to be quite intimidating, because according to <a href="http://www.nr.com/">Numerical Recipes</a>, the whole process of forward substitution can be represented by the following equation:</p>

<script type="math/tex; mode=display">
\begin{align}
  y_{0} = \dfrac{b_{0}}{L_{00}}
\end{align}
</script>

<script type="math/tex; mode=display">
\begin{align}
  y_{i} = \dfrac{1}{L_{ii}}[b_{i} - \sum_{j=0}^{i-1}L_{ii} \times y_{j}] \quad i = 1,2,\dotsc,N-1 \quad (4)
\end{align}
</script>

<p>Figuring out what exactly is going on was quite a daunting task, but I did figure it out eventually and here is how I went about it:</p>

<p>Let <em>L</em> in equation (2) to be the lower part of a 3x3 matrix A (as per (1)). So equation (2) can be represented in matrix form as:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
    \begin{pmatrix}
      L_{00} & 0 & 0 \\
      L_{10} & L_{11} & 0 \\
      L_{20} & L_{21} & L_{22}
    \end{pmatrix}
    \begin{pmatrix}
      y_{0} \\
      y_{1} \\
      y_{2}
    \end{pmatrix}
    =
    \begin{pmatrix}
      b_{0} \\
      b_{1} \\
      b_{2}
    \end{pmatrix}
\end{align}
 %]]&gt;</script>

<p>Our task now is calculate the column matrix containing the <em>y</em> unknowns.
Thus by equation (4), each of them can be calculated with the following sets of equations (if you find them confusing just correlate each value with that present in the matrices above and it should be clear):</p>

<script type="math/tex; mode=display">
\begin{align}
  y_{0} = \dfrac{b_{0}}{L_{00}}
\end{align}
</script>

<script type="math/tex; mode=display">
\begin{align}
  y_{1} = \dfrac{1}{L_{11}} \times [b_{1} - L_{00} \times y_{0}]
\end{align}
</script>

<script type="math/tex; mode=display">
\begin{align}
  y_{2} = \dfrac{1}{L_{22}} \times [b_{2} - (L_{20} \times y_{0} + L_{21} \times y_{1})]
\end{align}
</script>

<p>Its now quite obvious that forward substitution is called so because we start from the topmost row of the matrix and use the value of the variable calculated in that row to calculate the <em>y</em> for the following rows.</p>

<p>Now that we have the solution to equation (2), we can use the values generated in the <em>y</em> column vector to compute <em>x</em> in equation (3). Recall that the matrix <em>U</em> is the upper triangular decomposed part of <em>A</em> (equation (1)). This matrix can be solved using a technique called <em>backward substitution</em>. It is the exact reverse of the <em>forward substitution</em> that we just saw, i.e. the values of the bottom-most variables are calculated first and then substituted into the rows above to calculate subsquent variables above.</p>

<p>The equation describing backward substitution is described in Numerical Recipes as:</p>

<script type="math/tex; mode=display">
\begin{align}
  x_{N-1} = \dfrac{y_{N-1}}{U_{N-1,N-1}}
\end{align}
</script>

<script type="math/tex; mode=display">
\begin{align}
  x_{i} = \dfrac{1}{U_{ii}}[y_{i} - \sum_{j=i+1}^{N-1}U_{ij} \times x_{j}] \quad i = N-2, N-3,\dotsc,0 \quad (5)
\end{align}
</script>

<p>Lets try to understand this equation by extending the example we used above to understand forward substitution. To gain a better understanding of this concept, consider the equation (3) written in matrix form (keeping the same 3x3 matrix <em>A</em>):</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
    \begin{pmatrix}
      U_{00} & U_{01} & U_{02} \\
      0 & U_{11} & U_{12} \\
      0 & 0 & U_{22}
    \end{pmatrix}
    \begin{pmatrix}
      x_{0} \\
      x_{1} \\
      x_{2}
    \end{pmatrix}
    =
    \begin{pmatrix}
      y_{0} \\
      y_{1} \\
      y_{2}
    \end{pmatrix}
\end{align}
 %]]&gt;</script>

<p>Using the matrix representation above as reference, equation (5) can be expanded in terms of a 3x3 matrix as:</p>

<script type="math/tex; mode=display">
\begin{align}
  x_{2} = \dfrac{y_{2}}{U_{22}}
\end{align}
</script>

<script type="math/tex; mode=display">
\begin{align}
  x_{1} = \dfrac{1}{U_{11}} \times [y_{1} - U_{12} \times x_{2}]
\end{align}
</script>

<script type="math/tex; mode=display">
\begin{align}
  x_{0} = \dfrac{1}{U_{00}} \times [y_{0} - (U_{01} \times x_{1} + U_{02} \times x_{2})]
\end{align}
</script>

<p>Looking at the above equations its easy to see how backward substitution can be used to solve for unknown quantities when given a upper triangular matrix of co-efficients, by starting at the lowermost variable and gradually moving upward.</p>

<p>Now that the methodology behind solving sets of linear equations is clear, lets consider a set of 3 linear equations and 3 unknowns and compute the values of the unknown quantities using the nmatrix #solve method.</p>

<p>The #solve method can be called on any nxn square matrix of a floating point data type, and expects its sole argument to be a column matrix containing the right hand sides. It returns a column nmatrix object containing the computed co-efficients.</p>

<p>For this example, consider these 3 equations:</p>

<script type="math/tex; mode=display"> x + y − z = 4 </script>

<script type="math/tex; mode=display"> x − 2y + 3z = −6 </script>

<script type="math/tex; mode=display"> 2x + 3y + z = 7 </script>

<p>These can be translated to Ruby code by creating an NMatrix only for the co-efficients and another one only for right hand sides:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;nmatrix&#39;</span>
</span><span class="line"><span class="n">coeffs</span> <span class="o">=</span> <span class="no">NMatrix</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class="line">   <span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
</span><span class="line">   <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="ss">dtype</span><span class="p">:</span> <span class="ss">:float32</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">rhs</span> <span class="o">=</span> <span class="no">NMatrix</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">4</span><span class="p">,</span>
</span><span class="line">  <span class="o">-</span><span class="mi">6</span><span class="p">,</span>
</span><span class="line">   <span class="mi">7</span><span class="o">]</span><span class="p">,</span> <span class="ss">dtype</span><span class="p">:</span> <span class="ss">:float32</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">solution</span> <span class="o">=</span> <span class="n">coeffs</span><span class="o">.</span><span class="n">solve</span><span class="p">(</span><span class="n">rhs</span><span class="p">)</span>
</span><span class="line"><span class="c1">#=&gt; [1.0, 2.0, -1.0]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Dimensional Interpolation: Introduction and Implementation in Ruby]]></title>
    <link href="http://v0dro.github.io/blog/2014/11/29/one-dimensional-interpolation-introduction-and-implementation-in-ruby/"/>
    <updated>2014-11-29T00:23:04+05:30</updated>
    <id>http://v0dro.github.io/blog/2014/11/29/one-dimensional-interpolation-introduction-and-implementation-in-ruby</id>
    <content type="html"><![CDATA[<p>Interpolation involves predicting the co-ordinates of a point given the co-ordinates of points around it. Interpolation can be done in one or more dimensions. In this article I will give you a brief introduction of one-dimensional interpolation and execute it on a sample data set using the <a href="https://github.com/v0dro/interpolation">interpolation</a> gem.</p>

<p>One dimensional interpolation involves considering consecutive points along the X-axis with known Y co-ordinates and predicting the Y co-ordinate for a given X co-ordinate.</p>

<p>There are several types of interpolation depending on the number of known points used for predicting the unknown point, and several methods to compute them, each with their own varying accuracy. Methods for interpolation include the classic Polynomial interpolation with Lagrange’s formula or spline interpolation using the concept of spline equations between points.</p>

<p>The spline method is found to be more accurate and hence that is what is used in the interpolation gem.</p>

<h2 id="common-interpolation-routines">Common Interpolation Routines</h2>

<p>Install the <code>interpolation</code> gem with <code>gem install interpolation</code>. Now lets see a few common interpolation routines and their implementation in Ruby:</p>

<h4 id="linear-interpolation">Linear Interpolation</h4>

<p>This is the simplest kind of interpolation. It involves simply considering two points such that <em>x[j]</em> &lt; <em>num</em> &lt; <em>x[j+1]</em>, where <em>num</em> is the unknown point, and considering the slope of the straight line between <em>(x[j], y[j] )</em> and <em>(x[j+1], y[j+1])</em>, predicts the Y co-ordinate using a simple linear polynomial.</p>

<p>Linear interpolation uses this equation:</p>

<script type="math/tex; mode=display">
\begin{align}
    y = (y[j] + \frac{(interpolant - x[j])}{(x[j + 1] - x[j])} \times (y[j + 1] - y[j])
\end{align}
</script>

<p>Here <em>interpolant</em> is the value of the X co-orinate whose corresponding Y-value needs to found.</p>

<p>Ruby code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;interpolation&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class="line"><span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="no">Math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">int</span> <span class="o">=</span> <span class="no">Interpolation</span><span class="o">::</span><span class="no">OneDimensional</span><span class="o">.</span><span class="n">new</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:linear</span>
</span><span class="line"><span class="n">int</span><span class="o">.</span><span class="n">interpolate</span> <span class="mi">35</span>
</span><span class="line"><span class="c1"># =&gt; -0.328</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="cubic-spline-interpolation">Cubic Spline Interpolation</h4>

<p>Cubic Spline interpolation defines a cubic spline equation for each set of points between the <em>1st</em> and <em>nth</em> points. Each equation is smooth in its first derivative and continuos in its second derivative.</p>

<p>So for example, if the points on a curve are labelled <em>i</em>, where <em>i = 1..n</em>, the equations representing any two points <em>i</em> and <em>i-1</em> will look like this:</p>

<script type="math/tex; mode=display">
\begin{align}
    a_{i}x^3_{i} + b_{i}x^2_{i} + c_{i}x_{i} + d_{i} = y_{i}
\end{align}
</script>

<script type="math/tex; mode=display">
\begin{align}
    a_{i-1}x^3_{i-1} + b_{i-1}x^2_{i-1} + c_{i-1}x_{i-1} + d_{i-1} = y_{i-1}
\end{align}
</script>

<p>Cubic spline interpolation involves finding the second derivative of all points <script type="math/tex"> y_{i} </script>, which can then be used for evaluating the cubic spline polynomial, which is a function of <em>x</em>, <em>y</em> and the second derivatives of <em>y</em>.</p>

<p>For more information read <a href="http://mathworld.wolfram.com/CubicSpline.html">this</a> resource.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;interpolation&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class="line"><span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="no">Math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">f</span> <span class="o">=</span> <span class="no">Interpolation</span><span class="o">::</span><span class="no">OneDimensional</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:cubic</span><span class="p">,</span> <span class="ss">sorted</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">interpolate</span><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; 12.287</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Analysis in RUby: Basic Data Manipulation and Plotting]]></title>
    <link href="http://v0dro.github.io/blog/2014/11/25/data-analysis-in-ruby-basic-data-manipulation-and-plotting/"/>
    <updated>2014-11-25T13:55:13+05:30</updated>
    <id>http://v0dro.github.io/blog/2014/11/25/data-analysis-in-ruby-basic-data-manipulation-and-plotting</id>
    <content type="html"><![CDATA[<p>daru (Data Analysis in RUby) is a ruby gem for performing various data analysis and manipulation tasks in Ruby. It draws inspiration from pandas (python) and aims to be completely cross-compatible between all ruby implementations (MRI/JRuby etc.) yet leverage the individual benefits that each interpreter offers (for example the speed of C in MRI), while offering a simple and powerful API for data analysis, manipulation and visualization.</p>

<p>In this first article on daru, I will show you some aspects of how daru handles data and some operations that can be performed on a real-life data set.</p>

<h2 id="getting-started">Getting Started</h2>

<p>daru consists of two major data structures:</p>

<ul>
  <li><strong>Vector</strong> - A named one-dimensional array-like structure.</li>
  <li><strong>DataFrame</strong> - A named spreadsheet-like two-dimensional frame of data.</li>
</ul>

<p>A <em>Vector</em> can either be represented by a Ruby Array, NMatrix(MRI) or MDArray(JRuby) internally. This allows for fast data manipulation in native code. Users can change the underlying implementation at will (demonstrated in the <a href="http://v0dro.github.io/blog/2015/02/24/data-analysis-in-ruby-part-2/">next</a> blog post).</p>

<p>Both of these can be indexed by the <code>Daru::Index</code> or <code>Daru::MultiIndex</code> class, which allows us to reference and operate on data by name instead of the traditional numeric indexing, and also perform index-based manipulation, equality and plotting operations.</p>

<h4 id="vector">Vector</h4>

<p>The easiest way to create a vector is to simply pass the elements to a <code>Daru::Vector</code> constructor:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">v</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span> <span class="o">[</span><span class="mi">23</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">11</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="c1"># This will create a Vector object v</span>
</span><span class="line">
</span><span class="line"><span class="c1"># =&gt; </span>
</span><span class="line"><span class="c1">##&lt;Daru::Vector:78168790 @name = nil @size = 5 &gt;</span>
</span><span class="line"><span class="c1">#   ni</span>
</span><span class="line"><span class="c1"># 0 23</span>
</span><span class="line"><span class="c1"># 1 44</span>
</span><span class="line"><span class="c1"># 2 66</span>
</span><span class="line"><span class="c1"># 3 22</span>
</span><span class="line"><span class="c1"># 4 11</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Since no name has been specified, the vector is named <code>nil</code>, and since no index has been specified either, a numeric index from 0..4 has been generated for the vector (leftmost column).</p>

<p>A better way to create vectors would be to specify the name and the indexes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">sherlock</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="ss">:sherlock</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="o">[</span><span class="ss">:pipe</span><span class="p">,</span> <span class="ss">:hat</span><span class="p">,</span> <span class="ss">:violin</span><span class="p">,</span> <span class="ss">:cloak</span><span class="p">,</span> <span class="ss">:shoes</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="c1">#=&gt; </span>
</span><span class="line"><span class="c1">#&lt;Daru::Vector:78061610 @name = sherlock @size = 5 &gt;</span>
</span><span class="line"><span class="c1">#         sherlock</span>
</span><span class="line"><span class="c1">#    pipe       3</span>
</span><span class="line"><span class="c1">#     hat       2</span>
</span><span class="line"><span class="c1">#  violin       1</span>
</span><span class="line"><span class="c1">#   cloak       1</span>
</span><span class="line"><span class="c1">#   shoes       2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This way we can clearly see the quantity of each item possesed by Sherlock.</p>

<p>Data can be retrieved with the <code>[]</code> operator:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">sherlock</span><span class="o">[</span><span class="ss">:pipe</span><span class="o">]</span> <span class="c1">#=&gt; 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="dataframe">DataFrame</h4>

<p>A basic DataFrame can be constructed by simply specifying the names of columns and their corresponding values in a hash:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">a</span><span class="p">:</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">50</span><span class="o">]</span><span class="p">},</span> <span class="nb">name</span><span class="p">:</span> <span class="ss">:normal</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># =&gt; </span>
</span><span class="line"><span class="c1">##&lt;Daru::DataFrame:77782370 @name = normal @size = 5&gt;</span>
</span><span class="line"><span class="c1">#            a      b </span>
</span><span class="line"><span class="c1">#     0      1     10 </span>
</span><span class="line"><span class="c1">#     1      2     20 </span>
</span><span class="line"><span class="c1">#     2      3     30 </span>
</span><span class="line"><span class="c1">#     3      4     40 </span>
</span><span class="line"><span class="c1">#     4      5     50 </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can also specify an index for the DataFrame alongwith the data and also specify the order in which the vectors should appear. Every vector in the DataFrame will carry the same index as the DataFrame once it has been created.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">plus_one</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">a</span><span class="p">:</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">50</span><span class="o">]</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="o">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">55</span><span class="o">]</span><span class="p">},</span> <span class="nb">name</span><span class="p">:</span> <span class="ss">:plus_one</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="o">[</span><span class="ss">:a</span><span class="p">,</span> <span class="ss">:e</span><span class="p">,</span> <span class="ss">:i</span><span class="p">,</span> <span class="ss">:o</span><span class="p">,</span> <span class="ss">:u</span><span class="o">]</span><span class="p">,</span> <span class="ss">order</span><span class="p">:</span> <span class="o">[</span><span class="ss">:c</span><span class="p">,</span> <span class="ss">:a</span><span class="p">,</span> <span class="ss">:b</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># =&gt; </span>
</span><span class="line"><span class="c1">##&lt;Daru::DataFrame:77605450 @name = plus_one @size = 5&gt;</span>
</span><span class="line"><span class="c1">#                c        a        b </span>
</span><span class="line"><span class="c1">#       a       11        1       10 </span>
</span><span class="line"><span class="c1">#       e       22        2       20 </span>
</span><span class="line"><span class="c1">#       i       33        3       30 </span>
</span><span class="line"><span class="c1">#       o       44        4       40 </span>
</span><span class="line"><span class="c1">#       u       55        5       50</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>daru will also add <code>nil</code> values to vectors that fall short of elements.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">missing</span> <span class="o">=</span>  <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">a</span><span class="p">:</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">},</span> <span class="nb">name</span><span class="p">:</span> <span class="ss">:missing</span><span class="p">)</span>
</span><span class="line"><span class="c1">#=&gt; </span>
</span><span class="line"><span class="c1">#&lt;Daru::DataFrame:76043900 @name = missing @size = 3&gt;</span>
</span><span class="line"><span class="c1">#                    a          b </span>
</span><span class="line"><span class="c1">#         0          1          1 </span>
</span><span class="line"><span class="c1">#         1          2        nil </span>
</span><span class="line"><span class="c1">#         2          3        nil </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Creating a DataFrame by specifying <code>Vector</code> objects in place of the values in the hash will correctly align the values according to the index of each vector. If a vector is missing an index present in another vector, that index will be added to the vector with the corresponding value set to <code>nil</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="o">[</span><span class="ss">:a</span><span class="p">,</span> <span class="ss">:e</span><span class="p">,</span> <span class="ss">:i</span><span class="p">,</span> <span class="ss">:o</span><span class="p">,</span> <span class="ss">:u</span><span class="o">]</span>
</span><span class="line"><span class="n">b</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span> <span class="o">[</span><span class="mi">43</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">13</span><span class="o">]</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="o">[</span><span class="ss">:i</span><span class="p">,</span> <span class="ss">:a</span><span class="p">,</span> <span class="ss">:queen</span><span class="o">]</span>
</span><span class="line"><span class="n">on_steroids</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">a</span><span class="p">:</span> <span class="n">a</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="n">b</span><span class="p">},</span> <span class="nb">name</span><span class="p">:</span> <span class="ss">:on_steroids</span><span class="p">)</span>
</span><span class="line"><span class="c1">#=&gt; </span>
</span><span class="line"><span class="c1">#&lt;Daru::DataFrame:75841450 @name = on_steroids @size = 6&gt;</span>
</span><span class="line"><span class="c1">#                    a          b </span>
</span><span class="line"><span class="c1">#         a          1         22 </span>
</span><span class="line"><span class="c1">#         e          2        nil </span>
</span><span class="line"><span class="c1">#         i          3         43 </span>
</span><span class="line"><span class="c1">#         o          4        nil </span>
</span><span class="line"><span class="c1">#     queen        nil         13 </span>
</span><span class="line"><span class="c1">#         u          5        nil </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A DataFrame can be constructed from multiple sources:</p>

<ul>
  <li>To construct by columns:
    <ul>
      <li><strong>Array of hashes</strong> - Where the key of each hash is the name of the column to which the value belongs.</li>
      <li><strong>Name-Array Hash</strong> - Where the hash key is set as the name of the vector and the data the corresponding value.</li>
      <li><strong>Name-Vector Hash</strong> - This is the most advanced way of creating a DataFrame. Treats the hash key as the name of the vector. Also aligns the data correctly based on index.</li>
      <li><strong>Array of Arrays</strong> - Each sub array will be considered as a Vector in the DataFrame.</li>
    </ul>
  </li>
  <li>To construct by rows using the <code>.rows</code> class method:
    <ul>
      <li><strong>Array of Arrays</strong> - This will treat each sub-array as an independent row.</li>
      <li><strong>Array of Vectors</strong> - Uses each Vector in the Array as a row of the DataFrame. Sets vector names according to the index of the Vector. Aligns vector elements by index.</li>
    </ul>
  </li>
</ul>

<h2 id="handling-data">Handling Data</h2>

<p>Now that you have a basic idea about representing data in daru, lets see some more features of daru by loading some real-life data from a CSV file and performing some operations on it.</p>

<p>For this purpose, we will use <a href="https://rubygems.org/gems/iruby">iruby</a> notebook, with which daru is compatible. iruby provides a great interface for visualizing and playing around with data. I highly recommend installing it for full utilization of this tutorial.</p>

<h4 id="loading-data-from-files">Loading Data From Files</h4>

<p>Let us load some data about the music listening history of one user from this subset of the <a href="https://github.com/v0dro/daru/blob/master/spec/fixtures/music_data.tsv">Last.fm data set</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">from_csv</span> <span class="s1">&#39;music_data.tsv&#39;</span><span class="p">,</span> <span class="ss">col_sep</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://v0dro.github.io/images/daru1/create_music_df.png" title="'Create a DataFrame from a TSV file.'" /></p>

<p>As you can see the <em>timestamp</em> field is in a somewhat non-Ruby format which is pretty difficult for the default Time class to understand, so we destructively map time zone information (IST in this case) and then change every <em>timestamp</em> string field into a Ruby <em>Time</em> object, so that operations on time can be easily performed.</p>

<p>Notice the syntax for referencing a particular vector. Use ‘row’ for referencing any row.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">df</span><span class="o">.</span><span class="n">timestamp</span><span class="o">.</span><span class="n">recode!</span> <span class="p">{</span> <span class="o">|</span><span class="n">ts</span><span class="o">|</span> <span class="n">ts</span> <span class="o">+=</span> <span class="s2">&quot;+5:30&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img class="center" src="http://v0dro.github.io/images/daru1/dmap_vector.png" title="'Destructively map a given vector.'" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;date&#39;</span>
</span><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">recode</span><span class="p">(</span><span class="ss">:row</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class="line">  <span class="n">row</span><span class="o">[</span><span class="ss">:timestamp</span><span class="o">]</span> <span class="o">=</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">row</span><span class="o">[</span><span class="ss">:timestamp</span><span class="o">]</span><span class="p">,</span> <span class="s1">&#39;%Y-%m-%dT%H:%M:%SZ%z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_time</span>
</span><span class="line">  <span class="n">row</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://v0dro.github.io/images/daru1/df_row_map.png" title="center 'Map all rows of a DataFrame.'" /></p>

<h4 id="basic-querying">Basic Querying</h4>

<p>A bunch of rows can be selected by specifying a range:</p>

<p><code>df.row[900..923]</code></p>

<p><img class="center" src="http://v0dro.github.io/images/daru1/range_row_access.png" title="center 'Accessing rows with a range'" /></p>

<h4 id="data-analysis">Data Analysis</h4>

<p>Lets dive deeper by actually trying to extract something useful from the data that we have. Say we want to know the name of the artist heard the maximum number of times. So we create a Vector which consists of the names of the artists as the index and the number of times the name appears in the data as the corresponding values:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Group by artist name and call &#39;size&#39; to see the number of rows each artist populates.</span>
</span><span class="line"><span class="n">artists</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="ss">:artname</span><span class="p">)</span><span class="o">.</span><span class="n">size</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://v0dro.github.io/images/daru1/get_max_artists.png" title="'Create a vector of artist names vs number of times they appear.'" /></p>

<p>To get the maximum value out of these, use <code>#max_index</code>. This will return a Vector which has the max:</p>

<p><code>count.max_index</code></p>

<p><img class="center" src="http://v0dro.github.io/images/daru1/artists_max.png" title="'Obtain the most heard artist.'" /></p>

<h4 id="plotting">Plotting</h4>

<p>daru uses <a href="https://github.com/domitry/nyaplot">Nyaplot</a> for plotting, which is an optional dependency. Install nyaplot with <code>gem install nyaplot</code> and proceed.</p>

<p>To demonstrate, lets find the top ten artists heard by this user and plot the number of times their songs have been heard against their names in a bar graph. For this, use the <code>#sort</code> function, which will preserve the indexing of the vector.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">top_ten</span> <span class="o">=</span> <span class="n">artists</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="ss">ascending</span><span class="p">:</span> <span class="kp">false</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">top_ten</span><span class="o">.</span><span class="n">plot</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:bar</span> <span class="k">do</span> <span class="o">|</span><span class="n">plt</span><span class="o">|</span>
</span><span class="line">  <span class="n">plt</span><span class="o">.</span><span class="n">width</span> <span class="mi">1120</span>
</span><span class="line">  <span class="n">plt</span><span class="o">.</span><span class="n">height</span> <span class="mi">500</span>
</span><span class="line">  <span class="n">plt</span><span class="o">.</span><span class="n">legend</span> <span class="kp">true</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://v0dro.github.io/images/daru1/plot_top_ten.png" title="'Top ten artists plotted.'" /></p>

<p>More examples can be found in <a href="https://github.com/v0dro/daru#notebooks">the notebooks section of the daru README</a>.</p>

<h2 id="further-reading">Further Reading</h2>

<ul>
  <li>This was but a very small subset of the capabilities of daru. Go through the <a href="https://rubygems.org/gems/daru">documentation</a> for more methods of analysing your data with daru.</li>
  <li>You can find all the above examples implemented in <a href="http://nbviewer.ipython.org/github/v0dro/daru/blob/master/notebooks/intro_with_music_data_.ipynb">this notebook</a>.</li>
  <li>Contribute to daru on <a href="https://github.com/v0dro/daru">github</a>. Any contributions will be greatly appreciated!</li>
  <li>Many thanks to <a href="http://www.last.fm/">last.fm</a> for providing the data.</li>
  <li>Check out the <a href="http://v0dro.github.io/blog/2015/02/24/data-analysis-in-ruby-part-2/">next blog post in this series</a>, elaborating on the next release of daru.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing Matrix Elements When Expressed as a Contiguous 1D Array]]></title>
    <link href="http://v0dro.github.io/blog/2014/10/12/accessing-matrix-elements-when-expressed-as-a-contiguous-1d-array/"/>
    <updated>2014-10-12T18:52:10+05:30</updated>
    <id>http://v0dro.github.io/blog/2014/10/12/accessing-matrix-elements-when-expressed-as-a-contiguous-1d-array</id>
    <content type="html"><![CDATA[<p>This post will talk about methods to access different types of matrix elements (diagonals, columns, rows, etc.) when a matrix is expressed as a continguous 1D array.</p>

<p>Recently, I was working on implementing a matrix inversion routine using the Gauss-Jordan elimination technique in C++. This was part of the NMatrix ruby gem, and because of the limitations imposed by trying to interface a dynamic language like Ruby with C++, the elements of the NMatrix object had to expressed as a 1D contiguous C++ array for computation of the inverse.</p>

<p>The in-place Gauss-Jordan matrix inversion technique uses many matrix elements in every pass. Lets see some simple equations that can be used for accessing different types of elements in a matrix in a loop.</p>

<h4 id="diagonals">Diagonals</h4>

<p>Lets say we have a square matrix A with shape <em>M</em>. If <em>k</em> is iterator we are using for going over each diagonal element of the matrix, then the equation will be something like <script type="math/tex"> k * (M + 1) </script>.</p>

<p>A for loop using the equation should look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">M</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">A</span><span class="p">[</span><span class="n">k</span> <span class="o">*</span> <span class="p">(</span><span class="n">M</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// This will print all the diagonal elements of a square matrix.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="rows">Rows</h4>

<p>To iterate over each element in a given row of a matrix, use <script type="math/tex"> row*M + col </script>. Here <code>row</code> is the fixed row and <code>col</code> goes from 0 to M-1.</p>

<h4 id="columns">Columns</h4>

<p>To iterate over each element in a given column of a matrix, use <script type="math/tex"> col*M + row </script>. Here <code>col</code> is the fixed column and <code>row</code> goes from 0 to M-1.</p>

<h4 id="general">General</h4>

<p>In general the equation <script type="math/tex"> row*NCOLS + col </script> will yield a matrix element with row index <code>row</code> and column index <code>col</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Overview of Automatic Speech Recognition]]></title>
    <link href="http://v0dro.github.io/blog/2014/10/01/an-overview-of-automatic-speech-recognition/"/>
    <updated>2014-10-01T18:59:11+05:30</updated>
    <id>http://v0dro.github.io/blog/2014/10/01/an-overview-of-automatic-speech-recognition</id>
    <content type="html"><![CDATA[<p>Speech is the fundamental method of communication between human beings. Everyone within Human civilization, whether literate or illiterate, can communicate with the people around them through speech.</p>

<p>Using a computer can be a scary proposition for most people. It involves GUIs, text, images, video; intangible entities that many first time users are unable to relate to.</p>

<p>In contrast to the rapid evolution of computing, development of modes of communication between human and computer has been painfully slow and has been primarily restricted to text, images, videos and the like. </p>

<p>This is where the idea of Automatic Speech Recognition comes in. It aims to bridge the communication gap between humans and computers and bring it as close as possible to a human-human interaction. In aims to teach a computer the primary method of communication between humans: speech.</p>

<p>To cite Wikipedia, Automatic Speech Recognition is the translation of spoken words into text. Once we have text (which is the most portable method of information transfer), we can do absolutely anything with it.</p>

<p>In this article, we will be gaining a brief overview of Automatic Speech Recognition (ASR), and take a look at a few algorithms that are used for the same. Most of the methods listed here are language neutral, unless explicitly stated. Let us start with how speech is actually produced by a normal Human being.</p>

<p>The primary organ of speech production is the Vocal Tract. The lungs push out the air, which passes through the vocal tract and mouth and then is released into the atmosphere. On its way out of the mouth, the air is manipulated by a series of obstacles present in the vocal tract, nose and mouth. These manipulations in the raw air pushed through the lungs manifest as speech. </p>

<p>Air first passes through the glottis, which is the combination of the vocal folds (vocal cords) and the space in between the folds. It then passes through the mouth, where the tongue plays a major role in overall speech modulation. Factors like constriction of the vocal tract (for /g/ in ‘ghost’), aspirated stops and nasal tones play a major role in modulating the overall sound wave.</p>

<p><img class="center" src="http://v0dro.github.io/images/speech_recognition/glottis.jpg" title="&#34;An Diagram Of The Human Glottis&#34;" alt="&#34;An Diagram Of The Human Glottis&#34;" /></p>

<p>The primary organ of speech production is the Vocal Tract. The lungs push out the air, which passes through the vocal tract and mouth and then is released into the atmosphere. On its way out of the mouth, the air is manipulated by a series of obstacles present in the vocal tract, nose and mouth. These manipulations in the raw air pushed through the lungs manifest as speech. </p>

<p>Air first passes through the glottis, which is the combination of the vocal folds (vocal cords) and the space in between the folds. It then passes through the mouth, where the tongue plays a major role in overall speech modulation. Factors like constriction of the vocal tract (for /g/ in ‘ghost’), aspirated stops and nasal tones play a major role in modulating the overall sound wave. </p>

<p>For the purpose of processing speech using computers, there is a need to digitize the signal. When we receive a speech signal in a computer, we first sample the analog signal at a frequency such that the original waveform is completely preserved. We then perform some basic pre-filtering; for example, observations indicate that human speech is the range of 0-4 kHz, so we pass the sampled signal through a low-pass filter to remove any frequecies above 4 kHz.</p>

<p>Before proceeding with the working of an ASR, we make some fundamental assumptions: 
* Vocal tract changes shape rather slowly in continuos speech and it can be assumed that the vocal tract has fixed shape and characterestics for 10 ms. Thus on an average, the shape of the vocal tract changes every 10 ms.
* Source of excitation (lungs) and vocal tract are independent of each other.</p>

<p>To extract any meaning from sound, we need to make certain measurements from the sampled wave. Let us explore these one by one:</p>

<ul>
  <li>Zero Crossing Count - This is number of times the signal crosses the zero-line per unit time. This gives an idea of the frequency of the wave per unit time.</li>
  <li>Energy - Energy of a signal is represented by the square of each sample of the signal, over the entire duration of the signal. </li>
</ul>

<p><img class="center" src="http://v0dro.github.io/images/speech_recognition/energy_equation.jpg" title="&#34;Energy Equation&#34;" alt="&#34;Energy Equation&#34;" /></p>

<ul>
  <li>Pitch period of utterances - It is found that most utterances have a certain ‘pseudo periodicity’ associated with them. This is called the pitch period.</li>
</ul>

<p>Speech can be classified into two broad categories - VOICED speech(top) and UNVOICED speech(bottom).</p>

<p><img class="center" src="http://v0dro.github.io/images/speech_recognition/voiced_speech.jpg" title="&#34;Waveform of voiced speech&#34;" alt="&#34;Waveform of voiced speech&#34;" />
<img class="center" src="http://v0dro.github.io/images/speech_recognition/unvoiced_speech.jpg" title="&#34;Waveform of unvoiced speech&#34;" alt="&#34;Waveform of unvoiced speech&#34;" /></p>

<p>Voiced speech is characterized in a signal with many undulations (ups and downs). Voiced signals tend to be louder like the vowels /<em>a</em>/, /<em>e</em>/, /<em>i</em>/, /<em>u</em>/, /<em>o</em>/. Unvoiced speech is more of a high frequency, low energy signal, which makes it difficult to interpret since it is difficult to distinguish it from noise. Unvoiced signals, by contrast, do not entail the use of the vocal cords, for example, /<em>s</em>/, /<em>z</em>/, /<em>f</em>/ and /<em>v</em>/. </p>

<p>A basic ASR will consist of three basic steps - </p>

<ul>
  <li>End Point Detection - Marking the beginning and ending points of the actual utterance of the word in the given speech signal is called End Point Detection.</li>
  <li>Phoneme<sup id="fnref:3"><a href="#fn:3" class="footnote">1</a></sup> Segmentation - Segregating individual phonemes from a speech signal is called Phoneme Segmentation.</li>
  <li>Phoneme Identification - Recognizing the phoneme present in each phoneme segment of the waveform is called Phoneme Identification. </li>
</ul>

<p>Every step in the speech recognition process is an intricate algorithm in itself, and over the years, numerous approaches have been suggested by many people. Let us look at a few simple ones: </p>

<ul>
  <li>End Point Detection:
    <ul>
      <li>We make use of the Zero Crossing Count and Energy parameters of a sound wave for calculating the end points of an utterance in an input sound wave.- It assumes that the first 100 ms of the speech waveform are noise. Based on this assumption, it comes up with the ZCC and energy of the noise signal, through which it computes the points where the speech segment begins and ends. A detailed discussion would be out of the scope of this article, but those interested can always go through the paper written by Rabiner and Sambur<sup id="fnref:1"><a href="#fn:1" class="footnote">2</a></sup>.</li>
    </ul>
  </li>
</ul>

<p><img class="center" src="http://v0dro.github.io/images/speech_recognition/waveform_and_end_points.jpg" title="&#34;A speech waveform (top) and the detected End Points (bottom)&#34;" alt="&#34;A speech waveform (top) and the detected End Points (bottom)&#34;" /></p>

<ul>
  <li>Phoneme Segmentation
    <ul>
      <li>This step in the process is the most important step because what Phoneme gets detected from a particular speech waveform is completely dependent on what wave we pass to the Phoneme Recognition algorithm. </li>
      <li>The algorithm proposed by Bapat and Nagalkar<sup id="fnref:2"><a href="#fn:2" class="footnote">3</a></sup> functions based on the fact that each phoneme will have a different energy and amplitude, and whenever a variation drastic deviation in these parameters is detected in the sound wave, it is marked as a different phoneme.</li>
    </ul>
  </li>
  <li>Phoneme Recognition
    <ul>
      <li>This is by far the most intriguing and researched. Extensive work has been done in this domain, ranging from simple spectral energy analysis of signals, to more complicated Neural Network algorithms. One can find several hypotheses all over the internet regarding this domain. A discussion on these algorithms would get too large, but we will discuss a very simple algorithm which utilises the frequency domain representation of a signal to segregate ‘varnas’ or classes of Phonemes found in the Devnagiri script: 
        <ul>
          <li>Each class of phonemes in Devnagiri is generated using the same organ but with different air pressure and time of touch for each individual alphabet. This property of Devangiri can be used for detecting only the class of a particular phoneme. </li>
          <li>If we divide the entire frequency axis of 4 kHz into 17 bands of ~ 235 Hz each, and observe some sample utterances through this grid, we find that the phonemes of a particular class show peak frequencies in the same band or a very predictable set of 2-3 bands. Taking note of these peaks, one can identify the phoneme class by observing which bands the peaks fall into. </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>We have discussed some major characterestics and components of an Automatic Speech Recognition engine, and have also seen some interesting facets of digital signals along the way. </p>

<p>It is interesting to note how some basic principles of Digital Signal Processing can be applied to the real world for useful applications. </p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:3">
      <p>Phoneme - A phoneme is a basic unit of a language’s phonology, which is combined with other phonemes to form meaningful units such as words. Alternatively, a phoneme is a set of phones or a set of sound features that are thought of as the same element within the phonology of a particular language.  <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:1">
      <p><a href="http://web.cs.wpi.edu/~cs529/f04/slides/RS75.pdf">An Algorithm For Determining The Endpoints For Isolated Utterances ; L.R. Rabiner and M.R. Sambur</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;arnumber=4798390&amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fiel5%2F4796894%2F4798312%2F04798390.pdf%3Farnumber%3D4798390">Phonetic Speech Analysis for Speech to Text; A. V. Bapat, L. K. Nagalkar</a> <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Travel] Hampi-Bengaluru-Allepy Part 2]]></title>
    <link href="http://v0dro.github.io/blog/2014/09/28/travel-hampi-bengaluru-allepy-part-2/"/>
    <updated>2014-09-28T16:14:07+05:30</updated>
    <id>http://v0dro.github.io/blog/2014/09/28/travel-hampi-bengaluru-allepy-part-2</id>
    <content type="html"><![CDATA[<h2 id="hampi---day-2">Hampi - Day 2</h2>

<p>The day started at 5 am, and we proceeded to Matanga Hill to watch the sunrise, reaching the foot after a 15 min walk. Matanga Hill has special significance in Hindu mythology, this was the place where <a href="http://en.wikipedia.org/wiki/Hanuman">Hanuman</a> and <a href="http://en.wikipedia.org/wiki/Sugriva">Sugreeva</a> took shelter after being chased by <a href="http://en.wikipedia.org/wiki/Vali_(Ramayana)">Vali</a>, who was ultimately killed by <a href="http://en.wikipedia.org/wiki/Rama">Rama</a>.</p>

<p>As we started climbing the hill, a Naga Yogi waiting at the bottom of the hill asked us to register with the police station before going up the hill. We told him the station was closed, so he guided us up the hill. Along the way he told us that he had converted to a Naga Yogi after a stint at a multinational bank and now lived in a cave up the hill (wow), performing his sadhu duties in the temple town (which blew us away). The climb turned out to be pretty trecherous, with steep cliffs and a very narrow path leading uphill. He guided us to the rooftop of the Veerbhadra Temple present at the top of Matanga Hill, where the sunrise can be experienced best, and set off on his own after inviting us to his cave for tea once we we were done seeing the sunrise.</p>

<p><img class="center" src="http://v0dro.github.io/images/hampi-bengaluru-allepy/matanga_sunrise.JPG" width="600" height="600" title="'Sunrise from Matanga Hill'" /></p>

<p><img class="center" src="http://v0dro.github.io/images/hampi-bengaluru-allepy/matanga_view.JPG" width="600" height="600" title="'View of Achutarya Temple from Matanga Hill'" /></p>

<p>After seeing the sunrise and having some great black tea in our guide’s cave, we started our descent, which took around 40 mins, mainly because of the jagged structure of the rocks. A fantastic breakfast of idli and tea awaited us at the bottom. Breakfast food carts are spread thorughout Hampi and serve cheap, tasty and filling food.</p>

<p>We then proceeded to our cycle tour, which would take us through the outer parts of Hampi; first stopping at the <a href="http://hampi.in/kadalekalu-ganesha">Kadalekalu Ganesha</a> (Kadalekalu because the statue’s belly resembles a Bengal Gram) temple, which houses a massive statue of Ganpati, the Hindu god of wisdom. The statue is now in ruins, after being destroyed by the Deccan Muslim rulers, who thought there was a hidden treasure inside the stomach of the statue, because of its size.</p>

<p><img class="center" src="http://v0dro.github.io/images/hampi-bengaluru-allepy/ganpati_kk.JPG" width="500" height="400" title="'Kadalekalu Ganesha statue'" /></p>

<p>Then we proceeded to the statue of Narsimha and Laxmi. This was a huge monolith of a statue once upon a time, but it was destroyed by the invading army. A lot of it has been restored but it appears nowhere near its former glory. Right next to this is the partially submerged Shivalinga, which happens to be the 2nd largest in the country.</p>

<p><img class="center" src="http://v0dro.github.io/images/hampi-bengaluru-allepy/narsimha.JPG" width="500" height="400" title="'The partially restored statue of Narsimha and Laxmi'" /></p>

<p>We then cycled towards the underground Shiva temple, which was pretty mind-blowing. The temple’s roof is on ground level and the rest of the structure underground, the inner mantapas are kept full of water. Then cycling towards the Lotus Palace we came across the Mohammedan Watch Tower, which was a structure made for the Muslim troops in King Krishnadevaraya’s army. This structure sports typical Persian architecture, the only structure of its kind in Hampi.</p>

<p>The Lotus Palace is where the two Queens of King Krishnadevaraya stayed. The main palace has a state-of-the-art water cooling system, with pipes of water circulating around the entire palace to keep the occupants cool during the summer. </p>

<p><img class="center" src="http://v0dro.github.io/images/hampi-bengaluru-allepy/lotus_mahal.JPG" width="600" height="600" title="'The Lotus Mahal!!'" /></p>

<p>Behind this was a massive stable for the royal elephants, which housed all 11 of them. The Lotus Mahal (palace) consisted of two palaces, called Water Palace and the Queen’s Palace, both of which are now in ruins.</p>

<p><img class="center" src="http://v0dro.github.io/images/hampi-bengaluru-allepy/elephant_house.JPG" width="600" height="600" title="'Elephant Stable'" /></p>

<p>We cycled to the King’s enclosure, which had a whole lot of podiums and open spaces for conducting festivities. Dusshera was celebrated with great pomp here. There was an especially large podium for the King to be seated on so that he could watch all the proceedings from a vantage point.</p>

<p><img class="left" src="http://v0dro.github.io/images/hampi-bengaluru-allepy/enclosure.JPG" width="360" height="350" title="'The King's Enclosure and his podium'" /></p>

<p><img class="right" src="http://v0dro.github.io/images/hampi-bengaluru-allepy/bath.JPG" width="360" height="350" title="'The Queens Bath'" /></p>

<p>The Queen’s bath was just a few minutes cycle ride from here and that is where we went next. This was a huge tank for the Queen to take a bath in, made in Indo-Arabic architecture. </p>

<p>The cycle ride back to the center of Hampi (and our hotel) was long but extremely plesant. The route was lush green with many streams and small waterfalls.</p>

<p><img class="center" src="http://v0dro.github.io/images/hampi-bengaluru-allepy/cycle_ride.JPG" width="500" height="500" title="'The cycle ride back to Hampi'" /></p>

<p>Upon returning we had some late lunch at a South Indian restaurant (Venkateshwara Restaurant), and left for Hospet to catch our bus to Bangalore, which left from there at night.</p>

<p>The bus stop at Hospet is pretty horrible and since we were forced to book our tickets through some petty shop in Hampi, the bus came 3 hours late and the driver stopped at the particular bus stop only because we were calling him repeatedly and telling him and that we’re waiting. Go for government transport whenever possible!</p>

<p>Stay tuned for day 3!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[code]Generalized Linear Models: Introduction and Implementation in Ruby.]]></title>
    <link href="http://v0dro.github.io/blog/2014/09/21/code-generalized-linear-models-introduction-and-implementation-in-ruby/"/>
    <updated>2014-09-21T19:05:21+05:30</updated>
    <id>http://v0dro.github.io/blog/2014/09/21/code-generalized-linear-models-introduction-and-implementation-in-ruby</id>
    <content type="html"><![CDATA[<h2 id="overview">Overview</h2>

<p>Most of us are well acquainted with linear regression and its use in analysig the relationship of one dataset with another. Linear regression basically shows the (possibly) linear relationship between one or more independent variables and a single dependent variable. But what if this relationship is not linear and the dependent and independent variables are associated with one another through some special function? This is where Generalized Linear Models (or GLMs) come in. This article will explain some core <a href="http://en.wikipedia.org/wiki/Generalized_linear_model">GLM</a> concepts and their implementation in Ruby using the <a href="https://github.com/sciruby/statsample-glm">statsample-glm</a> gem.</p>

<h2 id="generalized-linear-models-basics">Generalized Linear Models Basics</h2>

<p>The basic linear regression equation relating the dependent varible <em>y</em> with the independent variable <em>x</em> looks something like 
<script type="math/tex">
\begin{align}
    y = \beta_{0} + x_{1}*\beta_{1} + x_{2}*\beta_{2}...
\end{align}
</script>
This is the equation of a straight line, with <script type="math/tex"> \beta_{0} </script> denoting the intercept of the line with the Y axis and <script type="math/tex"> \beta_{1} </script> denoting the slope of the line. GLMs take this a step further. They try to establish a relationship between <em>x</em> and <em>y</em> through <em>another function</em> <strong>g(x)</strong>, which is called the <em>link function</em>. This function depends on the probability distribution displayed by the independent variables and their corresponding y values. In its simplest form, it can be denoted as <em>y = g(x)</em>.</p>

<p>GLM can be used to model numerous relations, depending on the distribution of the dependent conditional on the independent variables. We will first explore the various kinds of GLMs and their defining parameters and then understand the different methods employed in finding the co-efficients. The most common GLMs are:</p>

<ul>
  <li>Logistic (or logit) regression.</li>
  <li>Normal regression.</li>
  <li>Poisson regression.</li>
  <li>Probit regression.</li>
</ul>

<p>Let’s see all of the above one by one.</p>

<h4 id="logisitic-regression">Logisitic Regression</h4>
<p>Logistic, or Logit can be said to be one of the most fundamental of the GLMs. It is mainly used in cases where the independent variables show a binomial distribution (conditional on the dependent). In case of the binomial distribution, the number of successes are modelled on a fixed number of tries. The Bernoulli distribution is a special case of binomial where the outcome is either 0 or 1 (which is the case in the example at the bottom of this post). By using logit link function, one can determine the maximum probability of the occurence of each independent random variable. The values so obtained can be used to plot a sigmoid graph of <em>x</em> vs <em>y</em>, using which one can predict the probability of occurence of any random varible not already in the dataset. The defining parameter of the logistic is the probability <em>y</em>.</p>

<p>The logit link function looks something like 
<script type="math/tex">
\begin{align}
    y = \frac{e^{(\beta_{0} + x*\beta_{1})}}{1 + e^{(\beta_{0} + x*\beta_{1})}}
\end{align}
</script>
, where y is the probability for the given value of x.</p>

<p>Of special interest is the meaning of the values of the coefficients. In case on linear regression, <script type="math/tex"> \beta_{0} </script> merely denotes the intercept while <script type="math/tex"> \beta_{1} </script> is the slope of the line. However, here, because of the nature of the link function, the coefficient <script type="math/tex"> \beta_{1} </script> of the independent variable is interpreted as “for every 1 increase in <em>x</em> the odds of <em>y</em> increase by <script type="math/tex"> e^{\beta_{1}} </script> times”.</p>

<p>One thing that puzzled me when I started off with regression was the purpose of having several variables <script type="math/tex"> (x_{1}, x_{2}...) </script> in the same regression model at times. The purpose of multiple independent variables against a single dependent is so that we can compare the odds of <script type="math/tex"> x_{1} </script> against <script type="math/tex"> x_{2} </script>.  So basically, if you have multiple variables, it is to compare the effect on the dependent of one variable, when the others are constant. To compare the effect of one variable without considering the others, one could use an  independent regression for each one.</p>

<p>The logistic graph generally looks like this:</p>

<p><img class="center" src="http://v0dro.github.io/images/glm/logistic.gif" title="&#34;Generic Graph of Logistic Regression.&#34;" alt="&#34;Generic Graph of Logistic Regression.&#34;" /></p>

<h4 id="normal-regression">Normal Regression</h4>

<p>Normal regression is used when the DEPENDENT variable exhibits a normal probability distribution, CONDITIONAL ON THE independent variables. The independents are assumed to be normal even in a simple linear or multiple regression, and the coefficients of a normal are more easily calculated using simple linear regression methods. But since this is another very important and commonly found data set, we will look into it.</p>

<p>Normally distributed data is symmetric about the center and its mean is equal to its median. Commonly found normal distributions are heights of people and errors in measurement. The defining parameters of a normal distribution are the mean <script type="math/tex"> \mu </script> and variance <script type="math/tex"> \sigma^2 </script>. The link function is simply <script type="math/tex"> y = x*\beta_{1} </script> if no constant is present. The coefficient of the independent variable is interpreted in exactly the same manner as it is for linear regression.</p>

<p>A normal regression graph generally looks like this:</p>

<p><img class="center" src="http://v0dro.github.io/images/glm/normal.png" title="&#34;Generic Graph of Normal Regression&#34;" alt="&#34;Generic Graph of Normal Regression&#34;" /></p>

<h4 id="poisson-regression">Poisson Regression</h4>

<p>A dataset often posseses a Poisson distribution when the data is measured by taking a very large number of trials, each with a small probability of success. For example, the number of earthquakes taking place in a region per year. It is mainly used in case of count data and contingency tables. Binomial distributions often converge into Poisson when the number of cases(n) is large and probability of success(p) small.</p>

<p>The poisson is completely defined by the rate parameter <script type="math/tex"> \lambda </script>. The link function is <script type="math/tex"> ln(y) = x*\beta_{1} </script>, which can be written as <script type="math/tex"> y = e^{x*\beta_{1}} </script>. Because the link function is logarithmic, it is also referred to as log-linear regression.</p>

<p>The meaning of the co-efficient in the case of poisson is “for increase 1 of <em>x</em>, <em>y</em> changes <script type="math/tex"> y = e^\beta_{1} </script> times.”.</p>

<p>A poisson graph looks something like this:</p>

<p><img class="center" src="http://v0dro.github.io/images/glm/poisson.png" title="&#34;Graph of Poisson Regression&#34;" alt="&#34;Graph of Poisson Regression&#34;" /></p>

<h4 id="probit-regression">Probit Regression</h4>

<p>Probit is used for modeling binary outcome varialbles. Probit is similar to  logit, the choice between the two largely being a matter of personal preference.</p>

<p>In the probit model, the inverse standard normal distribution of the probability is modeled as a linear combination of the predictors (in simple terms, something like <script type="math/tex"> y = \Phi(\beta_{0} + x_{1}*\beta_{1}...) </script> , where <script type="math/tex"> \Phi </script> is the CDF of the standard normal). Therefore, the link function can be written as <script type="math/tex"> z = \Phi^{-1}(p) </script> where <script type="math/tex"> \Phi(z) </script> is the standard normal cumulative density function (here <em>p</em> is probability of the occurence of a random variable <em>x</em> and <em>z</em> is the z-score of the y value).</p>

<p>The fitted mean values of the probit are calculated by setting the upper limit of the normal CDF integral as <script type="math/tex"> x*\beta_{1} </script>, and lower limit as <script type="math/tex"> -\infty </script>. This is so because evaluating any normally distributed random number over its CDF will yield the probability of its occurence, which is what we expect from the fitted values of a probit.</p>

<p>The coefficient of <em>x</em> is interpreted as “one unit change in <em>x</em> leads to a change <script type="math/tex"> \beta_{1} </script> in the z-score of <em>y</em>”.</p>

<p>Looking at the graph of probit, one can see the similarities between logit and probit:</p>

<p><img class="center" src="http://v0dro.github.io/images/glm/probit.png" /></p>

<h2 id="finding-the-coefficients-of-a-glm">Finding the coefficients of a GLM</h2>

<p>There are two major methods of finding the coefficients of a GLM:</p>

<ul>
  <li>Maximum Likelihood Estimation (MLE).</li>
  <li>Iteratively Reweighed Least Squares (IRLS).</li>
</ul>

<h4 id="maximum-likelihood-estimation">Maximum Likelihood Estimation</h4>

<p>The most obvious way of finding the coefficients of the given regression analysis is by maximizing the likelihood function of the distribution that the independent variables belong to. This becomes much easier when we take the natural logarithm of the likelihood function. Hence, the name ‘Maximum Likelihood Estimation’. The Newton-Raphson method is used to this effect for maximizing the beta values (coefficients) of the log likelihood function.</p>

<p>The first derivative of the log likelihood wrt to <script type="math/tex"> \beta </script> is calculated for all the <script type="math/tex"> x_{i} </script> terms (this is the jacobian matrix), and so is the second derivative (this is the hessian matrix). The coefficient is estimated by first choosing an initial estimate for <script type="math/tex"> x_{old} </script>, and then iteratively correcting this initial estimate by trying to bring the equation</p>

<script type="math/tex; mode=display"> 
\begin{align}
x_{new} = x_{old} - inverse(hessian)*jacobian   ..(1) 
\end{align}
</script>

<p>to equality (with a pre-set tolerance level). A good implementation of MLE can be found <a href="http://petertessin.com/MaxLik.pdf">here</a>.</p>

<h4 id="iteratively-reweighed-least-squares">Iteratively Reweighed Least Squares</h4>

<p>Another useful but somewhat slower method of estimating the regression coefficients of a dataset is Iteratively Reweighed Least Squares. It is slower mainly because of the number of co-efficients involved and the somewhat extra memory that is taken up by the various matrices used by this method. The upside of IRLS is that it is very easy to implement as is easily extensible to any kind of GLM.</p>

<p>The IRLS method also ultimately boils to the equation of the Newton Raphson (1), but the key difference between the two is that in MLE we try to maximize the likelihood but in IRLS we try to minimize the errors. Therefore, the manner in which the hessian and jacobian matrices are calculated is quite different. The IRLS equation is written as:</p>

<script type="math/tex; mode=display">
\begin{align}
    b_{new} = b_{old} - inverse(X'*W*X)*(X'*(y - \mu))
\end{align}
</script>

<p>Here, the hessian matrix is <script type="math/tex"> -(X'*W*X) </script> and the jacobian is <script type="math/tex"> (X'*(y - \mu)) </script>. Let’s see the significance of each term in each of these matrices:</p>

<ul>
  <li><em>X</em> - The matrix of independent variables  <script type="math/tex"> x_{1}, x_{2},... </script> alongwith the constant vector.</li>
  <li><em>X’</em> - Transpose of X.</li>
  <li><em>W</em> - The weight matrix. This is the most important entity in the equation and understanding it completely is paramount to gaining an understanding of the IRLS as whole.
    <ul>
      <li>The <em>weight</em> matrix is present to reduce favorism of the best fit curve towards larger values of x. Hence, the weight matrix acts as a mediator of sorts between the very small and very large values of x (if any). It is a diagonal matrix with each non-zero value representing the weight for each vector <script type="math/tex"> x_{i} </script> in the sample data.</li>
      <li>Calculation of the weight matrix is dependent on the probability distribution shown by the independent random variables. The weight expression can be calculated by taking a look at the equation of the hessian matrix. So in the case of logistic regression, the weight matrix is a diagonal matrix with the ith entry as <script type="math/tex"> p(x_{i}, \beta_{old})*(1 - p(x_{i}, \beta_{old})) </script>.</li>
      <li>The W matrix is (the inverse?) of the variance/covariance matrix. On logistic and Poisson regression, the variance on each case depend on the mean, so that is the meaning of <script type="math/tex"> p(x_{i}, \beta_{old})*(1 - p(x_{i}, \beta_{old})) </script>.</li>
    </ul>
  </li>
  <li><script type="math/tex"> (y - \mu) </script> - This is a matrix whose ith value the is difference between the actual corresponding value on the y-axis minus <script type="math/tex"> \mu = x*b_{old} </script>. The value of this term is crucial in determining the error with which the coefficients have been calculated. Frequently an error of 10e-4 is acceptable.</li>
</ul>

<h2 id="generalized-linear-models-in-ruby">Generalized Linear Models in Ruby</h2>

<p>Calculating the co-efficients and a host of other properties of a GLM is extremely simple and intuitive in Ruby. Let us see some examples of GLM by using the <code>daru</code> and <code>statsample-glm</code> gems:</p>

<p>First install <code>statsample-glm</code> by running <code>gem install statsample-glm</code>, statsample will be downloaded alongwith it if it is not installed directly. Then download the CSV files from <a href="https://github.com/SciRuby/statsample-glm/blob/master/spec/data/logistic_mle.csv">here</a>.</p>

<p>Statsample-glm supports a variety of GLM methods, giving the choice of both, IRLS and MLE algorithms to the user for almost every distribution, and all this through a simple and intutive API. The primary calling function for all distribtions and algorithms is <code>Statsample::GLM.compute(data_set, dependent, method, options)</code>. We specify the data set, dependent variable, type of regression and finally an options hash in which one can specify a variety of customization options for the computation.</p>

<p>To compute the co-efficients of a logistic regression, try this code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;statsample-glm&#39;</span>
</span><span class="line"><span class="c1"># Code for computing coefficients and related attributes of a logistic regression.</span>
</span><span class="line">
</span><span class="line"><span class="n">data_set</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">from_csv</span> <span class="s2">&quot;logistic_mle.csv&quot;</span>
</span><span class="line"><span class="n">glm</span> <span class="o">=</span> <span class="no">Statsample</span><span class="o">::</span><span class="no">GLM</span><span class="o">.</span><span class="n">compute</span> <span class="n">data_set</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:logistic</span><span class="p">,</span> <span class="p">{</span><span class="ss">constant</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">algorithm</span><span class="p">:</span> <span class="ss">:mle</span><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Options hash specifying addition of an extra constants </span>
</span><span class="line"><span class="c1"># vector all of whose values is &#39;1&#39; and also specifying </span>
</span><span class="line"><span class="c1"># that the MLE algorithm is to be used.</span>
</span><span class="line">
</span><span class="line"><span class="nb">puts</span> <span class="n">glm</span><span class="o">.</span><span class="n">coefficients</span>
</span><span class="line">  <span class="c1">#=&gt; [0.3270, 0.8147, -0.4031,-5.3658]</span>
</span><span class="line"><span class="nb">puts</span> <span class="n">glm</span><span class="o">.</span><span class="n">standard_error</span>
</span><span class="line">  <span class="c1">#=&gt; [0.4390, 0.4270, 0.3819,1.9045]</span>
</span><span class="line"><span class="nb">puts</span> <span class="n">glm</span><span class="o">.</span><span class="n">log_likelihood</span>
</span><span class="line">  <span class="c1">#=&gt; -38.8669</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Similar to the above code, you can try implementing poisson, normal or probit regression models and use the data files from the link above as sample data. Just go through the tests in the source code on GitHub or read the documentation for further details and feel free to drop me a mail in case you have any doubts/suggestions for improvements.</p>

<p>Cheers!</p>

<hr />

<h6 id="further-reading">Further Reading</h6>
<ul>
  <li><a href="https://cise.ufl.edu/class/cis6930sp10esl/downloads/LogisticRegression.pdf">A good explanation of IRLS</a>.</li>
  <li><a href="http://www.stat.cmu.edu/~cshalizi/402/lectures/14-logistic-regression/lecture-14.pdf">Logistic Regression and Newtons Method</a>.</li>
  <li><a href="https://files.nyu.edu/mrg217/public/mle_introduction1.pdf">A good resource on the how and why behind the calculation of standard errors</a>.</li>
  <li><a href="http://www.columbia.edu/~so33/SusDev/Lecture_9.pdf">Logit and Probit</a>.</li>
  <li><a href="http://www.nesug.org/Proceedings/nesug10/sa/sa04.pdf">A very good explanation of the Poisson regression</a>.</li>
</ul>
]]></content>
  </entry>
  
</feed>
