<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Travel &lt;code&gt; Music]]></title>
  <link href="http://v0dro.github.io/atom.xml" rel="self"/>
  <link href="http://v0dro.github.io/"/>
  <updated>2017-11-21T22:28:29+09:00</updated>
  <id>http://v0dro.github.io/</id>
  <author>
    <name><![CDATA[Sameer Deshmukh]]></name>
    <email><![CDATA[sameer.deshmukh93@icloud.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Explanation of ExaFMM Learning Codes.]]></title>
    <link href="http://v0dro.github.io/blog/2017/10/23/explanation-of-exafmm-learning-codes/"/>
    <updated>2017-10-23T21:33:24+09:00</updated>
    <id>http://v0dro.github.io/blog/2017/10/23/explanation-of-exafmm-learning-codes</id>
    <content type="html"><![CDATA[<p>In this file I will write descriptions of the exafmm ‘learning’ codes and my understanding of them. I have been tasked with understanding the code and porting it to Ruby, my favorite language.
We shall start from the first tutorial, i.e. <a href="">0_tree</a>. You can find the full Ruby code here.</p>

<!-- MarkdownTOC style="round" autolink="true" depth="4" -->

<ul>
  <li>0_tree
    <ul>
      <li>step1.cxx</li>
      <li>step2.cxx</li>
      <li>step3.cxx</li>
      <li>step04.cxx</li>
    </ul>
  </li>
  <li>1_traversal
    <ul>
      <li>step1.cxx</li>
      <li>step2.cxx</li>
    </ul>
  </li>
  <li>2_kernels
    <ul>
      <li>kernel.h</li>
      <li>vector.h</li>
      <li>exafmm.h</li>
      <li>exafmm2d.h and step1.cxx</li>
      <li>step2.cxx</li>
    </ul>
  </li>
</ul>

<!-- /MarkdownTOC -->

<h1 id="0_tree">0_tree</h1>

<h2 id="step1cxx">step1.cxx</h2>

<p>This program simply populates some bodies with random numbers, creates a hypothetical X and Y axes and figures out the quadrant of each of the bodies.</p>

<p>Each of the nodes of the tree have a maximum of <a href="">4 immediate children</a>. We first initialize 100 <code>struct Body</code> objects, and then set the X and Y co-ordinates of each of them to a random number between 0 and 1.</p>

<p>In order to actually build the tree we follow the following steps:</p>

<ul>
  <li>First <a href="">get the bounds</a> between which the random numbers lie. That is, we figure out the min and max random number that is present in the bodies.</li>
  <li>We then get a <a href="">‘center’ and a ‘radius’</a>. This is useful for creating ‘quadrants’ and partitioning points into different quandrants in later steps. The center is calculated by adding the min and max numbers (which we treat as the diameter) and dividing by 2. This step is necessary since there is no ‘square’ space that can be partitioned into multiple spaces like there was in the lecture series. The way of calculating the radius <code>r0</code> is a little peculiar. It does not use the distance formula, its main purpose is….</li>
  <li>And then simply count the bodies in each quadrant and display them.</li>
</ul>

<p>Ruby code:
The body is represented as the Ruby class <code>Body</code>:</p>
<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre><span class="keyword">class</span> <span class="class">Body</span>
  attr_reader <span class="symbol">:x</span>

  <span class="keyword">def</span> <span class="function">initialize</span>
    <span class="instance-variable">@x</span> = [<span class="float">0.0</span>, <span class="float">0.0</span>]
  <span class="keyword">end</span>
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>

<p>There is an interesting way of knowing the quadrant in this code. It goes like this:</p>
<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>a = body.x[<span class="integer">0</span>] &gt; x0[<span class="integer">0</span>] ? <span class="integer">1</span> : <span class="integer">0</span>
b = body.x[<span class="integer">1</span>] &gt; x0[<span class="integer">1</span>] ? <span class="integer">1</span> : <span class="integer">0</span>
quadrant = a + (b &lt;&lt; <span class="integer">1</span>)
</pre></td>
</tr></table>
</div>
<p>Above code basically plays with 0 and 1 and returns a number between 0 and 3 as the correct quadrant number.</p>

<h2 id="step2cxx">step2.cxx</h2>

<p>This code basically takes the bodies created in the previous step, counts the number of bodies in each quadrant and sorts them by quadrant.</p>

<p>The new steps introduced in this program can be summarized as follows:</p>
<ul>
  <li>Count the bodies in each quadrant and store the count in an array. The <code>size</code> array in case of the Ruby implementation.</li>
  <li>In the next step we successively add the number of elements in each quadrant so that it gives us the offset value at which elements from a new quadrant will start in the <code>bodies</code> Array (of course, after it is sorted).</li>
  <li>We then sort the bodies according to the quadrant that they belong to. Something peculiar that I notice about this part is that counter[quadrant] also gets incremented after each iteration for sorting. Why is this the case even though the counters have been set to the correct offsets previously?</li>
</ul>

<h2 id="step3cxx">step3.cxx</h2>

<p>This program introduces a new method called <code>buildTree</code>, inside of which we will actually build the tree. It removes some of the sorting logic from <code>main</code> and puts it inside <code>buildTree</code>. The <code>buildTree</code> function performs the following functions:</p>
<ul>
  <li>Most of the functions relating to sorting etc are same. Only difference is that there is in-place sorting of the <code>bodies</code> array and the <code>buffer</code> array does not store elements anymore.</li>
  <li>A new function introduced is that we re-calculate the center and the radius based on sorted co-ordinates. This is done because we want new center and radii for the children.</li>
  <li>The <code>buildTree</code> function is called recursively such that the quadrants are divided until a point is reached where the inner most quadrant in the hierarchy does not contain more than 4 elements.</li>
</ul>

<p>Implementation:</p>

<p>There is an interesting piece of code in the part for calculating new center and radius:</p>
<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre> <span class="comment"># i is quadrant number</span>
center[d] = x0[d] + radius * (((i &amp; <span class="integer">1</span> &lt;&lt; d) &gt;&gt; d) * <span class="integer">2</span> - <span class="integer">1</span>)
</pre></td>
</tr></table>
</div>

<p>In the above code, there is some bit shifting and interleaving taking place whose prime purpose is to split the quadrant number into X and Y dimension and then using this to calculate the center of the child cell.</p>

<p>Another piece of code is this:</p>
<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre>counter = <span class="constant">Array</span>.new <span class="integer">4</span>, start
<span class="integer">1</span>.upto(<span class="integer">3</span>) <span class="keyword">do</span> |i|
  counter[i] = size[i-<span class="integer">1</span>] + counter[i-<span class="integer">1</span>]
<span class="keyword">end</span>

<span class="comment"># sort bodies and store them in buffer</span>
buffer = bodies.dup
start.upto(finish-<span class="integer">1</span>) <span class="keyword">do</span> |n|
  quadrant = quadrant_of x0, buffer[n]
  bodies[counter[quadrant]] = buffer[n]
  counter[quadrant] += <span class="integer">1</span>
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>

<p>In the above code, the <code>counter</code> variable is first used to store offsets of the elements in different quadrants. In the next loop it is in fact a counter for that stores in the index of the body that is currently under consideration.</p>

<h2 id="step04cxx">step04.cxx</h2>

<p>In this step we use the code written in the previous steps and actually build the tree.
The tree is built recursively by splitting into quadrants and then assigning them to cells
based on the quadrant. The ‘tree’ is actually stored in an array.</p>

<p>The cells are stored in a C++ vector called <code>cells</code>.</p>

<p>In the <code>Cell</code> struct, I wonder why the body is stored as a pointer and not a variable.</p>

<p>Implementation in the Ruby code, like saving the size of an Array during a recursive call
is slightly different since Ruby does not support pointers, but the data structures and
overall code is more or less a direct port.</p>

<h1 id="1_traversal">1_traversal</h1>

<p>These codes are for traversal of the tree that was created in the previous step. The full code can be found in <a href="">1_traversal.rb</a> file.</p>

<h2 id="step1cxx-1">step1.cxx</h2>

<p>This step implements the P2M and M2M passes of the FMM.</p>

<p>One major difference between the C++ and Ruby implementation is that since Ruby does not have pointers, I
have used the array indices of the elements instead. For this purpose there are two attributes in the
<code>Cell</code> class called <code>first_child_index</code> that is responsible for holding the index in the <code>cells</code> array
about the location of the first child of this cell, and the second <code>first_body_index</code> which is responsible for holding the index of the body in the <code>bodies</code> array.</p>

<p>This step does this by introducing a method called <code>upwardPass</code> which iterates through nodes and thier children and computes the P2M and M2M kernels.</p>

<h2 id="step2cxx-1">step2.cxx</h2>

<p>This step implements the rest of the kernels i.e. M2L, L2L, L2P and P2P. It also introduces two new methods <code>downward_pass</code> that calculates the local forces from other local forces and L2P interactions and <code>horizontal_pass</code> that calculates the inter-particle interactions and m2l.</p>

<p>No special code as such over here, its just the regular FMM stuff.</p>

<h1 id="2_kernels">2_kernels</h1>

<p>This code is quite different from the previous two. While the previous programs were mostly retricted to a single file, this program substantially increases complexity and spreads the implementation across several files. We start using 3 dimensional co-ordinates too.</p>

<p>In this code, we start to make a move towards spherical co-ordinate system to represent the particles in 3D. A few notable algorithms taken from some research papers have been implemented in this code.</p>

<p>Lets describe each file and see what implementation lies inside</p>

<h2 id="kernelh">kernel.h</h2>

<p>The <code>kernel.h</code> header file implemenets all the FMM kernels. It also implements two special functions called <code>evalMultipole</code> and <code>evalLocal</code> that evaluate the multipoles and local expansion for spherical co-ordinates using the actual algorithm that is actually used in exafmm. An implementation of this algorithm can be found on page 16 of the paper <a href="https://arxiv.org/pdf/1010.1482.pdf%20">“Treecode and fast multipole method for N-body simulation with CUDA”</a> by Yokota sensei. A preliminary implementation of this algorithm can be found in <a href="http://www.sciencedirect.com/science/article/pii/S0021999199963556">“A Fast Adaptive Multipole Algorithm in Three Dimensions”</a> by Cheng.</p>

<p>The Ruby implementation of this file is in <code>kernel.rb</code>.</p>

<p>I will now describe this algorithm here best I can:</p>

<h3 id="preliminaries">Preliminaries</h3>

<h4 id="ynm-vector">Ynm vector</h4>

<p>This is a vector that defines the <a href="https://en.wikipedia.org/wiki/Spherical_harmonics">spherical harmonics</a> of degree <em>n</em> and order <em>m</em>. A primitive version for computing this exists in the paper by Cheng and a newer, faster version in the paper by Yokota.</p>

<p>Spherical harmonics allow us to define series of a function in 3D rather in 1D that is usually the case for things like the expansion of <em>sin(x)</em>. They are representations of functions on the surface of a sphere instead of on a circle, which is usually the case with other 2D expansion functions. They are like the Fourier series of the sphere. This <a href="http://mathworld.wolfram.com/SphericalHarmonic.html">article</a> explains the notations used nicely.</p>

<p>The order (<em>n</em>) and degree (<em>m</em>) correspond to the order and degree of the <a href="http://mathworld.wolfram.com/LegendrePolynomial.html">Legendre polynomial</a> that is used for obtaining the spherical harmonic. <em>n</em> is an integer and <em>m</em> goes from <em>0..n</em>.</p>

<p>For causes of optimization, the values stored inside <code>ynm</code> are not the ones that correspond to the spherical harmonic, but are values that yield optimized results when the actual computation happens.</p>

<h4 id="historical-origins-of-kernelh">Historical origins of kernel.h</h4>

<p>This file is a new and improved version of the laplace.h file from the exafmm-alpha repo. Due to the enhacements made, the code in this file performs calculations that are significantly more accurate than those in laplace.h.</p>

<p>laplace.h consists of a C++ class inside which all the functions reside, along with a constructor that computes pre-determined values for subsequent computation of the kernels. For example, in the constructor of the <code>Kernel</code> class, there is a line like so:</p>
<div class="language-cpp highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>Anm[nm] = oddOrEven(n)/std::sqrt(fnmm*fnpm);
</pre></td>
</tr></table>
</div>
<p>This line is computing the value of <script type="math/tex">A^{m}_{n}</script> as is given by Cheng’s paper (equation 14). This value is used in M2L and L2L kernels later. However, this value is never directly computed in the new and optimized <code>kernel.h</code> file. Instead, it modifies the computation of the <code>Ynm</code> vector such that it no longer becomes necessary to involve the <code>Anm</code> term in any kernel computation.</p>

<h3 id="functions">Functions</h3>

<h4 id="cart2sph">cart2sph</h4>

<p>This function converts cartesian co-ordinates in (X,Y,Z) to spherical co-ordinates involving <code>radius</code>, <code>theta</code> and <code>phi</code>. <code>radius</code> is simply the square root of the norm of the co-ordinates (norm is defined as the sum of squares of the co-ordinates in <code>vec.h</code>).</p>

<h4 id="evalmultipole-simple-implementation">evalMultipole simple implementation</h4>

<p>This algorithm calculates the multipole of a cell. It uses spherical harmonics so that net force of the forces inside a sphere and can be estimated on the surface of the sphere, which can then be treated as a single body for estimating forces.</p>

<p>The optimizations that are presented in the <code>kernel.h</code> version of this file are quite complex to understand since they look quite different from the original equation.</p>

<p>For code that is still sane and easier to read, head over to the <a href="https://github.com/exafmm/exafmm-alpha/blob/develop/kernels/laplace.h#L48">laplace.h</a> file in exafmm-alpha. The explanations that follow for now are from this file. We will see how the same functions in <code>kernel.h</code> have been modified to make computation faster and less dependent on large number divisions which reduce the accuracy of the system.</p>

<p>The <code>evalMultipole</code> function basically tries to populate the <code>Ynm</code> array with data that is computed with the following equation:</p>

<script type="math/tex; mode=display">\rho^{n}Y_{n}^{m}=\sum_{m=0}^{P-1}\sum_{n=m+1}^{P-1}\rho^{n}P_{n}^{m}(x)\sqrt{\frac{(n-m)!}{(n+m)!}}e^{im\beta}</script>

<p>It starts with evaluating terms that need not be computed for every iteration of <code>n</code>, and computes those terms in the outer loop itself. The terms in the outer loop correspond to the condition <code>m=n</code>. The first of these is the exponential term <script type="math/tex">e^{im\beta}</script>.</p>

<p>After this is a curious case of computation of some indexes called <code>npn</code> and <code>nmn</code>. These are computed as follows:</p>
<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>npn = m * m + <span class="integer">2</span> * m <span class="comment"># case Y n  n</span>
nmn = m * m         <span class="comment"># case Y n -n</span>
</pre></td>
</tr></table>
</div>

<p>The corresponding index calculation for the inner loop is like this:</p>
<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>npm = n * n + n + m <span class="comment"># case Y n  m</span>
nmm = n * n + n - m <span class="comment"># case Y n -m</span>
</pre></td>
</tr></table>
</div>

<p>This indexes the <code>Ynm</code> array. This is done because we are visualizing the Ynm array as a pyramid whose base spans from <code>-m</code> to <code>m</code> and who height is <code>n</code>. A rough visualization of this pyramid would be like so:</p>
<pre><code>   -m ---------- m
n  10 11 12 13  14
|    6  7  8  9
|     3  4   5  
|      1   2
V        0
</code></pre>

<p>The above formulas will give the indexes for each half of the pyramid. Since the values of one half of the pyramid are conjugates of the other half, we can only iterate from <code>m=0</code> to <code>m&lt;P</code> and use this indexing method for gaining the index of the other half of the pyramid.</p>

<p>Now let us talk about the evaluation of the <a href="http://mathworld.wolfram.com/AssociatedLegendrePolynomial.html">Associated Legendre Polynomial</a> <script type="math/tex">P^m_{n}(cos(\theta))</script>, where <em>m</em> is the order of the differential equation and <em>n</em> is the degree. The Associated Legendre Polynomial is the solution to the <a href="http://mathworld.wolfram.com/AssociatedLegendreDifferentialEquation.html">Associated Legendre Equation</a>. The Legendre polynomial can be expressed in terms of the <a href="https://en.wikipedia.org/wiki/Associated_Legendre_polynomials#Definition_for_non-negative_integer_parameters_.E2.84.93_and_m">Rodrigues form</a> for computation without dependence on the simple Legendre Polynomial <script type="math/tex">P_{n}</script>. However, due to the factorials and rather large divisions that need to be performed to compute the Associated Legendre polynomial in this form, computing this equation for large values of <em>m</em> and <em>n</em> quickly becomes unstable. Therefore, we use a recurrence relation of the Polynomial in order to compute different values.</p>

<p>The recurrence relation looks like so:</p>

<script type="math/tex; mode=display">(n-m+1)P^m_{n+1}(x)=x(2n+1)P^m_n(x)-(n+m)P^m_{n-1}(x)</script>

<p>This is expressed in the code with the following line:</p>
<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>p = (x * (<span class="integer">2</span> * n + <span class="integer">1</span>) * p1 - (n + m) * p2) / (n - m + <span class="integer">1</span>)
</pre></td>
</tr></table>
</div>
<p>It can be seen that <code>p</code> is equivalent to <script type="math/tex">P^{m}_{n+1}</script>, <code>p1</code> is equivalent to <script type="math/tex">P^{m}_{n}</script> and <code>p2</code> is equivalent to <script type="math/tex">P^{m}_{n-1}</script>. This convention is followed everywhere in the code.</p>

<p>Observe that the above equation requires the value of <em>P</em> for <em>n-1</em> and <em>n+1</em> to be computed so that the value for <em>P</em> at <em>n</em> can be computed. Therefore, we first set <em>m=m+1</em> and then compute <script type="math/tex">P^m_{m+1}</script> which can be expressed like this:
<script type="math/tex">P^{m}_{m+1}(x)=x(2m+1)P^{m}_{m}(x)</script></p>

<p>The above equation is expressed by the following line in the code:</p>
<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>p = x * (<span class="integer">2</span> * m + <span class="integer">1</span>) * p1
</pre></td>
</tr></table>
</div>

<p>If you read the code closely, you will see that just at the beginning of the <code>evalMultipole</code> function, we initialize <code>p1 = 1</code> the first time the looping is done. This is because when <code>p1</code> at the first instance is identified with <code>m = 0</code>, and we substitute <code>m=0</code> in this equation:</p>

<script type="math/tex; mode=display">P^{m}_{m} = (-1)^{m}(2m-1)!(1-x^{2})^{\frac{m}{2}}</script>

<p>We will get <script type="math/tex">P^{m}_{m}(x)=1</script>.</p>

<p>When you look at the code initially, there might be some confusion regarding the significance of having to <code>rho</code> terms, <code>rhom</code> and <code>rhon</code>. This is written because each term of <code>Ynm</code> depends on a particular power of <code>rho</code> raised to <code>n</code>. So just before the inner loop, you can see the line <code>rhon = rhom</code>, which basically reduces the number of times that <code>rho</code> needs to be multiplied since the outer loop’s value of <code>rho</code> is already set to what it should be for that particular iteration.</p>

<p>Finally, see that there is a line right after the inner loop which reads like this:</p>
<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>pn = -pn * fact * y
</pre></td>
</tr></table>
</div>
<p>This line is for calculating the value of <code>p1</code> or <script type="math/tex">P^{m}_{m}</script> after the first iteration of the loop. Since the second factorial term in the equation basically just deals with odd numbers, the calculation of this term can be simplified by simply incrementing by <code>2</code> with <code>fact += 2</code>. The <code>y</code> term in the above equation is in fact <code>sin(alpha)</code> (defined at the top of this function). This is because, if you see the original equation, you will see that the third term is <script type="math/tex">(1-x^{2})</script>, and <em>x</em> is in fact <code>cos(alpha)</code>. Therefore, using the trigonometric equation, we can say simply substitute the entire term with <code>y</code>.</p>

<h4 id="evalmultipole-optimized-implementation">evalMultipole optimized implementation</h4>

<p>Now that a background of the basic implementation of <code>evalMultipole</code> has been established, we can move over to understanding the code that is placed inside the <a href="https://github.com/exafmm/exafmm/blob/learning/2_kernels/kernel.h">kernel.h</a> file of the <code>exafmm/learning</code> branch. This code is more optimized and can compute results with much higher accuracy than the code that is present in the <code>exafmm-alpha</code> repo that we previously saw. The main insipiration for this code come’s from the Treecode paper posted above.</p>

<p>In this code, most of the stuff relating to indexing and calculation of the powers of <code>rho</code> is pretty much the same. However, there are some important changes with regards to the computation of the values that go inside the <code>Ynm</code> array. This change is also reflected in the subsequent kernels.</p>

<p>For instance, this new function derives an important term <script type="math/tex">O^{m}_{n}</script> from <a href="http://epubs.siam.org/doi/abs/10.1137/0916051">Epton’s paper</a> (equation <code>2.20</code>).</p>

<p>The Ruby implementation is <a href="">here</a>.</p>

<h4 id="p2m">P2M</h4>

<h4 id="m2m">M2M</h4>

<p>A major difference exists between computation of M2M in the <code>kernel.h</code> and <code>laplace.h</code> files.</p>
<h4 id="m2l">M2L</h4>

<h4 id="l2l">L2L</h4>

<h4 id="l2p">L2P</h4>

<h4 id="p2p">P2P</h4>

<h2 id="vectorh">vector.h</h2>

<p>This file defines a new custom type for storing 1D vectors called <code>vec</code> as a  C++ class. It also defines various functions that can be used on vectors like <code>norm</code>, <code>exp</code> and other simple arithmetic.</p>

<p>The Ruby implementation of this file is in <code>vector.rb</code>.</p>

<h2 id="exafmmh">exafmm.h</h2>

<h2 id="exafmm2dh-and-step1cxx">exafmm2d.h and step1.cxx</h2>

<p>Shows a very simple preliminary implementation of the actuall exafmm code. Mostly useful for understanding purpose only.</p>

<h2 id="step2cxx-2">step2.cxx</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSOC 2016 Wrap Up for SciRuby]]></title>
    <link href="http://v0dro.github.io/blog/2016/11/24/gsoc-2016-wrap-up-for-sciruby/"/>
    <updated>2016-11-24T13:27:34+09:00</updated>
    <id>http://v0dro.github.io/blog/2016/11/24/gsoc-2016-wrap-up-for-sciruby</id>
    <content type="html"><![CDATA[<p>In the summer of 2016 I was chosen by the SciRuby core team to be admin for SciRuby for Google Summer of Code 2016. GSOC is an important yearly event for us as an organization since it provides a great platform for an upcoming organization like SciRuby and helps us get more users and contributors for the various libraries that we maintain.</p>

<p>This blog post is meant to be a summary of the work that SciRuby did over the summer and also of my experience at the GSOC 2016 mentor’s summit.</p>

<h2 id="gsoc-student-work">GSOC student work</h2>

<p>For the 2016 edition of GSOC we had 4 students - <a href="https://github.com/lokeshh">Lokesh Sharma</a>, <a href="https://github.com/prasunanand">Prasun Anand</a>, <a href="https://github.com/gau27">Gaurav Tamba</a> and <a href="https://github.com/rajithv">Rajith Vidanaarachchi</a>. All four were undergraduate computer engineering students from colleges in India or Sri Lanka at the time of GSOC 2016.</p>

<p>Lokesh worked on making improvements to <a href="https://github.com/sciruby/daru">daru</a>, a Ruby DataFrame library. He made very significant contributions to daru by adding functionality for storing and performing operations on categorical data, and also significantly sped up the sorting and grouping functionality of daru. His work has now been successfully integrated into the main branch and has also been released on rubygems. Lokesh has remained active as a daru contributor and regularly contributes code and replies to Pull Requests and issues. You can find a wrap up of the work he did throughout the summer in <a href="http://sciruby.com/blog/2016/11/24/gsoc-2016-adding-categorical-data-support/">this blog post</a>.</p>

<p>Prasun worked on creating a Java backend for <a href="https://github.com/sciruby/nmatrix">NMatrix</a>, a Ruby library for performing linear algebra operations similar to numpy in Python. This project opened the doors for scientific computation on JRuby. Prasun was able to complete all his project objectives, and his work is currently awaiting review because of the <a href="https://github.com/SciRuby/nmatrix/pull/558">sheer size of the Pull Request</a> and the variety of changes to the library that he had to make in order to accomplish his project goals. You can read about his summer’s work <a href="http://sciruby.com/blog/2016/10/24/gsoc-2016-port-nmatrix-to-jruby/">here</a>. Prasun will also be <a href="http://rubyconfindia.org/program/#prasun-anand">speaking at Ruby Conf India 2017</a> about his GSOC work and scientific computing on JRuby in general.</p>

<p>Gaurav worked on creating a Ruby wrapper for NASA’s <a href="https://naif.jpl.nasa.gov/naif/toolkit.html">SPICE toolkit</a>. A need for this was felt since Gaurav’s mentor John is a rocket scientist and was keen having a Ruby wrapper for a library that he used regularly in his work. This resulted in the <a href="https://github.com/SciRuby/spice_rub">spice_rub</a> gem. It exposes a very intuitive Ruby interface to the SPICE toolkit. Gaurav also gave a lightning talk about his work at <a href="">Deccan Ruby Conf (Pune, India)</a>. Blog posts summarizing his work can be found <a href="http://sciruby.com/blog/2016/11/24/spicerub-kernelpool-and-kernels/">here</a>, <a href="http://sciruby.com/blog/2016/11/24/gsoc-2016-a-look-at-spicerub-body/">here</a> and <a href="http://sciruby.com/blog/2016/11/24/gsoc-2016-a-look-at-spicerub-time/">here</a>.</p>

<p>Rajith worked on growing the Ruby wrapper over <a href="https://github.com/symengine/symengine">symengine</a>. His mentor Abinash was a student with SciRuby for GSOC 2015 and volunteered to mentor Rajith so that Rajith could build upon the work that he had done the previous summer. This resulted in a huge increase in functionality for the <a href="https://github.com/symengine/symengine.rb">symengine.rb ruby gem</a>.</p>

<p>To summarize, all four of our students could execute their chosen tasks within the stipulated time and we did not have to fail anyone. All in all, we mentors had a great time working with the students and hope to keep doing this year on year!</p>

<h2 id="gsoc-2016-mentors-summit">GSOC 2016 mentor’s summit</h2>

<p>The GSOC 2016 mentor’s summit was fantastic. It was great meeting all the contributors and listening to ideas from projects that I had never heard about previously. I also had the opportunity to conduct an unconference session and  share my ideas on Scientific Computation in Ruby with like minded people from other organizations.</p>

<p>Here are some photos that I took at the summit:</p>

<p><img src="http://v0dro.github.io/images/gsoc_summit/1.JPG" alt="'ID card'" /></p>

<p><img src="http://v0dro.github.io/images/gsoc_summit/2.JPG" alt="'A visit to the Computer History Museum'" /></p>

<p><img src="http://v0dro.github.io/images/gsoc_summit/3.JPG" alt="'The (now discontinued) self driving car'" /></p>

<p><img src="http://v0dro.github.io/images/gsoc_summit/4.JPG" alt="'Chocolate table at the GSOC summit'" /></p>

<p><img src="http://v0dro.github.io/images/gsoc_summit/5.JPG" alt="'Attendees from India'" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advice for Future GSOC Students and Mentors Based on My Experience.]]></title>
    <link href="http://v0dro.github.io/blog/2016/08/27/advice-for-future-gsoc-students-and-mentors-based-on-my-experience/"/>
    <updated>2016-08-27T21:34:51+09:00</updated>
    <id>http://v0dro.github.io/blog/2016/08/27/advice-for-future-gsoc-students-and-mentors-based-on-my-experience</id>
    <content type="html"><![CDATA[<p>This year I was the admin for the GSOC projects of the <a href="http://sciruby.com/">SciRuby foundation</a>. It’s also the first time I mentored a student, having been a student myself last year. Being a mentor is pretty tough task, and for some reason is underestimated by many. I was lucky to have the experience and support of co-admins <a href="https://github.com/mohawkjohn">@mohawkjohn</a> and <a href="https://github.com/pjotrp">@pjotrp</a> throughout the GSOC period.</p>

<p>GSOC has now come to a close. I have learned a great deal myself in the past 3 months, and thought I would share some of my learnings in this blog post in the interest of future GSOC students and mentors.</p>

<h2 id="advice-for-future-students">Advice for future students</h2>

<p><strong>Writing a proposal</strong></p>

<p>Research your ideas at least for a day before asking your first question. Mentors are volunteers and it’s important to respect the time and effort that they’re putting into FOSS. When you do propose an idea, you should also have a good knowledge of why you’re working on that idea in the first place and what kind of long term impact the realization of that idea can have. Putting this across through your proposal can have a positive on your selection. Know how to ask questions on mailing lists. A properly researched question should show that you have first taken an effort to understand the topic and are asking the question only because you got stuck somewhere.</p>

<p><strong>Community bonding</strong></p>

<p>Make sure you figure out what exactly you have to research and learn during the community bonding phase. There’s a lot of things out there that can be learned, but only a few specific things will helpful for your project. Focus on them only. Ask specific questions to your mentor.</p>

<p><strong>Coding</strong></p>

<p>Setup a daily schedule for coding and stick to it. Constantly keep in touch with your mentor and make sure they know your progress as well as you do. If you run into previously unseen problems (frequent in programming), tell mentor about this ASAP and work out a solution together.</p>

<p>Don’t burn yourself out in your enthusiasm. Take regular breaks. Overworking does more harm than good.</p>

<h2 id="advice-for-future-mentors">Advice for future mentors</h2>

<p><strong>Student selection</strong></p>

<p>Short story:
If you’re unsure about a student, <em>don’t select him</em>. It’s better to have a more quality than quantity.</p>

<p>Long story:
First and foremost, it is very important to establish some organization-wide procedure that will be followed when selecting a student. As a start, consider making a proposal template that contains all the information and details that the student needs to fill up when submitting the proposal. Have a look at the <a href="https://github.com/SciRuby/sciruby/wiki/GSoC-2016-Student-Application">SciRuby application template</a> as an example.</p>

<p>When students start asking questions on the mailing list, it is important for the org admins to keep a watch on students and get a rough idea of who asks the better questions and who don’t. Community participation is a great measure of understanding whether a student will live upto your expectations or not. A proposal with a bad first draft might just turn out to be great simply because the student is open to feedback and is willing to put it in the effort to work on it.</p>

<p>We have 3 rounds:
First round every mentor rates their <em>own</em> student only. In the next round all mentors rate <em>all</em> students (students without a mentor and bad proposals drop off).</p>

<p>In each case when rating a student. mentors put in a comment, making sure to tell how a student has interacted in the proposal phase, what his current coding looks like, how responsive he is. Mentors can still push their students to do stuff. We like it when students keep responsive in this phase.</p>

<p>In the 3rd round the <em>org admins</em> make the final ranking to set the number of slots. By this stage we are pretty clear about the individuals involved (and note that mentor activity counts).  When Google  allocates the slots the top-ranked students get in.</p>

<p><strong>Coding period</strong></p>

<p>Make sure you communicate with your student that they are supposed to send you <em>daily</em> updates of their progress. One paragraph about their work that particular day should suffice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up a Lexical Analyser and Parser in Ruby]]></title>
    <link href="http://v0dro.github.io/blog/2016/08/21/setting-up-a-lexical-analyser-and-parser-in-ruby/"/>
    <updated>2016-08-21T16:06:05+09:00</updated>
    <id>http://v0dro.github.io/blog/2016/08/21/setting-up-a-lexical-analyser-and-parser-in-ruby</id>
    <content type="html"><![CDATA[<p>I wrote this post as I was setting up the lexer and parser for Rubex, a new superset of Ruby that I’m developing.</p>

<p>Let’s demonstrate the basic working of a lexical analyser and parser in action with a demonstration of a very simple addition program. Before you start, please make sure <a href="https://github.com/ruby/rake">rake</a>, <a href="https://github.com/seattlerb/oedipus_lex">oedipus_lex</a> and <a href="https://github.com/tenderlove/racc">racc</a> are installed on your computer.</p>

<h3 id="configuring-the-lexical-analyser">Configuring the lexical analyser</h3>

<p>The most fundamental need of any parser is that it needs string tokens to work with, which we will provide by way of lexical analysis by using the <a href="https://github.com/seattlerb/oedipus_lex">oedipus_lex</a> gem (the logical successor of <a href="https://github.com/tenderlove/rexical">rexical</a>). Go ahead and create a file <code>lexer.rex</code> with the following code:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre><span class="keyword">class</span> <span class="class">AddLexer</span>
macro
  <span class="constant">DIGIT</span>         <span class="regexp"><span class="delimiter">/</span><span class="char">\d</span><span class="content">+</span><span class="delimiter">/</span></span>
rule
  <span class="regexp"><span class="delimiter">/</span><span class="inline"><span class="inline-delimiter">#{</span><span class="constant">DIGIT</span><span class="inline-delimiter">}</span></span><span class="delimiter">/</span></span>    { [<span class="symbol">:DIGIT</span>, text.to_i] }
  <span class="regexp"><span class="delimiter">/</span><span class="content">.|</span><span class="char">\n</span><span class="delimiter">/</span></span>        { [text, text] }
inner
  <span class="keyword">def</span> <span class="function">do_parse</span>; <span class="keyword">end</span> <span class="comment"># this is a stub.</span>
<span class="keyword">end</span> <span class="comment"># AddLexer</span>
</pre></td>
</tr></table>
</div>

<p>In the above code, we have defined the lexical analyser using Oedipus Lex’s syntax inside the <code>AddLexer</code> class. Let’s go over each element of the lexer one by one:</p>

<p><strong>macro</strong></p>

<p>The macro keyword lets you define macros for certain regular expressions
that you might need to write repeatedly. In the above lexer, the macro <code>DIGIT</code> is a regular expression (<code>\d+</code>) for detecting one or more integers. We place the regular expression inside forward slashes (<code>/../</code>) because oedipus_lex requires it that way. The lexer can handle any valid Ruby regular expression. See the Ruby docs for details on Ruby regexps.</p>

<p><strong>rule</strong></p>

<p>The section under the <code>rule</code> keyword defines your rules for the lexical analysis. Now it so happens that we’ve defined a macro for detecting digits, and in order to use that macro in the rules, it must be inside a Ruby string interpolation (<code>#{..}</code>). The line to the right of the <code>/#{DIGIT}/</code> states the action that must be taken if such a regular expression is encountered. Thus the lexer will return a Ruby Array that contains the first element as <code>:DIGIT</code>. The second element uses the <code>text</code> variable. This is a reserved variable in lex that holds the text that the lexer has matched. Similar the second rule will match any character (<code>.</code>) or a newline (<code>/n</code>) and return an <code>Array</code> with <code>[text, text]</code> inside it.</p>

<p><strong>inner</strong></p>

<p>Under the <code>inner</code> keyword you can specify any code that you want to occur inside your lexer class. This can be any logic that you want your lexer to execute. The Ruby code under the <code>inner</code> section is copied as-is into the final lexer class. In the above example, we’ve written an empty method called <code>do_parse</code> inside this section. This method is mandatory if you want your lexer to sucessfully execute. We’ll be coupling the lexer with <code>racc</code> shortly, so unless you want to write your own parsing logic, you should leave this method empty.</p>

<h3 id="configuring-the-parser">Configuring the parser</h3>

<p>In order for our addition program to be successful, it needs to know what to do with the tokens that are generated by the lexer. For this purpose, we need <a href="">racc</a>, an LALR(1) parser generator for Ruby. It is similar to yacc or bison and let’s you specify grammars easily.</p>

<p>Go ahead and create a file called <code>parser.racc</code> in the same folder as the previous <code>lexer.rex</code> and <code>Rakefile</code>, and put the following code inside it:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
</pre></td>
  <td class="code"><pre><span class="keyword">class</span> <span class="class">AddParser</span>
rule
  <span class="key">target</span>: exp { result = <span class="integer">0</span> }
  
  <span class="key">exp</span>: exp <span class="string"><span class="delimiter">'</span><span class="content">+</span><span class="delimiter">'</span></span> exp { result += val[<span class="integer">2</span>]; puts result }
     | <span class="constant">DIGIT</span>
<span class="keyword">end</span>

---- header
require_relative <span class="string"><span class="delimiter">'</span><span class="content">lexer.rex.rb</span><span class="delimiter">'</span></span>

---- inner
<span class="keyword">def</span> <span class="function">next_token</span>
  <span class="instance-variable">@lexer</span>.next_token
<span class="keyword">end</span>

<span class="keyword">def</span> <span class="function">prepare_parser</span> file_name
  <span class="instance-variable">@lexer</span> = <span class="constant">AddLexer</span>.new
  <span class="instance-variable">@lexer</span>.parse_file file_name
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>

<p>As you can see, we’ve put the logic for the parser inside the <code>AddParser</code> class. Yacc’s <code>$$</code> is the <code>result</code>; <code>$0</code>, <code>$1</code>… is an array called <code>val</code>, and <code>$-1</code>, <code>$-2</code>… is an array called <code>_values</code>. Notice that in racc, only the parsing logic exists inside the class and everything else (i.e under <code>header</code> and <code>inner</code>) exists <em>outside</em> the class. Let’s go over each part of the parser one by one:</p>

<p><strong>class AddParser</strong></p>

<p>This is the core class that contains the parsing logic for the addition parser. Similar to <code>oedipus_lex</code>, it contains a <code>rule</code> section that specifies the grammar. The parser expects tokens in the form of <code>[:TOKEN_NAME, matched_text]</code>. The <code>:TOKEN_NAME</code> must be a symbol. This token name is matched to literal characters in the grammar (<code>DIGIT</code> in the above case). <code>token</code> and <code>expr</code> are varibles. Have a look at <a href="https://en.wikipedia.org/wiki/LALR_parser">this introduction to LALR(1) grammars</a> for further information.</p>

<p><strong>header</strong></p>

<p>The <code>header</code> keyword tells racc what code should be put at the top of the parser that it generates. You usually put your <code>require</code> statements here. In this case, we load the lexer class so that the parser can use it for accessing the tokens generated by the lexer. Notice that <code>header</code> has 4 hyphens (<code>-</code>) and a space before it. This is mandatory if your program is to not malfunction.</p>

<p><strong>inner</strong></p>

<p>The <code>inner</code> keyword tells racc what should be put <em>inside</em> the generated parser class. As you can see there are two methods in the above example - <code>next_token</code> and <code>prepare_parser</code>. The <code>next_token</code> method is mandatory for the parser to function and you must include it in your code. It should contain logic that will return the next token for the parser to consider. Moving on the <code>prepare_parser</code> method, it takes a file name that is to be parsed as an argument (how we pass that argument in will be seen later), and initialzes the lexer. It then calls the <code>parse_file</code> method, which is present in the lexer class by default.</p>

<p>The <code>next_token</code> method in turn uses the <code>@lexer</code> object’s <code>next_token</code> method to get a token generated by the lexer so that it can be used by the parser.</p>

<h3 id="putting-it-all-together">Putting it all together</h3>

<p>Our lexical analyser and parser are now coupled to work with each other, and we now use them in a Ruby program to parse a file. Create a new file called <code>adder.rb</code> and put the following code in it:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>require_relative <span class="string"><span class="delimiter">'</span><span class="content">parser.racc.rb</span><span class="delimiter">'</span></span>

file_name = <span class="predefined-constant">ARGV</span>[<span class="integer">0</span>]
parser = <span class="constant">AddParser</span>.new
parser.prepare_parser(file_name)
parser.do_parse
</pre></td>
</tr></table>
</div>

<p>The <code>prepare_parser</code> is the same one that was defined in the <code>inner</code> section of the <code>parser.racc</code> above. The <code>do_parse</code> method called on the parser will signal the parser to start doing it’s job.</p>

<p>In a separate file called <code>text.txt</code> put the following text:</p>

<pre><code>2+2
</code></pre>

<p>Oedipus Lex does not have a command line tool like rexical for generating a lexer from the logic specified, but rather has a bunch of rake tasks defined for doing this job.
So now create a <code>Rakefile</code> in the same folder and put this code inside it:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre>require <span class="string"><span class="delimiter">'</span><span class="content">oedipus_lex</span><span class="delimiter">'</span></span>

<span class="constant">Rake</span>.application.rake_require <span class="string"><span class="delimiter">&quot;</span><span class="content">oedipus_lex</span><span class="delimiter">&quot;</span></span>

desc <span class="string"><span class="delimiter">&quot;</span><span class="content">Generate Lexer</span><span class="delimiter">&quot;</span></span>
task <span class="symbol">:lexer</span>  =&gt; <span class="string"><span class="delimiter">&quot;</span><span class="content">lexer.rex.rb</span><span class="delimiter">&quot;</span></span>

desc <span class="string"><span class="delimiter">&quot;</span><span class="content">Generate Parser</span><span class="delimiter">&quot;</span></span>
task <span class="symbol">:parser</span> =&gt; <span class="symbol">:lexer</span> <span class="keyword">do</span>
  <span class="shell"><span class="delimiter">`</span><span class="content">racc parser.racc -o parser.racc.rb</span><span class="delimiter">`</span></span>
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>

<p>Running <code>rake parser</code> will generate a two new files - <code>lexer.rex.rb</code> and <code>parser.racc.rb</code> - which will house the classes and logic for the lexer and parser, respectively. You can use your newly written lexer + parser with a <code>ruby adder.rb text.txt</code> command. It should output <code>4</code> as the answer.</p>

<p>You can find all the code in this blogpost <a href="https://github.com/v0dro/scratch/tree/master/lexer_parser">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Thoughts on Music Theory.]]></title>
    <link href="http://v0dro.github.io/blog/2016/08/16/random-thoughts-on-music-theory/"/>
    <updated>2016-08-16T22:37:01+09:00</updated>
    <id>http://v0dro.github.io/blog/2016/08/16/random-thoughts-on-music-theory</id>
    <content type="html"><![CDATA[<p>Title explains what this is about.</p>

<h3 id="16-august-2016">16 August 2016</h3>

<p>Was checking out <a href="https://www.youtube.com/watch?v=0qIP3_YLKpk">this</a> video (Contortionist - Language 1) and learned about standard C# tuning on a 6 string bass guitar today. He’s used tuning G# C# F# B E A. Killer bass tone. <a href="https://en.wikipedia.org/wiki/D%E2%99%AD_tuning">This wiki</a> says something different about C# standard, though.</p>

<h3 id="30-november-2016">30 November 2016</h3>

<p>Trying out some interval training with <a href="https://www.youtube.com/watch?v=rPSRH3tf5B8">this video</a> today. Supposd to be really good.</p>

<p>So there are two types of intervals: harmonic and melodic. Harmonic is when is two or more notes are played at a time and melodic is when two or more notes are played separately.</p>

<p>Intervals are described by some properties:</p>
<ul>
  <li>Quality: Whether it is perfect, major, minor, augmented or diminished. Perfect intervals, if they’re raised by half step become augmented, if they are lowered by half step they become diminished. If perfect intervals are inverted, they remain perfect intervals. So a perfect fifth interved becomes a perfect fourth, and vice versa a perfect fourth interved becomes a perfect fifth. Minor or major intervals can become augmented or diminshed but never perfect.</li>
  <li>Number: Unison, 2nd, 3rd, 4th, 5th,6th,7th, 8th, etc. Number of the interval is the number of letter names that the letter name spans. For example, C to G is a fifth because it spans 5 letter names C-D-E-F-G.</li>
</ul>

<p>A dyad is a two note chord.</p>

<p>Aural characterestics of intervals:
Consonance category: 
Perfect fifth and octaves are open consonances. Major and minor thirds and sixths are called soft consonances.</p>

<p>Dissonant category:
Minor sevenths (C-Bb) and major seconds (C-D) are called mild dissonances. Minor seconds (like C-Db) and major sevenths (C-B) are called sharp dissonances.</p>

<p>The perfect fourth is characterized as a consonant or distant interval depending on its used in context. If a perfect 4th is part of a second inversion major triad</p>

<p>The major 6th interval can be remebered with ‘My Bonnie Lies…’.</p>

<p>To identify a minor 6th interval, play the first inversion of the triad and then play the 1st and 3rd of the inversion.</p>

<p>To identify a major 6th, play the second inversion of the triad so you get the 1st and 3rd notes at a major 6th interval.</p>

<h3 id="11-decemeber-2016">11 Decemeber 2016</h3>

<p>Songs for remembering ascending invtervals:</p>

<ul>
  <li>Major 2nd   - Happy Birthday to You.</li>
  <li>Major 3rd   - Oh when the saints go marching.</li>
  <li>Perfect 4th - Star Trek Theme (TNG).</li>
  <li>Perfect 5th - Scarborough Fair. (are we ^going….)</li>
  <li>Major 6th   - My Bonnie Lies Over…</li>
  <li>Major 7th   - Superman theme</li>
  <li>Octave      - The Christmas Song</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searching for Graduate Degree Courses in USA and Japan.]]></title>
    <link href="http://v0dro.github.io/blog/2016/08/05/searching-for-graduate-degree-courses-in-usa-and-japan/"/>
    <updated>2016-08-05T19:59:23+09:00</updated>
    <id>http://v0dro.github.io/blog/2016/08/05/searching-for-graduate-degree-courses-in-usa-and-japan</id>
    <content type="html"><![CDATA[<p>I’m currently searching for master’s degree courses in various colleges in Japan and USA. I want to pursue a Computer Science degree specializing in distributed systems. Searching for the right graduate degree courses can get depressing. Here I’m posting various links and leads that I came across through the course of my search.</p>

<h3 id="5-august-2016">5 August 2016</h3>

<p>Searching for options in Japan and started with University of Tokyo. Most of their courses seem to be in Japanese but there are a few in English as well. <a href="http://www.i.u-tokyo.ac.jp/ist_en/en-course/prg.shtml">This page</a> has some starting info about the English courses. Also found a collection of colleges <a href="http://www.mastersportal.eu/study-options/270286872/computer-science-it-japan.html">here</a>.</p>

<p>So apparently the process for getting into a Japanese college for Master’s can take two paths. The first is like so:</p>

<ol>
  <li>Talk to a professor and gain a research assistantship with him/her.</li>
  <li>Give an exam and enroll for a 2 year master’s course if you pass that exam.</li>
</ol>

<p>The second is directly give the exam, but I’m not sure how that can be done since they all appear to be written examinations that are conducted in Japan.</p>

<h3 id="16-august-2016">16 August 2016</h3>

<p>Having a look at the graudate schools of <a href="http://www.u-tokyo.ac.jp/en/academics/grad_ist.html">University of Tokyo</a>, <a href="http://educ.titech.ac.jp/eng/">Tokyo Insitute of Technology</a> and Kyoto University today.</p>

<p><strong>University of Tokyo</strong></p>

<p>UoT seems to have some special selection process for international applicants (<a href="http://www.i.u-tokyo.ac.jp/ist_en/howto_apply/special.shtml">link</a>), though it’s not useful for me. There’s a decent contact page <a href="http://www.i.u-tokyo.ac.jp/edu/entra/index_e.shtml">here</a>. They’ve also put up a check list for applications <a href="http://www.i.u-tokyo.ac.jp/edu/entra/pdf/check_list_m_e_revised.pdf">here</a>.</p>

<p><strong>Tokyo Inst. of Technology</strong></p>

<p>This also has a good <a href="http://www.titech.ac.jp/english/graduate_school/">graduate program</a>.Tokyo Inst. of Technology has an <a href="http://www.titech.ac.jp/english/graduate_school/international/international_graduate/">international graduate program for overseas applicants</a>. The courses seems to be in English mostly. The school of computer science has also <a href="http://www.titech.ac.jp/english/graduate_school/international/international_graduate/participating.html">participated</a> in the IGP and accept the IGP(A), IGP(B)3 and IGP(C) types of applicants. I seem to be most qualified for the <a href="http://www.titech.ac.jp/english/graduate_school/international/graduate_program_a/index.html">IGP(A)</a> and <a href="http://www.titech.ac.jp/english/graduate_school/international/graduate_program_c/overseas.html">IGP(C)</a> applications.</p>

<p>The ‘Education Program of Advanced Information Technology Leaders’ seems to be most relevant to my case. <a href="http://www.titech.ac.jp/guide/guide_28/English/index.html">This</a> looks like a good PDF to brief about the program.</p>

<p>All the courses require students to arrange for a Tokyo Tech faculty member to serve as their academic supervisor. <a href="http://search.star.titech.ac.jp/titech-ss/lang.act?forward=search.act&amp;lang=en&amp;">This handy web application</a> allows you to do that. They also have the MEXT scholarship for outstanding students.</p>

<p><strong>University of Kyoto</strong></p>

<p><a href="http://www.kuis.kyoto-u.ac.jp/kuis/">Page of dept. of information science</a>.</p>

<h3 id="17-august-2016">17 August 2016</h3>

<p>Continuing my research on Tokyo Inst. of Technology. The PDF I pointed to yesterday brought out an interesting observation - IGP(A) students and IGP(C) students seem to have different course work.</p>

<h3 id="18-august-2016">18 August 2016</h3>

<p>It seems the IGP C program at Tokyo Tech. is best for me. I will research that further today. Most probably I’ll need to do a 6 month research assistantship first. <a href="http://www.cs.titech.ac.jp/labs-e.html">Here’s a list</a> of the research groups of the Computer Sci. deptartment at Tokyo Tech.</p>

<h3 id="20-august-2016">20 August 2016</h3>

<p><strong>Tokyo Inst. of Technology</strong></p>

<p>Found a list of faculties under the IGP(C) program <a href="http://www.titech.ac.jp/english/graduate_school/international/graduate_program_c/pdf/listoffaculties_1609c.pdf">here</a>.</p>

<h3 id="23-august-2016">23 August 2016</h3>

<p>Had a look at Kyushu Inst. of Technology today. The <a href="http://www.kyutech.ac.jp/english/admissions/guidelines/iizuka_master.html">program for international students</a> looks good.</p>

<p>Also check out scholarship opportunities at Tokyo Inst. of Technology. Links - <a href="http://www.titech.ac.jp/english/graduate_school/international/scholarships/">1</a>, <a href="http://www.titech.ac.jp/english/graduate_school/international/scholarships/before_enrollment.html">2</a>, <a href="http://www.mastersportal.eu/universities/scholarships/13128/tokyo-institute-of-technology.html">3</a>. There are a bunch of scholarships that can be applied to before you enrol in university. Have a look <a href="http://www.titech.ac.jp/english/graduate_school/international/scholarships/before_enrollment.html">here</a>.</p>

<p>There’s also the <a href="http://www.titech.ac.jp/english/graduate_school/international/scholarships/mext_scholarship.html">MEXT scholarship</a>from the Japanese government.</p>

<h3 id="24-august-2016">24 August 2016</h3>

<p>Found an interesting <a href="http://www.ic.u-tokyo.ac.jp/ic/guidance/guide05_e.html">FAQ on the UoT website</a>.</p>

<p>Also having a look at <a href="http://www.jasso.go.jp/en/study_j/scholarships/brochure.html">JASSO scholarships</a>. Found some great scholarships <a href="http://www.jasso.go.jp/en/study_j/scholarships/__icsFiles/afieldfile/2016/03/29/scholarshipse_private.pdf">here</a>.</p>

<h3 id="25-august-2016">25 August 2016</h3>

<p>Found some scholarships. Also, I can also enrol as a <a href="http://www.titech.ac.jp/english/graduate_school/international/research_students/privately_funded.html">privately funded research student</a> at Tokyo Tech.</p>

<p><a href="http://www.titech.ac.jp/english/graduate_school/international/research_students/syutugan/data/applicationoutline.pdf">This</a> is a PDF that talks about privately funded research students.</p>

<p>Also checking out <a href="http://www.global.keio.ac.jp/en/education/admissions/graduate.html">Keio University</a> today. They have a program for internation graduate students. Have a look <a href="http://www.st.keio.ac.jp/english/admissions/masters_program/index.html">here</a>.</p>

<p>I also had a look at the <a href="http://www.kyoto-u.ac.jp/en/education-campus/international/students1">Kyoto University IGP</a>. Here’s a <a href="http://www.shanghairanking.com/World-University-Rankings-2014/Japan.html">listing of Japanese universities</a>.</p>

<h3 id="28-august-2016">28 August 2016</h3>

<p>Found a <a href="http://www.g30.i.kyoto-u.ac.jp/en/course">Computer Engineering IGP at Kyoto University</a>, though I still cant find anything related to HPC. This is a link that has <a href="http://www.g30.i.kyoto-u.ac.jp/en/admission">some details on admissions</a>.</p>

<p>More details on Tokyo Tech.’s IGP(A) can be found <a href="http://www.ise.titech.ac.jp/english/igpa/detail_114.html">here</a>. <a href="http://www.titech.ac.jp/guide/guide_27/English/index.html">This</a> looks like a good resource for curriculum. <a href="http://www.titech.ac.jp/english/graduate_school/international/scholarships/without_university.html">This</a> has resources for scholarships without recommendation.</p>

<h3 id="29-august-2016">29 August 2016</h3>

<p>Found a good resource on IGP programs at Tokyo Tech <a href="http://www.ai.cs.titech.ac.jp/IGP_PR_Program_Final.pdf">here</a>. <a href="http://www.ise.titech.ac.jp/english/igpa/IGPAprogram.pdf">Here’s a PPT</a> about IGP(A) in particular. IGP(A) coursework can be found <a href="http://www.titech.ac.jp/guide/guide_28/English/pdf/A-05.pdf#page=1">here</a>.</p>

<h4 id="4-november-2016">4 November 2016</h4>

<p>Posting after quite a while!</p>

<p>I’m currently having a look at <a href="http://www.jku.at/content/e262/e256786">Linz University, Austria</a>. I came to know one of the research groups there is really good and are making some solid progress in high performant software.</p>

<p>Here’s the <a href="http://informatik.jku.at/teaching/prospective/en/admissions.html">admissions page of the dept. of computer science</a>. Here’s <a href="http://www.jku.at/content/e262/e244/e167855/e167857">more info</a> on admissions. <a href="http://informatik.jku.at/teaching/curricula/2013/CS_Master_Guide.pdf">This is a PDF</a> on the Computer Science degree.</p>

<p>The <a href="http://www.ssw.uni-linz.ac.at/">System Software group</a> looks nice.</p>

<h4 id="25-december-2016">25 December 2016</h4>

<p>Checking out the <a href="http://catalog.uic.edu/gcat/colleges-schools/engineering/cs/">Computer Science</a> program at UIC and that at <a href="http://www.uh.edu/nsm/computer-science/graduate/programs/">University of Houston</a>.</p>

<p>This is <a href="https://www.cs.uic.edu/">UICs website</a>. This is the <a href="https://www.cs.uic.edu/~grad/2015_Graduate_Program_Requirements.pdf">detailed PDF</a> of the MS in CS requirements.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Thoughts on Bass Tone]]></title>
    <link href="http://v0dro.github.io/blog/2016/07/12/random-thoughts-on-bass-tone/"/>
    <updated>2016-07-12T20:09:06+09:00</updated>
    <id>http://v0dro.github.io/blog/2016/07/12/random-thoughts-on-bass-tone</id>
    <content type="html"><![CDATA[<p>This post is about my learnings about bass tone. I’m currently using the following rig:</p>

<ul>
  <li>Laney RB2 amplifier</li>
  <li>Tech 21 Sansamp Bass Driver Programmable DI</li>
  <li>Fender Mexican Standard Jazz Bass (4 string)</li>
</ul>

<p>I will updating this post as and when I learn something new that I’d like to document or share. Suggestions are welcome. You can email me (see the ‘about’ section) or post a comment below.</p>

<h4 id="26-july-2016">26 July 2016</h4>

<p>As of now I’m tweaking the sansamp and trying to achieve good tone that will compliment the post/prog rock sound of my band <a href="">Cat Kamikazee</a>. I’m also reading up on different terminologies and use cases on the internet. For instance I found <a href="http://www.premierguitar.com/articles/solving-the-bass-di-dilemma-1">this explanation</a> on DI boxes quite useful. For instance I learned that the ‘XLR Out Pad’ button on the sansamp actually provides a 20 db cut to the soundboard if your signal is too hot.</p>

<p>I am trying to couple the sansamp with a basic overdrive pedal I picked up from a friend. <a href="https://www.talkbass.com/threads/sansamp-bddi-pedal-placement.843750/">This thread on talkbass</a> is pretty useful for that. The guy who answered the question states that it’s better to place the sansamp last in the chain so that the DI can deliver the output of the sound chain.</p>

<p>So the BLEND knob on the sansamp modulates how much of the dry signal is mixed with the sansamp tube amplifier emulation circutry. Can be useful when chaining effects pedals with the sansamp by reducing the blend and letting more of the dry signal pass through. Btw the <em>bass</em>, <em>treble</em> and <em>level</em> controls remain active irrespective of the position of BLEND.</p>

<p>One thing that was a little confusing was the whole thing about ‘harmonic partials’. I found a pretty informative thread about the same on <a href="https://www.talkbass.com/threads/what-are-upper-harmonics-or-harmonic-partials.471553/">this TalkBass thread</a>.</p>

<p><a href="http://www.studybass.com/gear/bass-effects/bass-compressor-settings/">Here’s</a> an interesting piece on compressors.</p>

<p>Some more useful links I came across over the course of the past few days:</p>

<ul>
  <li>https://theproaudiofiles.com/amp-overdrive-vs-pedal-overdrive/</li>
  <li>http://www.offbeatband.com/2009/08/the-difference-between-gain-volume-level-and-loudness/</li>
</ul>

<h4 id="28-july-2016">28 July 2016</h4>

<p>Found an interesting and informative piece on bass pedals <a href="http://www.premierguitar.com/articles/Bass_Pedals_Basic_to_Playhouse">here</a>. It’s a good walkthrough of different pedal types and their functionality and purpose.</p>

<p>I wanted to check out some overdrive pedals today but was soon sinking in a sea of terminologies. One thing that intrigued me is the difference between an overdrive, distortion and fuzz. I found a <a href="http://www.gibson.com/News-Lifestyle/Features/en-us/effects-explained-overdrive-di.aspx">pretty informative article</a> on this topic. The author has the following to say about these 3 different but seemingly similar things.</p>

<p>I had a look at the Darkglass b3k and b7k pedals too. They look like promising overdrive pedals. I’ll explore the b3k more since the only difference between the 3 and the 7 is that the 7 also functions as a DI box and has an EQ, while the 3 doesn’t. I already have a DI with a 2 band EQ in the sansamp.</p>

<h4 id="29-july-2016">29 July 2016</h4>

<p>One thing that I noticed when tweaking my sansamp is the level of ‘distortion’ in my tone varies a LOT when you change the bass or treble keeping the drive at the same level. Why does this happen?</p>

<h4 id="2-august-2016">2 August 2016</h4>

<p>Trying to dive further into distortion today. Found <a href="http://www.tyquinn.com/2009/lead-tone-part-3-distortion/">this</a> article kind of useful. It relates mostly to lead guitar tones, but I think it applies in a general case too. I learned about symmetric and asymmetric clipping in that article.</p>

<p>According to the article, symmetric clipping is more focused and clear, because it is only generating one set of harmonic overtones. Since asymmetric clipping can be hard-clipped on one side, and soft-clipped on the other, it has the potential to create very thick complex sounds. This means that if you want plenty of overtones, but do not want a lot of gain, asymmetric clipping can be useful. For full-blown distortion symmetric clipping is usually more suitable, since high-gain tones are already very harmonically complex. <em>Typically asymmetric clipping will have a predominant first harmonic, which the symmetric clipping will not</em> (that’s probably why in <a href="https://www.youtube.com/watch?v=pzua3-xZKHM">this</a> video, the SD1 sounds brigther than than the TS-9). High gain distortion tones sound best with most of the distortion coming from the pre-amp, so try to use a fairly neutral pickup or even a slightly ‘bright’ pickup.</p>

<p>The follow up to the above post <a href="http://www.tyquinn.com/2009/lead-tone-part-4-eq-for-distortion-voicing/">talks about EQ in relation with distortion</a>. It has stuff on pre and post EQ distortion and how it can affect the overall tone. If you place the EQ before the distortion, you can actually shape which frequencies will be clipped. However if you place it after the distortion then the EQ will only act for shaping the already distorted tone. Pre-dist EQ is more useful in most cases since it let’s you control the frequencies for clipping.</p>

<p>It also says that humbucking pickups have a mid-boost that is more focused by the lower part of the frequency range. Single coil pickups on the other hand have a mid-boost focused by the upper part of the frequency range. Single coils generally have clearer, more articulate bass end.</p>

<h4 id="3-august-2016">3 August 2016</h4>

<p>Read something about bass DI in <a href="http://www.bestbassgear.com/ebass/gear/electronics/pedals/why-is-di-so-important-to-bass-players.html">this</a> article today.</p>

<h4 id="10-october-2016">10 October 2016</h4>

<p>Posting after quite a while!</p>

<p>Reading about the use of compression for bass guitars. Found <a href="http://www.studybass.com/gear/bass-effects/bass-compressors/">this article</a> which explains why we need compression in the first place.</p>

<p>Also, my band’s installation of Main Stage 3 has started giving some really weird problems. More about that soon.</p>

<h4 id="11-october-2016">11 October 2016</h4>

<p>Coming back to Main Stage. For some reason, pressing Space Bar for play/pause reduces the default sampling rate and makes the tracks sound weird. We need to go to preferences and increase the sampling rate to 48 kHz again (that’s what our backing tracks are recorded at). I think its something to do with the key mappings, but I’m not sure. Will need to check it out.</p>

<p>It also so happens that after the space bar has been pressed and the issue with the sampling rate is resolved, the samples (which come from a M-Audio M-Track) start emitting a strange crackling sound. This sounds persists only if the headphones are connected into the audio jack (we use the onboard Mac sound card too). The sound goes away if the headphones are unplugged. Restarting the Mac resolves the issue. I suspect there might be a way without having to restart. Will investigate.</p>

<p>Turns out you just restart and it solves the problem (and be careful about what keys you press when on stage!). Not worth scratching your head too much.</p>

<h4 id="9-november-2016">9 November 2016</h4>

<p>I just got a new EHX Micro POG octaver pedal and a TC electronic booster pedal. Also got a TC electronics Polytune. Finally on my way to creating a pedal chain :)</p>

<p>So for now I’m using the pedals in this order:</p>

<p>Tuner -&gt; Octaver -&gt; Booster -&gt; Sansamp</p>

<p>I think this works fine for me for now, though I might change something later on.</p>

<p>I read in <a href="https://www.talkbass.com/threads/good-uses-for-an-octave-pedal.603423/">this thread</a> that using one octave down with an overdrive (on the sansamp) works wonders. Gonna try that now!</p>

<p>I am also having a look at <a href="http://smartbassguitar.com/how-to-set-up-a-pedal-board-for-bassists/#.WCNfwfpvbeQ">this guide</a> on setting up a pedal board.</p>

<h4 id="18-november-2016">18 November 2016</h4>

<p>Also found an <a href="https://www.youtube.com/watch?v=JsgUqLdgQ1U">interesting rig rundown</a> by Tim Commerford (RATM).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Screencasts in Debian]]></title>
    <link href="http://v0dro.github.io/blog/2016/07/05/making-screencasts-in-debian/"/>
    <updated>2016-07-05T16:37:45+09:00</updated>
    <id>http://v0dro.github.io/blog/2016/07/05/making-screencasts-in-debian</id>
    <content type="html"><![CDATA[<h1 id="overview">Overview</h1>

<p>I thought I’ll try something new by recording screencasts for some of my <a href="https://github.com/v0dro">work on Ruby</a> open source libraries.</p>

<p>This is quite a change for me since I’m primarily focused on the programming and designing side of things. Creating documentation is something I’ve not ventured into a lot except the usual <a href="http://yardoc.org/">YARD markup</a> for Ruby methods and classes.</p>

<p>In this blog post (which I will keep updating as time progresses) I hope to document my efforts in creating screencasts. Mind you this is the first time I’m creating a screencast so if you find any potential improvements in my methods please point them out in the comments.</p>

<h1 id="creating-the-video">Creating the video</h1>

<p>My first ever screencast will be for my <a href="https://github.com/v0dro/benchmark-plot">benchmark-plot</a> gem. For creating the video I’m mainly using two tools - <a href="https://kdenlive.org/">Kdenlive</a> for video editing and <a href="https://launchpad.net/kazam">Kazam</a> for recording screen activity. I initially tried using <a href="http://www.pitivi.org/">Pitivi</a> and <a href="http://www.openshot.org/">OpenShot</a> for video editing, but the former did not seem user friendly and the latter kept crashing on my system. For the desktop recording I first tried using <a href="http://recordmydesktop.sourceforge.net/about.php">RecordMyDesktop</a> but gave up on it since it’s too heavy on resources and recoreded poor quality screencasts with not too many customization options.</p>

<p>For creating informative visuals, I’m using <a href="https://www.libreoffice.org/discover/impress/">LibreOffice Impress</a> so that I can create a slide, take it’s screenshot when in slideshow mode and put in the screencast. However I’ve generally found that using slides does not serve well the content delivery in a screencast and will probably not feature too many slides in future screencasts.</p>

<p><a href="https://www.sublimetext.com/3">Sublime Text 3</a> is my primary text editor. I use it’s in built code execution functionality (by pressing <code>Ctrl + Shift + B</code>) to execute a code snippet and display the results immediately.</p>

<h1 id="creating-the-audio">Creating the audio</h1>

<p>I am using Audacity for recording sound. Sadly my mic produces a lot of noise, so for removing that noise in Audacity, I use the inbuilt noise reduction tools.</p>

<p>Noise reduction in Audacity can be achieved by first selecting a small part of the sound that does not contain speech, then go to Effects -&gt; Noise Reduction and click on ‘Get Noise Profile’. Then select the whole sound wave with <code>Ctrl + A</code>. Go to Effects -&gt; Noise Reduction again and click ‘OK’. It should considerably reduce static noise from your sound file.</p>

<p>All files are exported to Ogg Vorbis.</p>

<h1 id="putting-it-all-together">Putting it all together</h1>

<p>I did some research on the screencasting process and found <a href="http://devblog.avdi.org/2013/01/21/my-screencasting-process/">this article</a> by Avdi Grimm and <a href="https://build-podcast.com/setup/">this one</a> by Sayanee Basu extremely helpful.</p>

<p>I first started by writing the transcript along with any code samples that I had to show. I made it a point to describe the code being typed/displayed on the screen since it’s generally more useful to have a voice over explaning the code than having to pause the video and go over it yourself.</p>

<p>Then I recorded the voice over just for the part that featured slides. I imported the screenshots of the slides in kdenlive and adjusted them such that they fit the voice over. Recording the code samples was a bit of a challenge. I started typing out the code and talking about it into the mic. This was more difficult than I thought, almost like playing a Guitar and singing at the same time. I ended up recording the screencast in 4 separate takes, with several retakes for each take.</p>

<p>After importing the screencast with voice over into kdenlive and separating the audio and video components, I did some cuts to reduce redundancy or imperfections in my VO. Some of the parts of the video where there was a lot of typing had to be sped up by using kdenlive’s Speed tool.</p>

<p>Once this was upto my satisfaction, I exported it to mp4.</p>

<p>The video of my first screencast is now up on YouTube in the video below. Have a look and leave your feedback in the comments!</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/WW6M4Df-soQ" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summary of Work This Summer for GSOC 2015]]></title>
    <link href="http://v0dro.github.io/blog/2015/08/16/summary-of-work-this-summer-for-gsoc-2015/"/>
    <updated>2015-08-16T17:08:51+09:00</updated>
    <id>http://v0dro.github.io/blog/2015/08/16/summary-of-work-this-summer-for-gsoc-2015</id>
    <content type="html"><![CDATA[<p>Over this summer as a part of <a href="www.google-melange.com">Google Summer of Code 2015</a>, <a href="www.github.com/v0dro/daru/">daru</a> received a lot of upgrades and new features which have made a pretty robust tool for data analysis in pure ruby. Of course, a lot of work still remains for bringing daru at par with the other data analysis solutions on offer today, but I feel the work done this summer has put daru on that path.</p>

<p>The new features led to the inclusion of daru in many of SciRuby’s gems, which use daru’s data storage, access and indexing features for storing and carrying around data. <a href="https://github.com/SciRuby/statsample">Statsample</a>, <a href="https://github.com/SciRuby/statsample-glm">statsample-glm</a>, <a href="https://github.com/SciRuby/statsample-timeseries">statsample-timeseries</a>, <a href="https://github.com/SciRuby/statsample-bivariate-extension">statsample-bivariate-extensions</a> are all now compatible with daru and use Vector and DataFrame as their primary data structures. Daru’s <a href="http://nbviewer.ipython.org/github/SciRuby/sciruby-notebooks/blob/master/Visualization/Visualizing%20data%20with%20daru%20DataFrame.ipynb">plotting functionality</a>, that interfaced with <a href="https://github.com/domitry/nyaplot">nyaplot</a> for creating interactive plots directly from the data was also significantly overhauled.</p>

<p>Also, new gems developed by other GSOC students, notably <a href="https://github.com/dilcom/gnuplotrb">Ivan’s GnuplotRB gem</a> and <a href="https://github.com/agisga/mixed_models">Alexej’s mixed_models gem</a> both accept data from daru data structures. Do see their repo pages for seeing interesting ways of using daru.</p>

<p>The work on daru is also proving to be quite useful for other people, which led a talk/presentation at <a href="http://www.deccanrubyconf.org/">DeccanRubyConf 2015</a>, which is one of the three major ruby conferences in India. You can see the slides and notebooks presented at the talk <a href="https://github.com/v0dro/talks/tree/master/DeccanRubyConf15">here</a>. Given the current interest in data analysis and the need for a viable solution in ruby, I plan to take daru much further. Keep watching the repo for interesting updates :)</p>

<p>In the rest of this post I’ll elaborate on all the work done this summer.</p>

<h2 id="pre-mid-term-submissions">Pre-mid term submissions</h2>

<p>Daru as a gem before GSOC was not exactly user friendly. There were many cases, particularly the iterators, that required some thinking before anybody used them. This is against the design philosophy of daru, or even ruby general, where surprising programmers with ubiqtuos constructs is usually frowned down upon by the community. So the first thing that I did mainly concerned overhauling the daru’s many iterators for both <code>Vector</code> and <code>DataFrame</code>.</p>

<p>For example, the <code>#map</code> iterator from <code>Enumerable</code> returns an <code>Array</code> no matter object you call it on. This was not the case before, where <code>#map</code> would a <code>Daru::Vector</code> or <code>Daru::DataFrame</code>. This behaviour was changed, and now <code>#map</code> returns an <code>Array</code>. If you want a <code>Vector</code> or a <code>DataFrame</code> of the modified values, you should call <code>#recode</code> on <code>Vector</code> or <code>DataFrame</code>.</p>

<p>Each of these iterators also accepts an optional argument, <code>:row</code> or <code>:vector</code>, which will define the axis over which iteration is supposed to be carried out. So now there are the <code>#each</code>, <code>#map</code>, <code>#map!</code>, <code>#recode</code>, <code>#recode!</code>, <code>#collect</code>, <code>#collect_matrix</code>, <code>#all?</code>, <code>#any?</code>, <code>#keep_vector_if</code> and <code>#keep_row_if</code>. To iterate over elements along with their respective indexes (or labels), you can likewise use <code>#each_row_with_index</code>, <code>#each_vector_with_index</code>, <code>#map_rows_with_index</code>, <code>#map_vector_with_index</code>, <code>#collect_rows_with_index</code>, <code>#collect_vector_with_index</code> or <code>#each_index</code>. I urge you to go over the docs of each of these methods to utilize the full power of daru.</p>

<p>Apart from this there was also quite a bit of refactoring involved for many methods (courtesy <a href="https://github.com/agisga">Alexej</a>). This has made daru much faster than previous versions.</p>

<p>The next (major) thing to do was making daru compatible with statsample. This was very essential since statsample is very important tool for statistics in ruby and it was using its own <code>Vector</code> and <code>Dataset</code> classes, which weren’t very robust as computation tools and very difficult to use when it came to cleaning or munging data. So I replaced statsample’s Vector and Dataset clases with Daru::Vector and Daru::DataFrame. It involved a significant amount of work on both statsample and daru. Statsample because many constructs had to changed to make them compatible with daru, and daru because there was a lot of essential functionality in these classes that had to be ported to daru.</p>

<p>Porting code from statsample to daru improved daru significantly. There were a whole of statistics methods in statsample that were imported into daru and you can now use all them from daru. Statsample also works well with <a href="https://github.com/clbustos/rubyvis">rubyvis</a>, a great tool for visualization. <a href="https://github.com/SciRuby/statsample#visualizations">You can now do that with daru as well</a>.</p>

<p>Many new methods for reading and writing data to and from files were also added to daru. You can now read and write data to and from CSV, Excel, plain text files or even SQL databases.</p>

<p>In effect, daru is now completely compatible with statsample (and all the other statsample extensions). You can use daru data structures for storing data and pass them to statsample for performing computations. The biggest advantage of this approach is that the analysed data can be passed around to other scientific ruby libraries (some of which listed above) that use daru as well. Since daru offers in-built functions to better ‘see’ your data, better visualization is possible.</p>

<p>See these <a href="https://github.com/v0dro/daru#blog-posts">blogs</a> and <a href="https://github.com/v0dro/daru#notebooks">notebooks</a> for a complete overview of daru’s new features.</p>

<p>Also see the <a href="https://github.com/SciRuby/statsample#notebooks">notebooks in the statsample README</a> for using daru with statsample.</p>

<h2 id="post-mid-term-submissions">Post-mid term submissions</h2>

<p>Most of time post the mid term submissions was spent in implementing the time series functions for daru.</p>

<p>I implemented a new index, the DateTimeIndex, which can used for indexing data on time stamps. It enables users to query data based on time stamps. Time stamps can either be specified with precise ruby DateTime objects or can be specified as strings, which will lead to retrival of all the data falling under that time. For example specifying ‘2012’ returns all data that falls in the year 2012. See detailed usage of <code>DateTimeIndex</code> in conjunction with other daru constructs <a href="https://github.com/v0dro/daru/blob/master/README.md">in the daru README</a>.</p>

<p>An essential utility in implementing <code>DateTimeIndex</code> was <code>DateOffset</code>, which is a new set of classes that offsets dates based on certain rules or business logic. It can advance or lag a ruby <code>DateTime</code> to the nearest day or any day of the week or the end or beginning of the month etc. <code>DateOffset</code> is an essential part of <code>DateTimeIndex</code> and can also be used as a standalone utility for advancing/lagging <code>DateTime</code> objects. <a href="http://v0dro.github.io/blog/2015/07/27/date-offsets-in-daru/">This blog post</a> elaborates more on the nuances of <code>DateOffset</code> and its usage.</p>

<p>The last thing done during the post mid term was complete compatibility with <a href="https://github.com/SciRuby/statsample-timeseries">statsample-timeseries</a>, which was created by <a href="https://github.com/AnkurGel">Ankur Goel</a> during GSOC 2013. It offers many uesful functions for analysis of time series data. It now works with daru containers. See some use cases <a href="https://github.com/SciRuby/statsample-timeseries/blob/master/README.rdoc">here</a>.</p>

<p>Thats all, as far as I can remember.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elaboration on Certain Internals of Daru]]></title>
    <link href="http://v0dro.github.io/blog/2015/08/16/elaboration-on-certain-internals-of-daru/"/>
    <updated>2015-08-16T17:06:34+09:00</updated>
    <id>http://v0dro.github.io/blog/2015/08/16/elaboration-on-certain-internals-of-daru</id>
    <content type="html"><![CDATA[<p>In this blog post I will elaborate on how a few of the features in <a href="https://github.com/v0dro/daru">daru</a> were implemeted. Notably I will stress on what spurred a need for that particular design of the code.</p>

<p>This post is primarily intended to serve as documentation for me and future contributors. If readers have any inputs on improving this post, I’d be happy to accept new contributions :)</p>

<h2 id="index-factory-architecture">Index factory architecture</h2>

<p>Daru currently supports three types of indexes, Index, MultiIndex and DateTimeIndex.</p>

<p>It became very tedious to write if statements in the Vector or DataFrame codebase whenever a new data structure was to be created, since there were 3 possible indexes that could be attached with every data set. This mainly depended on what kind of data was present in the index, i.e. tuples would create a MultiIndex, DateTime objects or date-like strings would create a DateTimeIndex, and everything else would create a Daru::Index.</p>

<p>This looked something like the perfect use case for the <a href="https://en.wikipedia.org/wiki/Factory_method_pattern">factory pattern</a>, the only hurdle being that the factory pattern in the pure sense of the term would be a superclass, something called <code>Daru::IndexFactory</code> that created an Index, DateTimeIndex or MultiIndex index using some methods and logic. The problem is that I did not want to call a separate class for creating Indexes. This would break existing code and possibly cause problems in libraries that were already using daru (viz. <a href="https://github.com/SciRuby/statsample">statsample</a>), not to mention confusing users about which class they’re actually supposed to be using.</p>

<p>The solution came after I read <a href="http://blog.sidu.in/2007/12/rubys-new-as-factory.html">this blog post</a>, which demonstrates that the <code>.new</code> method for any class can be overridden. Thus, instead of calling <code>initialize</code> for creating the instance of a class, it calls the overridden <code>new</code>, which can then call initialize for instantiating an instance of that class. It so happens that you can make <code>new</code> return any object you want, unlike initialize which must an instance of the class it is declared in. Thus, for the factory pattern implementation of Daru::Index, we over-ride the <code>.new</code> method of the Daru::Index and write logic such that it manufactures the appropriate kind of index based on the data that is passed to <code>Daru::Index.new(data)</code>. The pseudo code for doing this looks something like this:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
</pre></td>
  <td class="code"><pre>
<span class="keyword">class</span> <span class="class">Daru::Index</span>
  <span class="comment"># some stuff...</span>

  <span class="keyword">def</span> <span class="predefined-constant">self</span>.<span class="function">new</span> *args, &amp;block
    source = args[<span class="integer">0</span>]

    <span class="keyword">if</span> source_looks_like_a_multi_index
      create_multi_index_and_return
    <span class="keyword">elsif</span> source_looks_like_date_time_index
      create_date_time_index_and_return
    <span class="keyword">else</span> <span class="comment"># Create the Daru::Index by calling initialize</span>
      i = <span class="predefined-constant">self</span>.allocate
      i.send <span class="symbol">:initialize</span>, *args, &amp;block
      i
    <span class="keyword">end</span>
  <span class="keyword">end</span>

  <span class="comment"># more stuff...</span>
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>

<p>Also, since over-riding <code>.new</code> tampers with the subclasses of the class as well, <a href="https://github.com/v0dro/daru/blob/master/lib/daru/index.rb#L14">an <code>inherited</code> hook that replaces the over-ridden <code>.new</code></a> of the inherited class with the original one was added to <code>Daru::Index</code>.</p>

<h2 id="working-of-the-where-clause">Working of the where clause</h2>

<p>The where clause in daru lets users query data with a Array containing boolean variables. So whenever you call <code>where</code> on Daru::Vector or DataFrame, and pass in an Array containing true or false values, all the rows corresponding with <code>true</code> will be returned as a Vector or DataFrame respectively.</p>

<p>Since the where clause works in cojunction with the comparator methods of Daru::Vector (which return a Boolean Array), it was essential for these boolean arrays to be combined together such that piecewise AND and OR operations could be performed between multiple boolean arrays. Hence, the <code>Daru::Core::Query::BoolArray</code> class was created, which is specialized for handling boolean arrays and performing piecewise boolean operations.</p>

<p>The BoolArray defines the <code>#&amp;</code> method for piecewise AND operations and it defines the <code>#|</code> method for piecewise OR operations. They work as follows:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

a = <span class="constant">Daru</span>::<span class="constant">Core</span>::<span class="constant">Query</span>::<span class="constant">BoolArray</span>.new([<span class="predefined-constant">true</span>,<span class="predefined-constant">false</span>,<span class="predefined-constant">false</span>,<span class="predefined-constant">true</span>,<span class="predefined-constant">false</span>,<span class="predefined-constant">true</span>])
<span class="comment">#=&gt; (Daru::Core::Query::BoolArray:84314110 bool_arry=[true, false, false, true, false, true])</span>
b = <span class="constant">Daru</span>::<span class="constant">Core</span>::<span class="constant">Query</span>::<span class="constant">BoolArray</span>.new([<span class="predefined-constant">false</span>,<span class="predefined-constant">true</span>,<span class="predefined-constant">false</span>,<span class="predefined-constant">true</span>,<span class="predefined-constant">false</span>,<span class="predefined-constant">true</span>])
<span class="comment">#=&gt; (Daru::Core::Query::BoolArray:84143650 bool_arry=[false, true, false, true, false, true])</span>
a &amp; b
<span class="comment">#=&gt; (Daru::Core::Query::BoolArray:83917880 bool_arry=[false, false, false, true, false, true])</span>
a | b
<span class="comment">#=&gt; (Daru::Core::Query::BoolArray:83871560 bool_arry=[true, true, false, true, false, true])</span>
</pre></td>
</tr></table>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding and Combining Data in Daru]]></title>
    <link href="http://v0dro.github.io/blog/2015/08/03/finding-and-combining-data-in-daru/"/>
    <updated>2015-08-03T03:52:19+09:00</updated>
    <id>http://v0dro.github.io/blog/2015/08/03/finding-and-combining-data-in-daru</id>
    <content type="html"><![CDATA[<h2 id="arel-like-query-syntax">Arel-like query syntax</h2>

<p><a href="https://github.com/rails/arel">Arel</a> is a very popular ruby gem that is one of the major components of the most popular ruby framework, <a href="https://github.com/rails/rails">Rails</a>. It is an ORM-helper of sorts that exposes a beatiful and intuitive syntax for creating SQL strings by chaining Ruby methods.</p>

<p>Daru successfully adopts this syntax and the result is a very intuitive and readable syntax for obtaining any sort of data from a DataFrame or Vector.</p>

<p>As a quick demonstration, lets create a DataFrame which looks like this:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

df = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new({
  <span class="key">a</span>: [<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>,<span class="integer">5</span>,<span class="integer">6</span>]*<span class="integer">100</span>,
  <span class="key">b</span>: [<span class="string"><span class="delimiter">'</span><span class="content">a</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">b</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">d</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">e</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">f</span><span class="delimiter">'</span></span>]*<span class="integer">100</span>,
  <span class="key">c</span>: [<span class="integer">11</span>,<span class="integer">22</span>,<span class="integer">33</span>,<span class="integer">44</span>,<span class="integer">55</span>,<span class="integer">66</span>]*<span class="integer">100</span>
}, <span class="key">index</span>: (<span class="integer">1</span>..<span class="integer">600</span>).to_a.shuffle)
df.head(<span class="integer">5</span>)

<span class="comment">#=&gt; </span>
<span class="comment">##&lt;Daru::DataFrame:80543480 @name = 3fc642f2-bd9a-4f6f-b4a8-0779253720f5 @size = 5&gt;</span>
<span class="comment">#                    a          b          c </span>
<span class="comment">#       109          1          a         11 </span>
<span class="comment">#       381          2          b         22 </span>
<span class="comment">#       598          3          c         33 </span>
<span class="comment">#       390          4          d         44 </span>
<span class="comment">#       344          5          e         55</span>
</pre></td>
</tr></table>
</div>

<p>To select all rows where <code>df[:a]</code> equals 2 or <code>df[:c]</code> equals 55, just write this:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre>
selected = df.where(df[<span class="symbol">:a</span>].eq(<span class="integer">2</span>) | df[<span class="symbol">:c</span>].eq(<span class="integer">55</span>))
selected.head(<span class="integer">5</span>)

<span class="comment"># =&gt; </span>
<span class="comment">##&lt;Daru::DataFrame:79941980 @name = 74175f76-9dce-4b5d-b85b-bdfbb650953e @size = 5&gt;</span>
<span class="comment">#                    a          b          c </span>
<span class="comment">#       381          2          b         22 </span>
<span class="comment">#       344          5          e         55 </span>
<span class="comment">#       135          2          b         22 </span>
<span class="comment">#       524          5          e         55 </span>
<span class="comment">#       266          2          b         22 </span>
</pre></td>
</tr></table>
</div>

<p>As is easily seen above, the Daru::Vector class has special comparators defined on it, which allow it to check each value of the Vector and return an object that can be evaluated by the <code>DataFrame#where</code> method.</p>

<p><strong>Notice that to club the two comparators above, we have used the union OR (<code>|</code>) operator.</strong></p>

<p>Daru::Vector has a bunch of comparator methods defined on it, which can be used with <code>#where</code> for obtaining the desired results. All of these return an object of type <code>Daru::Core::Query::BoolArray</code>, which is read by <code>#where</code>. <code>BoolArray</code> uses the methods <code>|</code> (also aliased as <code>#or</code>) and <code>&amp;</code> (also aliased as <code>#and</code>) for piecewise logical operations on other <code>BoolArray</code> objects.</p>

<p>BoolArray consists of an internal Array that contains <code>true</code> for every entry in the Vector that returns <code>true</code> for an operation between the comparable operand and a Vector entry.</p>

<p>For example,</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

vector = <span class="constant">Daru</span>::<span class="constant">Vector</span>.new([<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>,<span class="integer">5</span>,<span class="integer">6</span>,<span class="integer">7</span>,<span class="integer">8</span>,<span class="integer">2</span>,<span class="integer">3</span>])
vector.eq(<span class="integer">3</span>)
<span class="comment">#=&gt;(Daru::Core::Query::BoolArray:82379030 bool_arry=[false, false, true, false, false, false, false, false, false, true])</span>
</pre></td>
</tr></table>
</div>

<p>The <code>#&amp;</code> (or <code>#and</code>) and <code>#|</code> (or  <code>#or</code>) methods on BoolArray apply a logical <code>and</code> and a logical <code>or</code> respectively between each element of the BoolArray and return another BoolArray that contains the results. For example:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

vector = <span class="constant">Daru</span>::<span class="constant">Vector</span>.new([<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>,<span class="integer">5</span>,<span class="integer">6</span>,<span class="integer">7</span>,<span class="integer">7</span>,<span class="integer">8</span>,<span class="integer">9</span>,<span class="integer">9</span>,<span class="integer">9</span>,<span class="integer">7</span>,<span class="integer">5</span>,<span class="integer">4</span>,<span class="integer">3</span>,<span class="integer">4</span>])
vector.eq(<span class="integer">4</span>).or(vector.mt(<span class="integer">8</span>))
<span class="comment">#=&gt; (Daru::Core::Query::BoolArray:82294620 bool_arry=[false, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true]) </span>
</pre></td>
</tr></table>
</div>

<p>The following comparators can be used with a <code>Daru::Vector</code>:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Comparator Method</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><code>eq</code></td>
      <td style="text-align: left">Uses <code>==</code> and returns <code>true</code> for each <strong>equal</strong> entry</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>not_eq</code></td>
      <td style="text-align: left">Uses <code>!=</code> and returns <code>true</code> for each <strong>unequal</strong> entry</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>lt</code></td>
      <td style="text-align: left">Uses <code>&lt;</code> and returns <code>true</code> for each entry <strong>less than</strong> the supplied object</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>lteq</code></td>
      <td style="text-align: left">Uses <code>&lt;=</code> and returns <code>true</code> for each entry <strong>less than or equal to</strong> the supplied object</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>mt</code></td>
      <td style="text-align: left">Uses <code>&gt;</code> and returns <code>true</code> for each entry <strong>more than</strong> the supplied object</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>mteq</code></td>
      <td style="text-align: left">Uses <code>&gt;=</code> and returns <code>true</code> for each entry <strong>more than or equal to</strong> the supplied object</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>in</code></td>
      <td style="text-align: left">Uses <code>==</code> for each element in the collection (Array, Daru::Vector, etc.) passed and returns <code>true</code> for a match</td>
    </tr>
  </tbody>
</table>

<p>A major advantage of using the <code>#where</code> clause over <code>DataFrame#filter</code> or <code>Vector#keep_if</code>, apart from better readability and usability, is that it is much faster. <a href="https://github.com/v0dro/daru/blob/master/benchmarks/where_vs_filter.rb">These benchmarks</a> prove my point.</p>

<p>I’ll conclude this chapter with a little more complex example of using the arel-like query syntax with a <code>Daru::Vector</code> object:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

vec = <span class="constant">Daru</span>::<span class="constant">Vector</span>.new([<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>,<span class="integer">5</span>,<span class="integer">6</span>,<span class="integer">3</span>,<span class="integer">336</span>,<span class="integer">3</span>,<span class="integer">6</span>,<span class="integer">2</span>,<span class="integer">6</span>,<span class="integer">2</span>,<span class="integer">35</span>,<span class="integer">346</span>,<span class="integer">7</span>,<span class="integer">3</span>,<span class="integer">45</span>,<span class="integer">23</span>,<span class="integer">26</span>,<span class="integer">7</span>,<span class="integer">345</span>,<span class="integer">2525</span>,<span class="integer">22</span>,<span class="integer">66</span>,<span class="integer">2</span>])
vec.where((vec.eq(<span class="integer">4</span>) | vec.eq(<span class="integer">1</span>) | vec.mt(<span class="integer">300</span>)) &amp; vec.lt(<span class="integer">2000</span>))
<span class="comment"># =&gt; </span>
<span class="comment"># #&lt;Daru::Vector:70585830 @name = nil @size = 5 &gt;</span>
<span class="comment">#     nil</span>
<span class="comment">#   0   1</span>
<span class="comment">#   3   4</span>
<span class="comment">#   7 336</span>
<span class="comment">#  14 346</span>
<span class="comment">#  21 345</span>
</pre></td>
</tr></table>
</div>

<p>For more examples on using the arel-like query syntax, see <a href="">this notebook</a>.</p>
<h2 id="joins">Joins</h2>

<p>Daru::DataFrame offers the <code>#join</code> method for performing SQL style joins between two DataFrames. Currently #join supports inner, left outer, right outer and full outer joins between DataFrames.</p>

<p>In order to demonstrate joins, lets consider a single example of an inner on two DataFrames:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

left = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new({
  <span class="symbol">:id</span>   =&gt; [<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>],
  <span class="symbol">:name</span> =&gt; [<span class="string"><span class="delimiter">'</span><span class="content">Pirate</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Monkey</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Ninja</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Spaghetti</span><span class="delimiter">'</span></span>]
})
right = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new({
  <span class="symbol">:id</span> =&gt; [<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>],
  <span class="symbol">:name</span> =&gt; [<span class="string"><span class="delimiter">'</span><span class="content">Rutabaga</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Pirate</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Darth Vader</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Ninja</span><span class="delimiter">'</span></span>]
})
left.join(right, <span class="key">on</span>: [<span class="symbol">:name</span>], <span class="key">how</span>: <span class="symbol">:inner</span>)

<span class="comment">#=&gt; </span>
<span class="comment">##&lt;Daru::DataFrame:73134350 @name = 7cc250a9-108c-4ea3-99ab-dcb828ff2b88 @size = 2&gt;</span>
<span class="comment">#                 id_1       name       id_2 </span>
<span class="comment">#         0          1     Pirate          2 </span>
<span class="comment">#         1          3      Ninja          4 </span>
</pre></td>
</tr></table>
</div>

<p>For more examples please refer <a href="">this notebook</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analysis of Time Series in Daru]]></title>
    <link href="http://v0dro.github.io/blog/2015/07/31/analysis-of-time-series-in-daru/"/>
    <updated>2015-07-31T21:56:23+09:00</updated>
    <id>http://v0dro.github.io/blog/2015/07/31/analysis-of-time-series-in-daru</id>
    <content type="html"><![CDATA[<p>The newest release of daru brings alongwith it added support for time series data analysis, manipulation and visualization.</p>

<p>A time series is any data is indexed (or labelled) by time. This includes the stock market index, prices of crude oil or precious metals, or even geo-locations over a period of time.</p>

<p>The primary manner in which daru implements a time series is by indexing data objects (i.e Daru::Vector or Daru::DataFrame) on a new index called the DateTimeIndex. A DateTimeIndex consists of dates, which can queried individually or sliced.</p>

<h2 id="introduction">Introduction</h2>

<p>A very basic time series can be created with something like this:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>require <span class="string"><span class="delimiter">'</span><span class="content">distribution</span><span class="delimiter">'</span></span>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

rng = <span class="constant">Distribution</span>::<span class="constant">Normal</span>.rng

index  = <span class="constant">Daru</span>::<span class="constant">DateTimeIndex</span>.date_range(<span class="symbol">:start</span> =&gt; <span class="string"><span class="delimiter">'</span><span class="content">2012-4-2</span><span class="delimiter">'</span></span>, <span class="symbol">:periods</span> =&gt; <span class="integer">1000</span>, <span class="symbol">:freq</span> =&gt; <span class="string"><span class="delimiter">'</span><span class="content">D</span><span class="delimiter">'</span></span>)
vector = <span class="constant">Daru</span>::<span class="constant">Vector</span>.new(<span class="integer">1000</span>.times.map {rng.call}, <span class="key">index</span>: index)
</pre></td>
</tr></table>
</div>
<p><img class="center" src="http://v0dro.github.io/images/daru_time_series/simple_vector.png" alt="'A Simple Vector indexed on DateTimeIndex'" /></p>

<p>In the above code, the <code>DateTimeIndex.date_range</code> function is creating a <code>DateTimeIndex</code> starting from a particular date and spanning for 1000 periods, with a frequency of 1 day between period. For a complete coverage of DateTimeIndex see <a href="">this</a> notebook. For an introduction to the date offsets used by daru see <a href="http://v0dro.github.io/blog/2015/07/27/date-offsets-in-daru/">this blog post</a>.</p>

<p>The index is passed into the Vector like a normal <code>Daru::Index</code> object.</p>

<h2 id="statistics-functions-and-plotting-for-time-series">Statistics functions and plotting for time series</h2>

<p>Many functions are avaiable in daru for computing useful statistics and analysis. A brief of summary of statistics methods available on time series is as follows:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>Method Name</strong></th>
      <th style="text-align: center"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><code>rolling_mean</code></td>
      <td style="text-align: center">Calculate Moving Average</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_median</code></td>
      <td style="text-align: center">Calculate Moving Median</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_std</code></td>
      <td style="text-align: center">Calculate Moving Standard Deviation</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_variance</code></td>
      <td style="text-align: center">Calculate Moving Variance</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_max</code></td>
      <td style="text-align: center">Calculate Moving Maximum value</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_min</code></td>
      <td style="text-align: center">Calcuclate moving minimum value</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_count</code></td>
      <td style="text-align: center">Calculate moving non-missing values</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>rolling_sum</code></td>
      <td style="text-align: center">Calculate moving sum</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>ema</code></td>
      <td style="text-align: center">Calculate exponential moving average</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>macd</code></td>
      <td style="text-align: center">Moving Average Convergence-Divergence</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>acf</code></td>
      <td style="text-align: center">Calculate Autocorrelation Co-efficients of the Series</td>
    </tr>
    <tr>
      <td style="text-align: center"><code>acvf</code></td>
      <td style="text-align: center">Provide the auto-covariance value</td>
    </tr>
  </tbody>
</table>

<p>To demonstrate, the rolling mean of a Daru::Vector can be computed as follows:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>
require <span class="string"><span class="delimiter">'</span><span class="content">distribution</span><span class="delimiter">'</span></span>

rng    = <span class="constant">Distribution</span>::<span class="constant">Normal</span>.rng
vector = <span class="constant">Daru</span>::<span class="constant">Vector</span>.new(
  <span class="integer">1000</span>.times.map { rng.call }, 
  <span class="key">index</span>: <span class="constant">Daru</span>::<span class="constant">DateTimeIndex</span>.date_range(
    <span class="symbol">:start</span> =&gt; <span class="string"><span class="delimiter">'</span><span class="content">2012-4-2</span><span class="delimiter">'</span></span>, <span class="symbol">:periods</span> =&gt; <span class="integer">1000</span>, <span class="symbol">:freq</span> =&gt; <span class="string"><span class="delimiter">'</span><span class="content">D</span><span class="delimiter">'</span></span>)
)
<span class="comment"># Compute the cumulative sum</span>
vector = vector.cumsum
rolling = vector.rolling_mean <span class="integer">60</span>

rolling.tail
</pre></td>
</tr></table>
</div>
<p><img class="center" src="http://v0dro.github.io/images/daru_time_series/rolling_mean.png" alt="'Rolling Mean Tail'" /></p>

<p>This time series can be very easily plotted with its rolling mean by using the <a href="https://github.com/dilcom/gnuplotrb">GnuplotRB</a> gem:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">gnuplotrb</span><span class="delimiter">'</span></span>

<span class="constant">GnuplotRB</span>::<span class="constant">Plot</span>.new(
  [vector , <span class="key">with</span>: <span class="string"><span class="delimiter">'</span><span class="content">lines</span><span class="delimiter">'</span></span>, <span class="key">title</span>: <span class="string"><span class="delimiter">'</span><span class="content">Vector</span><span class="delimiter">'</span></span>],
  [rolling, <span class="key">with</span>: <span class="string"><span class="delimiter">'</span><span class="content">lines</span><span class="delimiter">'</span></span>, <span class="key">title</span>: <span class="string"><span class="delimiter">'</span><span class="content">Rolling Mean</span><span class="delimiter">'</span></span>])
</pre></td>
</tr></table>
</div>

<p><img class="center" src="http://v0dro.github.io/images/daru_time_series/cumsum_rolling_line_graph.png" alt="'Line Graph of Rolling mean and cumsum'" /></p>

<p>These methods are also available on DataFrame, which results in calling them on each of numeric vectors:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>
require <span class="string"><span class="delimiter">'</span><span class="content">distribution</span><span class="delimiter">'</span></span>

rng    = <span class="constant">Distribution</span>::<span class="constant">Normal</span>.rng
index  = <span class="constant">Daru</span>::<span class="constant">DateTimeIndex</span>.date_range(<span class="symbol">:start</span> =&gt; <span class="string"><span class="delimiter">'</span><span class="content">2012-4-2</span><span class="delimiter">'</span></span>, <span class="symbol">:periods</span> =&gt; <span class="integer">1000</span>, <span class="symbol">:freq</span> =&gt; <span class="string"><span class="delimiter">'</span><span class="content">D</span><span class="delimiter">'</span></span>)
df = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new({
  <span class="key">a</span>: <span class="integer">1000</span>.times.map { rng.call },
  <span class="key">b</span>: <span class="integer">1000</span>.times.map { rng.call },
  <span class="key">c</span>: <span class="integer">1000</span>.times.map { rng.call }
}, <span class="key">index</span>: index)
</pre></td>
</tr></table>
</div>
<p><img class="center" src="http://v0dro.github.io/images/daru_time_series/dataframe.png" alt="'DateTime indexed DataFrame'" /></p>

<p>In a manner similar to that done with Vectors above, we can easily plot each Vector of the DataFrame with GNU plot:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">gnuplotrb</span><span class="delimiter">'</span></span>

<span class="comment"># Calculate cumulative sum of each Vector</span>
df = df.cumsum

<span class="comment"># Compute rolling sum of each Vector with a loopback length of 60.</span>
r_sum = df.rolling_sum(<span class="integer">60</span>)

plots = []
r_sum.each_vector_with_index <span class="keyword">do</span> |vec,n|
  plots &lt;&lt; <span class="constant">GnuplotRB</span>::<span class="constant">Plot</span>.new([vec, <span class="key">with</span>: <span class="string"><span class="delimiter">'</span><span class="content">lines</span><span class="delimiter">'</span></span>, <span class="key">title</span>: n])
<span class="keyword">end</span>
<span class="constant">GnuplotRB</span>::<span class="constant">Multiplot</span>.new(*plots, <span class="key">layout</span>: [<span class="integer">3</span>,<span class="integer">1</span>], <span class="key">title</span>: <span class="string"><span class="delimiter">'</span><span class="content">Rolling sums</span><span class="delimiter">'</span></span>)
</pre></td>
</tr></table>
</div>
<p><img class="center" src="http://v0dro.github.io/images/daru_time_series/dataframe_plot.png" alt="'Plotting the DataFrame'" /></p>

<h2 id="usage-with-statsample-timeseries">Usage with statsample-timeseries</h2>

<p>Daru now integrates with <a href="https://github.com/SciRuby/statsample-timeseries">statsample-timeseries</a>, a <a href="https://github.com/sciruby/statsample">statsample</a> extension that provides many useful statistical analysis tools commonly applied to time series.</p>

<p>Some examples with working examples of daru and statsample-timseries are coming soon. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Date Offsets in Daru]]></title>
    <link href="http://v0dro.github.io/blog/2015/07/27/date-offsets-in-daru/"/>
    <updated>2015-07-27T16:51:42+09:00</updated>
    <id>http://v0dro.github.io/blog/2015/07/27/date-offsets-in-daru</id>
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Daru’s (Data Analysis in RUby) latest release (0.2.0) brings in a host of new features, most important among them being time series manipulation functionality. In this post, we will go over the date offsets that daru offers, which can be used for creating date indexes of specific intervals. The offsets offer a host of options for easy creation of different intervals and even work with standalone DateTime objects to increase or decrease time.</p>

<h2 id="offset-classes-and-behaviour">Offset classes and behaviour</h2>

<p>The date offsets are contained in the <code>Daru::Offsets</code> sub-module. A number of classes are offered, each of which implements business logic for advancing or retracting date times by a specific interval.</p>

<p>To demonstrate with a quick example:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

offset = <span class="constant">Daru</span>::<span class="constant">Offsets</span>::<span class="constant">Hour</span>.new
offset + <span class="constant">DateTime</span>.new(<span class="integer">2012</span>,<span class="integer">4</span>,<span class="integer">5</span>,<span class="integer">4</span>)
<span class="comment">#=&gt; #&lt;DateTime: 2012-04-05T05:00:00+00:00 ((2456023j,18000s,0n),+0s,2299161j)&gt;</span>
</pre></td>
</tr></table>
</div>

<p>As you can see in the above example, an hour was added to the time specified by DateTime and returned. All the offset classes work in a similar manner. Following offset classes are available to users:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>Offset Class</strong></th>
      <th style="text-align: center"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Daru::DateOffset</td>
      <td style="text-align: center">Generic offset class</td>
    </tr>
    <tr>
      <td style="text-align: center">Second</td>
      <td style="text-align: center">One Second</td>
    </tr>
    <tr>
      <td style="text-align: center">Minute</td>
      <td style="text-align: center">One Minute</td>
    </tr>
    <tr>
      <td style="text-align: center">Hour</td>
      <td style="text-align: center">One Hour</td>
    </tr>
    <tr>
      <td style="text-align: center">Day</td>
      <td style="text-align: center">One Day</td>
    </tr>
    <tr>
      <td style="text-align: center">Week</td>
      <td style="text-align: center">One Week. Can be anchored on any week of the day.</td>
    </tr>
    <tr>
      <td style="text-align: center">Month</td>
      <td style="text-align: center">One Month.</td>
    </tr>
    <tr>
      <td style="text-align: center">MonthBegin</td>
      <td style="text-align: center">Calendar Month Begin.</td>
    </tr>
    <tr>
      <td style="text-align: center">MonthEnd</td>
      <td style="text-align: center">Calendar Month End.</td>
    </tr>
    <tr>
      <td style="text-align: center">Year</td>
      <td style="text-align: center">One Year.</td>
    </tr>
    <tr>
      <td style="text-align: center">YearBegin</td>
      <td style="text-align: center">Calendar Year Begin.</td>
    </tr>
    <tr>
      <td style="text-align: center">YearEnd</td>
      <td style="text-align: center">Calendar Year End.</td>
    </tr>
  </tbody>
</table>

<p>The generic Daru::DateOffset class is used for creating a generic offset by passing the number of intervals you want as the value for a key that describes the type of interval. For example to create an offset of 3 days, you pass the option <code>days: 3</code> into the Daru::Offset constructor.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

offset = <span class="constant">Daru</span>::<span class="constant">DateOffset</span>.new(<span class="key">days</span>: <span class="integer">3</span>)
offset + <span class="constant">DateTime</span>.new(<span class="integer">2012</span>,<span class="integer">4</span>,<span class="integer">5</span>,<span class="integer">2</span>)
<span class="comment">#=&gt; #&lt;DateTime: 2012-04-08T02:00:00+00:00 ((2456026j,7200s,0n),+0s,2299161j)&gt;</span>
</pre></td>
</tr></table>
</div>

<p>On a similar note, the DateOffset class constructor can accept the options <code>:secs</code>, <code>:mins</code>,<code>:hours</code>, <code>:days</code>, <code>:weeks</code>, <code>:months</code> or <code>:years</code>. Optionally, specifying the <code>:n</code> option will tell DateOffset to apply a particular offset more than once. To elaborate:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

offset = <span class="constant">Daru</span>::<span class="constant">DateOffset</span>.new(<span class="key">months</span>: <span class="integer">2</span>, <span class="key">n</span>: <span class="integer">4</span>)
offset + <span class="constant">DateTime</span>.new(<span class="integer">2011</span>,<span class="integer">5</span>,<span class="integer">2</span>)
<span class="comment">#=&gt; #&lt;DateTime: 2012-01-02T00:00:00+00:00 ((2455929j,0s,0n),+0s,2299161j)&gt;</span>
</pre></td>
</tr></table>
</div>

<p>The specialized offset classes like MonthBegin, YearEnd, etc. all reside inside the <code>Daru::Offsets</code> namespace and can be used by simply calling <code>.new</code> on them. All accept an optional Integer argument that works like the <code>:n</code> option for Daru::DateOffset, i.e it applies the offset multiple times.</p>

<p>To elaborate, consider the YearEnd offset. This offsets the date to the nearest year end after itself:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

offset = <span class="constant">Daru</span>::<span class="constant">Offsets</span>::<span class="constant">YearEnd</span>.new
offset + <span class="constant">DateTime</span>.new(<span class="integer">2012</span>,<span class="integer">5</span>,<span class="integer">1</span>,<span class="integer">5</span>,<span class="integer">2</span>,<span class="integer">1</span>)
<span class="comment">#=&gt; #&lt;DateTime: 2012-12-31T05:02:01+00:00 ((2456293j,18121s,0n),+0s,2299161j)&gt;</span>

<span class="comment"># Passing an Integer into an Offsets object will apply the offset that many times:</span>

offset = <span class="constant">Daru</span>::<span class="constant">Offsets</span>::<span class="constant">MonthBegin</span>.new(<span class="integer">3</span>)
offset + <span class="constant">DateTime</span>.new(<span class="integer">2015</span>,<span class="integer">3</span>,<span class="integer">5</span>)
<span class="comment">#=&gt; #&lt;DateTime: 2015-06-01T00:00:00+00:00 ((2457175j,0s,0n),+0s,2299161j)&gt;</span>
</pre></td>
</tr></table>
</div>

<p>Of special note is the <code>Week</code> offset. This offset can be ‘anchored’ to any week of the day that you specify. When this is done, the DateTime that is being offset will be offset to that day of the week.</p>

<p>For example, to anchor the Week offset to a Wednesday, pass ‘3’ as a value to the <code>:weekday</code> option:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

offset = <span class="constant">Daru</span>::<span class="constant">Offsets</span>::<span class="constant">Week</span>.new(<span class="key">weekday</span>: <span class="integer">3</span>)
date   = <span class="constant">DateTime</span>.new(<span class="integer">2012</span>,<span class="integer">1</span>,<span class="integer">6</span>)
date.wday <span class="comment">#=&gt; 5</span>

o = offset + date
<span class="comment">#=&gt; #&lt;DateTime: 2012-01-11T00:00:00+00:00 ((2455938j,0s,0n),+0s,2299161j)&gt;</span>
o.wday <span class="comment">#=&gt; 3</span>
</pre></td>
</tr></table>
</div>

<p>Likewise, the Week offset can be anchored on any day of the week, by simplying specifying the <code>:weekday</code> option. Indexing for days of the week starts from 0 for Sunday and goes on 6 for Saturday.</p>

<h2 id="offset-string-aliases">Offset string aliases</h2>

<p>The most obvious use of date offsets is for creating <code>DateTimeIndex</code> objects with a fixed time interval between each date index. To make creation of indexes easy, each of the offset classes have been linked to certain <em>string alaises</em>, which can directly passed to the DateTimeIndex class.</p>

<p>For example, to create a DateTimeIndex of 100 periods with a frequency of 1 hour between each period:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

offset = <span class="constant">Daru</span>::<span class="constant">DateTimeIndex</span>.date_range(
  <span class="symbol">:start</span> =&gt; <span class="string"><span class="delimiter">'</span><span class="content">2015-4-4</span><span class="delimiter">'</span></span>, <span class="symbol">:periods</span> =&gt; <span class="integer">100</span>, <span class="symbol">:freq</span> =&gt; <span class="string"><span class="delimiter">'</span><span class="content">H</span><span class="delimiter">'</span></span>)
<span class="comment">#=&gt; #&lt;DateTimeIndex:86417320 offset=H periods=100 data=[2015-04-04T00:00:00+00:00...2015-04-08T03:00:00+00:00]&gt;</span>
</pre></td>
</tr></table>
</div>

<p>Likewise all of the above listed offsets can be aliased using strings, which can be used for specifying the offset in a DateTimeIndex index. The string aliases of each offset class are as follows:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>Alias String</strong></th>
      <th style="text-align: center"><strong>Offset Class / Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">‘S’</td>
      <td style="text-align: center">Second</td>
    </tr>
    <tr>
      <td style="text-align: center">‘M’</td>
      <td style="text-align: center">Minute</td>
    </tr>
    <tr>
      <td style="text-align: center">‘H’</td>
      <td style="text-align: center">Hour</td>
    </tr>
    <tr>
      <td style="text-align: center">‘D’</td>
      <td style="text-align: center">Days</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W’</td>
      <td style="text-align: center">Default Week. Anchored on SUN.</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-SUN’</td>
      <td style="text-align: center">Week anchored on sunday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-MON’</td>
      <td style="text-align: center">Week anchored on monday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-TUE’</td>
      <td style="text-align: center">Week anchored on tuesday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-WED’</td>
      <td style="text-align: center">Week anchored on wednesday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-THU’</td>
      <td style="text-align: center">Week anchored on thursday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-FRI’</td>
      <td style="text-align: center">Week anchored on friday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘W-SAT’</td>
      <td style="text-align: center">Week anchored on saturday</td>
    </tr>
    <tr>
      <td style="text-align: center">‘MONTH’</td>
      <td style="text-align: center">Month</td>
    </tr>
    <tr>
      <td style="text-align: center">‘MB’</td>
      <td style="text-align: center">MonthBegin</td>
    </tr>
    <tr>
      <td style="text-align: center">‘ME’</td>
      <td style="text-align: center">MonthEnd</td>
    </tr>
    <tr>
      <td style="text-align: center">‘YEAR’</td>
      <td style="text-align: center">Year</td>
    </tr>
    <tr>
      <td style="text-align: center">‘YB’</td>
      <td style="text-align: center">YearBegin</td>
    </tr>
    <tr>
      <td style="text-align: center">‘YE’</td>
      <td style="text-align: center">YearEnd</td>
    </tr>
  </tbody>
</table>

<p>See this notebook on daru’s time series functions in order to get a good overview of daru’s time series manipulation functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Statsample Work With Rb-gsl and Gsl-nmatrix]]></title>
    <link href="http://v0dro.github.io/blog/2015/05/12/making-statsample-work-with-rb-gsl-and-gsl-nmatrix/"/>
    <updated>2015-05-12T21:53:46+09:00</updated>
    <id>http://v0dro.github.io/blog/2015/05/12/making-statsample-work-with-rb-gsl-and-gsl-nmatrix</id>
    <content type="html"><![CDATA[<p><strong>Note: It so happens that the latest release of rb-gsl does not depend on narray anymore. Hence rb-gsl can be directly used with statsample. However, if you want to use nmatrix with GSL, use gsl-nmatrix.</strong></p>

<p><a href="https://github.com/SciRuby/statsample">Statsample</a> is the most comprehensive statistical computation suite in Ruby as of now.</p>

<p>Previously, it so happened that statsample would depend on <a href="https://github.com/blackwinter/rb-gsl">rb-gsl</a> to speed up a lot of computations. This is great, but the biggest drawback of this approach is that rb-gsl depends on <a href="https://github.com/masa16/narray">narray</a>, which is incompatible with <a href="https://github.com/SciRuby/nmatrix">nmatrix</a> - the numerical storage and linear algebra library from the SciRuby foundation - due to namespace collisions.</p>

<p>NMatrix is used by many current and upcoming ruby scientific gems, most notably <a href="https://github.com/v0dro/daru">daru</a>, <a href="https://github.com/domitry/mikon">mikon</a>, <a href="https://github.com/thisMagpie/fftw">nmatrix-fftw</a>, etc. and the a big hurdle that these gems were facing was that they could not leverage the advanced functionality of rb-gsl or statsample because nmatrix cannot co-exist with narray. On a further note, daru’s <a href="https://github.com/v0dro/daru/blob/master/lib/daru/dataframe.rb">DataFrame</a> and <a href="https://github.com/v0dro/daru/blob/master/lib/daru/vector.rb">Vector</a> data structures are to replace statsample’s <a href="https://github.com/SciRuby/statsample/blob/master/lib/statsample/dataset.rb">Dataset</a> and <a href="https://github.com/SciRuby/statsample/blob/master/lib/statsample/vector.rb">Vector</a>, so that a dedicated library can be used for data storage and munging and statsample can be made to focus on statistical analysis.</p>

<p>The most promising solution to this problem was that rb-gsl must be made to depend on nmatrix instead of narray. This problem was solved by the <a href="https://github.com/v0dro/gsl-nmatrix">gsl-nmatrix</a> gem, which is a port of rb-gsl, but uses nmatrix instead of narray. Gsl-nmatrix also allows conversion of GSL objects to NMatrix and vice versa. Also, latest changes to statsample make it completely independent of GSL, and hence all the methods in statsample are now possible with or without GSL.</p>

<p>To make your installation of statsample work with gsl-nmatrix, follow these instructions:</p>

<ul>
  <li><a href="https://github.com/SciRuby/nmatrix/wiki/Installation">Install nmatrix</a> and clone, build and install the latest gsl-nmatrix from https://github.com/v0dro/gsl-nmatrix</li>
  <li>Clone the latest statsample from https://github.com/SciRuby/statsample</li>
  <li>Open the Gemfile of statsample and add the line <code>gem 'gsl-nmatrix', '~&gt;1.17'</code></li>
  <li>Build statsample using <code>rake gem</code> and install the resulting <code>.gem</code> file with <code>gem install</code>.</li>
</ul>

<p>You should be good able to use statsample with gsl-nmatrix on your system now. To use with rb-gsl, just install rb-gsl from rubygems (<code>gem install rb-gsl</code>) and put <code>gem 'rb-gsl', '~&gt;1.16.0.4'</code> in the Gemfile instead of gsl-nmatrix. This will activate the rb-gsl gem and you can use rb-gsl with statsample.</p>

<p>However please take note that narray and nmatrix cannot co-exist on the same gem list. Therefore, you should have either rb-gsl or gsl-nmatrix installed at a particular time otherwise things will malfunction.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interfacing and Benchmarking High Performance Linear Algebra Libraries With Ruby]]></title>
    <link href="http://v0dro.github.io/blog/2015/03/11/interfacing-and-benchmarking-high-performance-linear-algebra-libraries-with-ruby/"/>
    <updated>2015-03-11T17:05:45+09:00</updated>
    <id>http://v0dro.github.io/blog/2015/03/11/interfacing-and-benchmarking-high-performance-linear-algebra-libraries-with-ruby</id>
    <content type="html"><![CDATA[<p>For my GSOC project, I’m trying to build an extension to NMatrix which will interface with a high performance C library for fast linear algebra calculations. Since one of the major problems affecting the usability and portability of NMatrix is the effort taken for installation (adding/removing dependencies etc.), it is imperative to ship the source of this high performance C library alongwith the ruby gem.</p>

<p>This leaves us with quite a few choices about the library that can be used. The most common and obvious interfaces for performing fast linear algebra calculations are LAPACK and BLAS. Thus the library bundled with the nmatrix extension must expose an interface similar to LAPACK and BLAS. Since ruby running on MRI can only interface with libraries having a C interface, the contenders in this regard are CLAPACK or LAPACKE for a LAPACK in C, and openBLAS or ATLAS for a BLAS interface.</p>

<p>I need to choose an appropriate BLAS and LAPACK interface based on its speed and usability, and to do so, I decided to build some quick ruby interfaces to these libraries and benchmark the <a href="https://software.intel.com/en-us/node/520973"><code>?gesv</code> function</a>  (used for solving <em>n</em> linear equations in <em>n</em> unknowns) present in all LAPACK interfaces, so as to get an idea of what would be the fastest. This would also test the speed of the BLAS implemetation since LAPACK primarily depends on BLAS for actual computations.</p>

<p>To create these benchmarks, <a href="https://github.com/v0dro/scratch/tree/master/ruby_c_exp">I made a couple of simple ruby gems</a> which linked against the binaries of these libraries. All these gems <a href="https://github.com/v0dro/scratch/blob/master/ruby_c_exp/nm_lapacke/lib/nm_lapacke.rb">define a module</a> which contains a method <code>solve_gesv</code>, which calls the C extension that interfaces with the C library. Each library was made in its own little ruby gem so as to nullify any unknown side effects and also to provide more clarity.</p>

<p>To test these libraries against each other, I used the following test code:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">benchmark</span><span class="delimiter">'</span></span>

<span class="constant">Benchmark</span>.bm <span class="keyword">do</span> |x|
  x.report <span class="keyword">do</span>
    <span class="integer">10000</span>.times <span class="keyword">do</span>
      a = <span class="constant">NMatrix</span>.new([<span class="integer">3</span>,<span class="integer">3</span>], [<span class="integer">76</span>, <span class="integer">25</span>, <span class="integer">11</span>,
                              <span class="integer">27</span>, <span class="integer">89</span>, <span class="integer">51</span>,
                              <span class="integer">18</span>, <span class="integer">60</span>, <span class="integer">32</span>], <span class="key">dtype</span>: <span class="symbol">:float64</span>)
      b = <span class="constant">NMatrix</span>.new([<span class="integer">3</span>,<span class="integer">1</span>], [<span class="integer">10</span>,
                               <span class="integer">7</span>,
                              <span class="integer">43</span>], <span class="key">dtype</span>: <span class="symbol">:float64</span>)
      <span class="constant">NMatrix</span>::<span class="constant">CLAPACK</span>.solve_gesv(a,b)
      <span class="comment"># The `NMatrix::CLAPACK` is replaced with NMatrix::LAPACKE </span>
      <span class="comment"># or NMatrix::LAPACKE_ATLAS as per the underlying binding. Read the</span>
      <span class="comment"># source code for more details.</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>

<p>Here I will list the libraries that I used, the functions I interfaced with, the pros and cons of using each of these libraries, and of course the reported benchmarks:</p>

<h3 id="clapack-lapack-with-openblas-blas">CLAPACK (LAPACK) with openBLAS (BLAS)</h3>

<p><a href="http://www.netlib.org/clapack/">CLAPACK</a> is an F2C’d version of the original LAPACK written in FORTRAN. The creators have made some changes by hand because f2c spews out unnecessary code at times, but otherwise its pretty much as fast as the original LAPACK.</p>

<p>To interface with a BLAS implementation, CLAPACK uses a blas wrapper (blaswrap) to generate wrappers to the relevant CBLAS functions exposed by any BLAS implementation. The blaswrap source files and F2C source files are provided with the CLAPACK library.</p>

<p>The BLAS implementation that we’ll be using is <a href="http://www.openblas.net/">openBLAS</a>, which is a very stable and tested BLAS exposing a C interface. It is extremely simple to use and install, and configures itself automatically according to the computer it is being installed upon. It claims to achieve <a href="http://en.wikipedia.org/wiki/GotoBLAS">performance comparable to intel MKL</a>, which is phenomenal.</p>

<p>To compile CLAPACK with openBLAS, do the following:</p>

<ul>
  <li><code>cd</code> to your openBLAS directory and run <code>make NO_LAPACK=1</code>. This will create an openBLAS binary with the object files only for BLAS and CBLAS. LAPACK will not be compiled even though the source is present. This will generate a <code>.a</code> file which has a name that is similar to the processor that your computer uses. Mine was <code>libopenblas_sandybridgep-r0.2.13.a</code>.</li>
  <li>Now rename the openBLAS binary file to <code>libopenblas.a</code> so its easier to type and you lessen your chances of mistakes, and copy to your CLAPACK directory.</li>
  <li><code>cd</code> to your CLAPACK directory and open the <code>make.inc</code> file in your editor. In it, you should find a <code>BLASDIR</code> variable that points to the BLAS files to link against. Change the value of this variable to <code>../../libopenblas.a</code>.</li>
  <li>Now run <code>make f2clib</code> to make F2C library. This is needed for interconversion between C and FORTRAN data types.</li>
  <li>Then run <code>make lapacklib</code> from the CLAPACK root directory to compile CLAPACK against your specified implementation of CBLAS (openBLAS in this case).</li>
  <li>At the end of this process, you should end up with the CLAPACK, F2C and openBLAS binaries in your directory.</li>
</ul>

<p>Since the automation of this compilation process would take time, I copied these binaries to the gem and <a href="">wrote the extconf.rb</a> such that they link with these libraries.</p>

<p>On testing this with a ruby wrapper, the benchmarking code listed above yielded the following results:</p>

<pre><code>
    user     system      total        real
    0.190000   0.000000   0.190000 (  0.186355)
</code></pre>

<h3 id="lapacke-lapack-compiled-with-openblas-blas">LAPACKE (LAPACK) compiled with openBLAS (BLAS)</h3>

<p><a href="http://www.netlib.org/lapack/lapacke.html">LAPACKE</a> is the ‘official’ C interface to the FORTRAN-written LAPACK. It consists of two levels; a high level C interface for use with C programs and a low level one that talks to the original FORTRAN LAPACK code. This is not just an f2c’d version of LAPACK, and hence the design of this library is such that it is easy to create a bridge between C and FORTRAN.</p>

<p>For example, C has arrays stored in row-major format while FORTRAN had them column-major. To perform any computation, a matrix needs to be transposed to column-major form first and then be re-transposed to row-major form so as to yield correct results. This needs to be done by the programmer when using CLAPACK, but LAPACKE’s higher level interface accepts arguments (<a href="http://www.netlib.org/lapack/lapacke.html#_array_arguments">LAPACKE_ROW_MAJOR or LAPACKE_COL_MAJOR</a>) which specify whether the matrices passed to it are in row major or column major format. Thus extra (often unoptimized code) on part of the programmer for performing the tranposes is avoided.</p>

<p>To build binaries of LAPACKE compiled with openBLAS, just <code>cd</code> to your openBLAS source code directory and run <code>make</code>. This will generate a <code>.a</code> file with the binaries for LAPACKE and CBLAS interface of openBLAS.</p>

<p>LAPACKE benchmarks turn out to be faster mainly due to the absence of <a href="https://github.com/v0dro/scratch/blob/master/ruby_c_exp/nm_clapack/lib/nm_clapack.rb#L7">manual transposing by high-level code written in Ruby</a>  (the <a href="https://github.com/SciRuby/nmatrix/blob/master/lib/nmatrix/nmatrix.rb#L535">NMatrix#transpose</a> function in this case). I think performing the tranposing using openBLAS functions should remedy this problem.</p>

<p>The benchmarks for LAPACKE are:</p>

<pre><code>
    user     system      total        real
    0.150000   0.000000   0.150000 (  0.147790)
</code></pre>

<p>As you can see these are quite faster than CLAPACK with openBLAS, listed above.</p>

<h3 id="clapacklapack-with-atlasblas">CLAPACK(LAPACK) with ATLAS(BLAS)</h3>

<p>This is the combination that is currently in use with nmatrix. It involves installing the <code>libatlas-base-dev</code> package from the Debian repositories. This pacakage will load all the relevant clapack, atlas, blas and cblas binaries into your computer.</p>

<p>The benchmarks turned out to be:</p>

<pre><code>
    user     system      total        real
    0.130000   0.000000   0.130000 (  0.130056)
</code></pre>

<p>This is fast. But a big limitation on using this approach is that the CLAPACK library exposed by the <code>libatlas-base-dev</code> is outdated and no longer maintained. To top it all, it does not have all the functions that a LAPACK library is supposed to have.</p>

<h3 id="lapackelapack-with-atlasblas">LAPACKE(LAPACK) with ATLAS(BLAS)</h3>

<p>For this test case I compiled <a href="http://www.netlib.org/lapack/lapacke">LAPACKE (downloaded from netlib)</a> with an ATLAS implementation from the Debian repositories. I then included the generated static libraries in the sample ruby gem and compiled the gem against those.</p>

<p>To do this on your machine:</p>
<ul>
  <li>Install the package <code>libatlas-base-dev</code> with your package manager. This will install the ATLAS and CBLAS shared objects onto your system.</li>
  <li><code>cd</code> to the lapack library and in the <code>make.inc</code> file change the <code>BLASLIB = -lblas -lcblas -latlas</code>. Then run <code>make</code>. This will compile LAPACK with ATLAS installed on your system.</li>
  <li>Then <code>cd</code> to the lacpack/lapacke folder and run <code>make</code>.</li>
</ul>

<p>Again the function chosen was <code>LAPACKE_?gesv</code>. This test should tell us a great deal about the speed differences between openBLAS and ATLAS, since tranposing overheads are handled by LAPACKE and no Ruby code is interfering with the benchmarks.</p>

<p>The benchmarks turned out to be:</p>

<pre><code>
    user     system      total        real
    0.140000   0.000000   0.140000 (  0.140540)
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>As you can see from the benchmarks above, the approach followed by nmatrix currently (CLAPACK with ATLAS) is the fastest, but this approach has certain limitations:</p>

<ul>
  <li>Requires installation of tedious to install dependencies.</li>
  <li>Many pacakages offer the same binaries, causing confusion.</li>
  <li>CLAPACK library is outdated and not maintained any longer.</li>
  <li>ATLAS-CLAPACK does not expose all the functions present in LAPACK.</li>
</ul>

<p>The LAPACKE-openBLAS and the LAPACKE-ATLAS, though a little slower(~10-20 ms), offer a HUGE advantage over CLAPACK-ATLAS, viz. :</p>

<ul>
  <li>LAPACKE is the ‘standard’ C interface to the LAPACK libraries and is actively maintained, with regular release cycles.</li>
  <li>LAPACKE is compatible with intel’s MKL, in case a future need arises.</li>
  <li>LAPACKE bridges the differences between C and FORTRAN with a well thought out interface.</li>
  <li>LAPACKE exposes the entire LAPACK interface.</li>
  <li>openBLAS is trivial to install.</li>
  <li>ATLAS is a little non-trivial to install but is fast.</li>
</ul>

<p>For a further explanation of the differences between these CBLAS, CLAPACK and LAPACKE, read <a href="http://nicolas.limare.net/pro/notes/2014/10/31_cblas_clapack_lapacke/">this</a> blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Analysis in RUby: Part 2]]></title>
    <link href="http://v0dro.github.io/blog/2015/02/24/data-analysis-in-ruby-part-2/"/>
    <updated>2015-02-24T03:49:08+09:00</updated>
    <id>http://v0dro.github.io/blog/2015/02/24/data-analysis-in-ruby-part-2</id>
    <content type="html"><![CDATA[<p>I’ve just released daru version 0.0.5, which brings in a lot of new features and consolidates existing ones. <a href="https://github.com/SciRuby/nmatrix">NMatrix</a> is now well integrated into Daru and all of the operations that can be performed using Arrays as the underlying implementation can be performed using NMatrix as well (except some operations involving missing data).</p>

<p>The new features include extensive support for missing data, hierarchial sorting of data frames and vectors by preserving indexing, ability to group, split and aggregate data with group by, and quickly summarizing data by generating excel-style pivot tables. This release also includes new aritmetic and statistical functions on Data Frames and Vectors. Both DataFrame and Vector are now mostly compatible with <a href="https://github.com/clbustos/statsample">statsample</a>, allowing for a much larger scope of statistical analysis by leveraging the methods already provided in statsample.</p>

<p>The interface for interacting with nyaplot for plotting has also been revamped, allowing much greater control on the way graphs are handled by giving direct access to the graph object. A new class for hierarchial indexing of data (called MultiIndex) has also been added, which is immensely useful when grouping/splitting/aggregating data.</p>

<p>Lets look at all these features one by one:</p>

<h2 id="data-types">Data Types</h2>

<p>You can now either use Ruby Arrays or NMatrix as the underlying implementation. Since NMatrix is fast and makes use of C storage, it is recommended to use nmatrix when dealing with large sets of data. Daru will store any data as Ruby Array unless explicitly specified.</p>

<p>Thus to specify the data type of a Vector use the option <code>:dtype</code> and either supply it with <code>:array</code> or <code>:nmatrix</code>, and if using the NMatrix dtype, you can also specify the C data type that NMatrix will use internall by using the option <code>:nm_dtype</code> and supplying it with one of the NMatrix data types (it currently supports ints, floats, rationals and complex numbers. Check the docs for further details).</p>

<p>As an example, consider creating a Vector which uses NMatrix underneath, and stores data using the <code>:float64</code> NMatrix data type, which stands for double precision floating point numbers.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre>
v = <span class="constant">Daru</span>::<span class="constant">Vector</span>.new([<span class="float">1.44</span>,<span class="float">55.54</span>,<span class="float">33.2</span>,<span class="float">5.6</span>],<span class="key">dtype</span>: <span class="symbol">:nmatrix</span>, <span class="key">nm_dtype</span>: <span class="symbol">:float64</span>)
<span class="comment">#        nil</span>
<span class="comment">#    0  1.44</span>
<span class="comment">#    1 55.54</span>
<span class="comment">#    2  33.2</span>
<span class="comment">#    3   5.6</span>
v.dtype <span class="comment">#=&gt; :nmatrix</span>
v.type  <span class="comment">#=&gt; :float64</span>
</pre></td>
</tr></table>
</div>

<p>Another distinction between types of data that daru offers is <code>:numeric</code> and <code>:object</code>. This is a generic feature for distinguishing numerical data from other types of data (like Strings or DateTime objects) that might be contained inside Vectors or DataFrames. These distinctions are important because statistical and arithmetic operations can only be applied on structures with type numeric.</p>

<p>To query the data structure for its type, use the <code>#type</code> method. If the underlying implemetation is an NMatrix, it will return the NMatrix data type, otherwise for Ruby Arrays, it will be either <code>:numeric</code> or <code>:object</code>.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>
v = <span class="constant">Daru</span>::<span class="constant">Vector</span>.new([<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>], <span class="key">dtype</span>: <span class="symbol">:array</span>)
v.type <span class="comment">#=&gt; :numeric</span>
</pre></td>
</tr></table>
</div>

<p>Thus Daru exposes three methods for querying the type of data:</p>
<ul>
  <li><code>#type</code> - Get the generic type of data to know whether numeric computation can be performed on the object. Get the C data type used by nmatrix in case of dtype NMatrix.</li>
  <li><code>#dtype</code> - Get the underlying data representation (either :array or :nmatrix).</li>
</ul>

<h2 id="working-with-missing-data">Working with Missing Data</h2>

<p>Any data scientist knows how common missing data is in real-life data sets, and to address that need, daru provides a host of functions for this purpose.
This functionality is still in its infancy but should be up to speed soon.</p>

<p>The <code>#is_nil?</code> function will return a Vector object with <code>true</code> if a value is <code>nil</code> and <code>false</code> otherwise.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre>
v = <span class="constant">Daru</span>::<span class="constant">Vector</span>.new([<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="predefined-constant">nil</span>,<span class="predefined-constant">nil</span>,<span class="integer">4</span>], <span class="key">index</span>: [<span class="symbol">:a</span>, <span class="symbol">:b</span>, <span class="symbol">:c</span>, <span class="symbol">:d</span>, <span class="symbol">:e</span>, <span class="symbol">:f</span>])
v.is_nil?
<span class="comment">#=&gt; </span>
<span class="comment">##&lt;Daru::Vector:93025420 @name = nil @size = 6 &gt;</span>
<span class="comment">#        nil</span>
<span class="comment">#    a   nil</span>
<span class="comment">#    b   nil</span>
<span class="comment">#    c   nil</span>
<span class="comment">#    d  true</span>
<span class="comment">#    e  true</span>
<span class="comment">#    f   nil</span>
</pre></td>
</tr></table>
</div>

<p>The <code>#nil_positions</code> function returns an Array that contains the indexes of all the nils in the Vector.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>
v.nil_positions <span class="comment">#=&gt; [:d, :e]</span>
</pre></td>
</tr></table>
</div>

<p>The <code>#replace_nils</code> functions replaces nils with a supplied value.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre>
v.replace_nils <span class="integer">69</span>
<span class="comment">#=&gt; </span>
<span class="comment">##&lt;Daru::Vector:92796730 @name = nil @size = 6 &gt;</span>
<span class="comment">#    nil</span>
<span class="comment">#  a   1</span>
<span class="comment">#  b   2</span>
<span class="comment">#  c   3</span>
<span class="comment">#  d  69</span>
<span class="comment">#  e  69</span>
<span class="comment">#  f   4</span>
</pre></td>
</tr></table>
</div>

<p>The statistics functions implemented on Vectors ensure that missing data is not considered during computation and are thus safe to call on missing data.</p>

<h2 id="hierarchical-sorting-of-dataframe">Hierarchical sorting of DataFrame</h2>

<p>It is now possible to use the <code>#sort</code> function on Daru::DataFrame such that sorting happens hierarchically according to the order of the specified vector names.</p>

<p>In case you want to sort according to a certain attribute of the data in a particular vector, for example sort a Vector of strings by length, then you can supply a code block to the <code>:by</code> option of the sort method.</p>

<p>Supply the <code>:ascending</code> option with an Array containing ‘true’ or ‘false’ depending on whether you want the corresponding vector sorted in ascending or descending order.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
</pre></td>
  <td class="code"><pre>
df = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new({
  <span class="key">a</span>: [<span class="string"><span class="delimiter">'</span><span class="content">ff</span><span class="delimiter">'</span></span>  ,  <span class="string"><span class="delimiter">'</span><span class="content">fwwq</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">efe</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">a</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">efef</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">zzzz</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">efgg</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">q</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">ggf</span><span class="delimiter">'</span></span>], 
  <span class="key">b</span>: [<span class="string"><span class="delimiter">'</span><span class="content">one</span><span class="delimiter">'</span></span>  ,  <span class="string"><span class="delimiter">'</span><span class="content">one</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">one</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">two</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">two</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">one</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">one</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">two</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">two</span><span class="delimiter">'</span></span>],
  <span class="key">c</span>: [<span class="string"><span class="delimiter">'</span><span class="content">small</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">large</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">large</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">small</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">small</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">large</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">small</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">large</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">small</span><span class="delimiter">'</span></span>],
  <span class="key">d</span>: [<span class="integer">-1</span>,<span class="integer">2</span>,<span class="integer">-2</span>,<span class="integer">3</span>,<span class="integer">-3</span>,<span class="integer">4</span>,<span class="integer">-5</span>,<span class="integer">6</span>,<span class="integer">7</span>],
  <span class="key">e</span>: [<span class="integer">2</span>,<span class="integer">4</span>,<span class="integer">4</span>,<span class="integer">6</span>,<span class="integer">6</span>,<span class="integer">8</span>,<span class="integer">10</span>,<span class="integer">12</span>,<span class="integer">14</span>]
  })

df.sort([<span class="symbol">:a</span>,<span class="symbol">:d</span>], 
  <span class="key">by</span>: {
    <span class="key">a</span>: lambda { |a,b| a.length &lt;=&gt; b.length }, 
    <span class="key">b</span>: lambda { |a,b| a.abs &lt;=&gt; b.abs } 
  }, 
  <span class="key">ascending</span>: [<span class="predefined-constant">false</span>, <span class="predefined-constant">true</span>]
)
</pre></td>
</tr></table>
</div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/sorted_df.png" alt="'Hierarchically sorted DataFrame'" /></p>

<p>Vector objects also have a similar sorting method implemented. Check the docs for more details. Indexing is preserved while sorting of both DataFrame and Vector.</p>

<h2 id="dsl-for-plotting-with-nyaplot">DSL for plotting with <a href="https://github.com/domitry/nyaplot">Nyaplot</a></h2>

<p>Previously plotting with daru required a lot of arguments to be supplied by the user. The interface did not take advatage of Ruby’s blocks, nor did it expose many functionalities of nyaplot. All that changes with this new version, that brings in a new DSL for easy plotting (recommended usage with <a href="https://github.com/minad/iruby">iruby notebook</a>).</p>

<p>Thus to plot a line graph with data present in a DataFrame:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>
df = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new({<span class="key">a</span>: [<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>,<span class="integer">5</span>], <span class="key">b</span>: [<span class="integer">10</span>,<span class="integer">14</span>,<span class="integer">15</span>,<span class="integer">17</span>,<span class="integer">44</span>]})
df.plot <span class="key">type</span>: <span class="symbol">:line</span>, <span class="key">x</span>: <span class="symbol">:a</span>, <span class="key">y</span>: <span class="symbol">:b</span> <span class="keyword">do</span> |p,d|
  p.yrange [<span class="integer">0</span>,<span class="integer">100</span>]
  p.legend <span class="predefined-constant">true</span>
  d.color <span class="string"><span class="delimiter">&quot;</span><span class="content">green</span><span class="delimiter">&quot;</span></span>
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>
<p><img class="center" src="http://v0dro.github.io/images/daru2/line_graph.png" alt="'Line Graph From DataFrame'" /></p>

<p>As you can see, the <code>#plot</code> function exposes the <code>Nyaplot::Plot</code> and <code>Nyaplot::Diagram</code> objects to user after populating them with the relevant data. So the new interface lets experienced users utilize the full power of nyaplot but keeps basic plotting very simple to use for new users or for quick and dirty visualization needs. Unfortunately for now, until a viable solution to interfacing with nyaplot is found, you will need to use the nyaplot API directly.</p>

<p>Refer to <a href="http://nbviewer.ipython.org/github/SciRuby/sciruby-notebooks/blob/master/Visualization/Visualizing%20data%20with%20daru%20DataFrame.ipynb">this notebook</a> for advanced plotting tutorials.</p>

<h2 id="statistics-and-arithmetic-on-dataframes">Statistics and arithmetic on DataFrames.</h2>

<p>Daru includes a host of methods for simple statistical analysis on numeric data. You can call <code>mean</code>, <code>std</code>, <code>sum</code>, <code>product</code>, etc. directly on the DataFrame. The corresponding computation is performed on numeric Vectors within the DataFrame, and missing data if any is excluded from the calculation by default.</p>

<p>So for this DataFrame:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre>
df = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new({
  <span class="key">a</span>: [<span class="string"><span class="delimiter">'</span><span class="content">foo</span><span class="delimiter">'</span></span>  ,  <span class="string"><span class="delimiter">'</span><span class="content">foo</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">foo</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">foo</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">foo</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>], 
  <span class="key">b</span>: [<span class="string"><span class="delimiter">'</span><span class="content">one</span><span class="delimiter">'</span></span>  ,  <span class="string"><span class="delimiter">'</span><span class="content">one</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">one</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">two</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">two</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">one</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">one</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">two</span><span class="delimiter">'</span></span>,  <span class="string"><span class="delimiter">'</span><span class="content">two</span><span class="delimiter">'</span></span>],
  <span class="key">c</span>: [<span class="string"><span class="delimiter">'</span><span class="content">small</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">large</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">large</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">small</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">small</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">large</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">small</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">large</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">small</span><span class="delimiter">'</span></span>],
  <span class="key">d</span>: [<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">3</span>,<span class="integer">4</span>,<span class="integer">5</span>,<span class="integer">6</span>,<span class="integer">7</span>],
  <span class="key">e</span>: [<span class="integer">2</span>,<span class="integer">4</span>,<span class="integer">4</span>,<span class="integer">6</span>,<span class="integer">6</span>,<span class="integer">8</span>,<span class="integer">10</span>,<span class="integer">12</span>,<span class="integer">14</span>],
  <span class="key">f</span>: [<span class="integer">10</span>,<span class="integer">20</span>,<span class="integer">20</span>,<span class="integer">30</span>,<span class="integer">30</span>,<span class="integer">40</span>,<span class="integer">50</span>,<span class="integer">60</span>,<span class="integer">70</span>]
})
</pre></td>
</tr></table>
</div>

<p>To calculate the mean of numeric vectors:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>
df.mean
</pre></td>
</tr></table>
</div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/df_mean.png" alt="'Calculate Mean of Numeric Vectors'" /></p>

<p>Apart from that you can use the <code>#describe</code> method to calculate many statistical features of numeric Vectors in one shot and see a summary of statistics for numerical vectors in the DataFrame that is returned. For example,</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>
df.describe
</pre></td>
</tr></table>
</div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/df_describe.png" alt="'Describe Multiple Statistics in One Shot'" /></p>

<p>The covariance and correlation coeffiecients between the numeric vectors can also be found with <code>#cov</code> and <code>#corr</code></p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>
df.cov
<span class="comment"># =&gt; </span>
<span class="comment"># #&lt;Daru::DataFrame:91700830 @name = f5ae5d7e-9fcb-46c8-90ac-a6420c9dc27f @size # = 3&gt;</span>
<span class="comment">#                     d          e          f </span>
<span class="comment">#          d          4          8         40 </span>
<span class="comment">#          e          8         16         80 </span>
<span class="comment">#          f         40         80        400 </span>
</pre></td>
</tr></table>
</div>

<h2 id="hierarchial-indexing">Hierarchial indexing</h2>

<p>A new way of hierarchially indexing data has been introduced in version 0.0.5. This is done with the new <code>Daru::MultiIndex</code> class. Hierarchial indexing allows grouping sets of similar data by index and lets you select sub sets of data by specifying an index name in the upper hierarchy.</p>

<p>A MultiIndex can be created by passing a bunch of tuples into the Daru::MultiIndex class. A DataFrame or Vector can be created by passing it a MultiIndex object into the <code>index</code> option. A MultiIndex can be used for determining the order of Vectors in a DataFrame too.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
</pre></td>
  <td class="code"><pre>
tuples = [
  [<span class="symbol">:a</span>,<span class="symbol">:one</span>,<span class="symbol">:bar</span>],
  [<span class="symbol">:a</span>,<span class="symbol">:one</span>,<span class="symbol">:baz</span>],
  [<span class="symbol">:a</span>,<span class="symbol">:two</span>,<span class="symbol">:bar</span>],
  [<span class="symbol">:a</span>,<span class="symbol">:two</span>,<span class="symbol">:baz</span>],
  [<span class="symbol">:b</span>,<span class="symbol">:one</span>,<span class="symbol">:bar</span>],
  [<span class="symbol">:b</span>,<span class="symbol">:two</span>,<span class="symbol">:bar</span>],
  [<span class="symbol">:b</span>,<span class="symbol">:two</span>,<span class="symbol">:baz</span>],
  [<span class="symbol">:b</span>,<span class="symbol">:one</span>,<span class="symbol">:foo</span>],
  [<span class="symbol">:c</span>,<span class="symbol">:one</span>,<span class="symbol">:bar</span>],
  [<span class="symbol">:c</span>,<span class="symbol">:one</span>,<span class="symbol">:baz</span>],
  [<span class="symbol">:c</span>,<span class="symbol">:two</span>,<span class="symbol">:foo</span>],
  [<span class="symbol">:c</span>,<span class="symbol">:two</span>,<span class="symbol">:bar</span>]
]

multi_index = <span class="constant">Daru</span>::<span class="constant">MultiIndex</span>.new(tuples)

vector_arry1 = [<span class="integer">11</span>,<span class="integer">12</span>,<span class="integer">13</span>,<span class="integer">14</span>,<span class="integer">11</span>,<span class="integer">12</span>,<span class="integer">13</span>,<span class="integer">14</span>,<span class="integer">11</span>,<span class="integer">12</span>,<span class="integer">13</span>,<span class="integer">14</span>]
vector_arry2 = [<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>,<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>,<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>]

order_mi = <span class="constant">Daru</span>::<span class="constant">MultiIndex</span>.new([
    [<span class="symbol">:a</span>,<span class="symbol">:one</span>,<span class="symbol">:bar</span>],
    [<span class="symbol">:a</span>,<span class="symbol">:two</span>,<span class="symbol">:baz</span>],
    [<span class="symbol">:b</span>,<span class="symbol">:two</span>,<span class="symbol">:foo</span>],
    [<span class="symbol">:b</span>,<span class="symbol">:one</span>,<span class="symbol">:foo</span>]])

df_mi = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new([
    vector_arry1, 
    vector_arry2, 
    vector_arry1, 
    vector_arry2], <span class="key">order</span>: order_mi, <span class="key">index</span>: multi_index)
</pre></td>
</tr></table>
</div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/multi_index_table.png" alt="'DataFrame with hierarchical indexing'" /></p>

<p>Selecting a top level index from the hierarchy will select all the rows under that name, and return a new DataFrame with just that much data and indexes.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>
df_mi.row[<span class="symbol">:a</span>]
</pre></td>
</tr></table>
</div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/multi_index_partial.png" alt="'Partial Selection Of Multi Indexed DataFrame'" /></p>

<p>Alternatively passing the entire tuple will return just that row as a <code>Daru::Vector</code>, indexed according to the column index.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>
df_mi.row[<span class="symbol">:a</span>, <span class="symbol">:one</span>,<span class="symbol">:bar</span>]
</pre></td>
</tr></table>
</div>
<p><img class="center" src="http://v0dro.github.io/images/daru2/multi_index_exact.png" alt="'Selecting A Single Row From A Multi Indexed DataFrame'" /></p>

<p>Hierachical indexing is especially useful when aggregating or splitting data, or generating data summaries as we’ll see in the following examples.</p>

<h2 id="splitting-and-aggregation-of-data">Splitting and aggregation of data</h2>

<p>When dealing with large sets of scattered data, it is often useful to ‘see’ the data grouped according to similar values in a Vector instead of it being scattered all over the place.</p>

<p>The <code>#group_by</code> function does exactly that. For those familiar SQL, <code>#group_by</code> works exactly like the GROUP BY clause, but is much easier since its all Ruby.</p>

<p>The <code>#group_by</code> function will accept one or more Vector names and will scan those vectors for common elements that can be grouped together. In case multiple names are specified it will check for common attributes accross rows.</p>

<p>So for example consider this DataFrame:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
</pre></td>
  <td class="code"><pre>
df = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new({
  <span class="key">a</span>: <span class="string"><span class="delimiter">%w{</span><span class="content">foo bar foo bar   foo bar foo foo</span><span class="delimiter">}</span></span>,
  <span class="key">b</span>: <span class="string"><span class="delimiter">%w{</span><span class="content">one one two three two two one three</span><span class="delimiter">}</span></span>,
  <span class="key">c</span>:   [<span class="integer">1</span>  ,<span class="integer">2</span>  ,<span class="integer">3</span>  ,<span class="integer">1</span>    ,<span class="integer">3</span>  ,<span class="integer">6</span>  ,<span class="integer">3</span>  ,<span class="integer">8</span>],
  <span class="key">d</span>:   [<span class="integer">11</span> ,<span class="integer">22</span> ,<span class="integer">33</span> ,<span class="integer">44</span>   ,<span class="integer">55</span> ,<span class="integer">66</span> ,<span class="integer">77</span> ,<span class="integer">88</span>]
})
<span class="comment">#&lt;Daru::DataFrame:88462950 @name = 0dbc2869-9a82-4044-b72d-a4ef963401fc @size = 8&gt;</span>
<span class="comment">#            a          b          c          d </span>
<span class="comment"># 0        foo        one          1         11 </span>
<span class="comment"># 1        bar        one          2         22 </span>
<span class="comment"># 2        foo        two          3         33 </span>
<span class="comment"># 3        bar      three          1         44 </span>
<span class="comment"># 4        foo        two          3         55 </span>
<span class="comment"># 5        bar        two          6         66 </span>
<span class="comment"># 6        foo        one          3         77 </span>
<span class="comment"># 7        foo      three          8         88 </span>
</pre></td>
</tr></table>
</div>

<p>To group this DataFrame by the columns <code>:a</code> and <code>:b</code>, pass them as arguments to the <code>#group_by</code> function, which returns a <code>Daru::Core::GroupBy</code> object.</p>

<p>Calling <code>#groups</code> on the returned <code>GroupBy</code> object returns a <code>Hash</code> with the grouped rows.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre>
grouped = df.group_by([<span class="symbol">:a</span>, <span class="symbol">:b</span>])
grouped.groups
<span class="comment"># =&gt; {</span>
<span class="comment">#  [&quot;bar&quot;, &quot;one&quot;]=&gt;[1],</span>
<span class="comment">#  [&quot;bar&quot;, &quot;three&quot;]=&gt;[3],</span>
<span class="comment">#  [&quot;bar&quot;, &quot;two&quot;]=&gt;[5],</span>
<span class="comment">#  [&quot;foo&quot;, &quot;one&quot;]=&gt;[0, 6],</span>
<span class="comment">#  [&quot;foo&quot;, &quot;three&quot;]=&gt;[7],</span>
<span class="comment">#  [&quot;foo&quot;, &quot;two&quot;]=&gt;[2, 4]}</span>
</pre></td>
</tr></table>
</div>

<p>To see the first group of each group from this collection, call <code>#first</code> on the <code>grouped</code> variable. Calling <code>#last</code> will return the last member of each group.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre>
grouped.first

<span class="comment">#=&gt;           a          b          c          d </span>
<span class="comment">#  1        bar        one          2         22 </span>
<span class="comment">#  3        bar      three          1         44 </span>
<span class="comment">#  5        bar        two          6         66 </span>
<span class="comment">#  0        foo        one          1         11 </span>
<span class="comment">#  7        foo      three          8         88 </span>
<span class="comment">#  2        foo        two          3         33 </span>
</pre></td>
</tr></table>
</div>

<p>On a similar note <code>#head(n)</code> will return the first <code>n</code> groups and <code>#tail(n)</code> the last <code>n</code> groups.</p>

<p>The <code>#get_group</code> function will select only the rows that a particular group belongs to and return a DataFrame with those rows. The original indexing is ofcourse preserved.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>
grouped.get_group([<span class="string"><span class="delimiter">&quot;</span><span class="content">foo</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">one</span><span class="delimiter">&quot;</span></span>])
<span class="comment"># =&gt; </span>
<span class="comment"># #&lt;Daru::DataFrame:90777050 @name = cdd0afa8-252d-4d07-ad0f-76c7581a492a @size # = 2&gt;</span>
<span class="comment">#                     a          b          c          d </span>
<span class="comment">#          0        foo        one          1         11 </span>
<span class="comment">#          6        foo        one          3         77 </span>
</pre></td>
</tr></table>
</div>

<p>The <code>Daru::Core::GroupBy</code> object contains a bunch of methods for creating summaries of the grouped data. These currently include <code>#mean</code>, <code>#std</code>, <code>#product</code>, <code>#sum</code>, etc. and many more to be added in the future. Calling any of the aggregation methods will create a new DataFrame which will have the index as the group and the aggregated data of the non-group vectors as the corresponding value. Of course this aggregation will apply only to <code>:numeric</code> type Vectors and missing data will not be considered while aggregation.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>
grouped.mean
</pre></td>
</tr></table>
</div>
<p><img class="center" src="http://v0dro.github.io/images/daru2/group_by_mean.png" alt="'Aggregating by Mean After Grouping'" /></p>

<p>A hierarchichally indexed DataFrame is returned. Check the <code>GroupBy</code> docs for more aggregation methods.</p>

<h2 id="generating-excel-style-pivot-tables">Generating Excel-style Pivot Tables</h2>

<p>You can generate an excel-style pivot table with the <code>#pivot_table</code> function. The levels of the pivot table are stored in MultiIndex objects.</p>

<p>To demonstrate with an example, consider <a href="https://github.com/v0dro/daru/blob/master/spec/fixtures/sales-funnel.csv">this CSV file on sales data</a>.</p>

<p><img class="center" src="http://v0dro.github.io/images/daru2/pivot_table_data.png" alt="'Data For Pivot Table Demo'" /></p>

<p>To look at the data from the point of view of the manager and rep:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>
sales.pivot_table <span class="key">index</span>: [<span class="symbol">:manager</span>, <span class="symbol">:rep</span>]
</pre></td>
</tr></table>
</div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/pivot_table_index.png" alt="'Data Pivoted on Index Only.'" /></p>

<p>You can see that the pivot table has summarized the data and grouped it according to the manager and representative.</p>

<p>To see the sales broken down by the products:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>
sales.pivot_table(<span class="key">index</span>: [<span class="symbol">:manager</span>,<span class="symbol">:rep</span>], <span class="key">values</span>: <span class="symbol">:price</span>, <span class="key">vectors</span>: [<span class="symbol">:product</span>], <span class="key">agg</span>: <span class="symbol">:sum</span>)
</pre></td>
</tr></table>
</div>

<p><img class="center" src="http://v0dro.github.io/images/daru2/pivoted_data.png" alt="'Data Pivoted to Reflect Sales'" /></p>

<h2 id="compatibility-with-statsample">Compatibility with statsample</h2>

<p>Daru is now completely compatible with <a href="https://github.com/clbustos/statsample">statsample</a> and you can now perform all of the functions by just passing it a Daru::DataFrame or Daru::Vector to perform statistical analysis.</p>

<p>Find more examples of using daru for statistics <a href="https://github.com/SciRuby/sciruby-notebooks/tree/master/Statistics">in these notebooks</a>.</p>

<p>Heres an example to demonstrate:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
</pre></td>
  <td class="code"><pre>
df = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new({<span class="key">a</span>: [<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>,<span class="integer">5</span>,<span class="integer">6</span>,<span class="integer">7</span>], <span class="key">b</span>: [<span class="integer">11</span>,<span class="integer">22</span>,<span class="integer">33</span>,<span class="integer">44</span>,<span class="integer">55</span>,<span class="integer">66</span>,<span class="integer">77</span>]})

<span class="constant">Statsample</span>::<span class="constant">Analysis</span>.store(<span class="constant">Statsample</span>::<span class="constant">Test</span>::<span class="constant">T</span>) <span class="keyword">do</span>
  t_2 = <span class="constant">Statsample</span>::<span class="constant">Test</span>.t_two_samples_independent(df[<span class="symbol">:a</span>], df[<span class="symbol">:b</span>])
  summary t_2
<span class="keyword">end</span>

<span class="constant">Statsample</span>::<span class="constant">Analysis</span>.run_batch

<span class="comment"># Analysis 2015-02-25 13:34:32 +0530</span>
<span class="comment"># = Statsample::Test::T</span>
<span class="comment">#   == Two Sample T Test</span>
<span class="comment">#     Mean and standard deviation</span>
<span class="comment"># +----------+---------+---------+---+</span>
<span class="comment"># | Variable |  mean   |   sd    | n |</span>
<span class="comment"># +----------+---------+---------+---+</span>
<span class="comment"># | a        | 4.0000  | 2.1602  | 7 |</span>
<span class="comment"># | b        | 44.0000 | 23.7627 | 7 |</span>
<span class="comment"># +----------+---------+---------+---+</span>
<span class="comment"># </span>
<span class="comment">#     Levene test for equality of variances : F(1, 12) = 13.6192 , p = 0.0031</span>
<span class="comment">#     T statistics</span>
<span class="comment"># +--------------------+---------+--------+----------------+</span>
<span class="comment"># |        Type        |    t    |   df   | p (both tails) |</span>
<span class="comment"># +--------------------+---------+--------+----------------+</span>
<span class="comment"># | Equal variance     | -4.4353 | 12     | 0.0008         |</span>
<span class="comment"># | Non equal variance | -4.4353 | 6.0992 | 0.0042         |</span>
<span class="comment"># +--------------------+---------+--------+----------------+</span>
<span class="comment"># </span>
<span class="comment">#     Effect size</span>
<span class="comment"># +-------+----------+</span>
<span class="comment"># | x1-x2 | -40.0000 |</span>
<span class="comment"># | d     | -12.0007 |</span>
<span class="comment"># +-------+----------+</span>

</pre></td>
</tr></table>
</div>

<h5 id="references">References</h5>

<ul>
  <li>Pivot Tables example taken from <a href="http://pbpython.com/pandas-pivot-table-explained.html">here</a>.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving Systems of Linear Equations in Ruby]]></title>
    <link href="http://v0dro.github.io/blog/2014/12/14/solving-systems-of-linear-equations-in-ruby/"/>
    <updated>2014-12-14T15:27:34+09:00</updated>
    <id>http://v0dro.github.io/blog/2014/12/14/solving-systems-of-linear-equations-in-ruby</id>
    <content type="html"><![CDATA[<p>Solving systems of linear equations is a very important part of scientific computing (some would say most important), and in this post I will show you how a system of linear equations involving <em>n</em> equations and <em>n</em> unknowns can be solved in Ruby using the <a href="https://github.com/SciRuby/nmatrix">NMatrix</a> gem and the methodology that I used for simplyfying the algorithms involved.</p>

<p>This involved solving a system of linear equations using forward substution followed by back substution using the LU factorization of the matrix of co-efficients.</p>

<p>The reduction techniques were quite baffling at first, because I had always solved equations in the traditional way and this was something completely new. I eventually figured it out and also <a href="https://github.com/SciRuby/nmatrix/commit/4241d241ca7744ca2ca5e090782588581160d42b">implemented it in NMatrix</a>. Here I will document how I did that. Hopefully, this will be useful to others like me!</p>

<p>I’m assuming that you are familiar with the LU decomposed form of a square matrix. If not, read <a href="http://en.wikipedia.org/wiki/LU_decomposition">this</a> resource first.</p>

<p>Throughout this post, I will refer to <em>A</em> as the square matrix of co-efficients, <em>x</em> as the column matrix of unknowns and <em>b</em> as column matrix of right hand sides.</p>

<p>Lets say that the equation you want to solve is represented by:</p>

<script type="math/tex; mode=display">A.x = b .. (1)</script>

<p>The basic idea behind an LU decomposition is that a square matrix A can be represented as the product of two matrices <em>L</em> and <em>U</em>, where <em>L</em> is a lower <a href="http://en.wikipedia.org/wiki/Triangular_matrix">triangular matrix</a> and <em>U</em> is an upper triangular matrix.</p>

<script type="math/tex; mode=display">L.U = A</script>

<p>Given this, equation (1) can be represented as:</p>

<script type="math/tex; mode=display">L.(U.x) = b</script>

<p>Which we can use for solving the vector <em>y</em> such that:</p>

<script type="math/tex; mode=display">L.y = b .. (2)</script>

<p>and then solving:</p>

<script type="math/tex; mode=display">U.x = y ..(3)</script>

<p>The LU decomposed matrix is typically carried in a single matrix to reduce storage overhead, and thus the diagonal elements of <em>L</em> are assumed to have a value <em>1</em>. The diagonal elements of <em>U</em> can have any value.</p>

<p>The reason for breaking down <em>A</em> and first solving for an upper triangular matrix is that the solution of an upper triangular matrix is quite trivial and thus the solution to (2) is found using the technique of <em>forward substitution</em>.</p>

<p>Forward substitution is a technique that involves scanning an upper triangular matrix from top to bottom, computing a value for the top most variable and substituting that value into subsequent variables below it. This proved to be quite intimidating, because according to <a href="http://www.nr.com/">Numerical Recipes</a>, the whole process of forward substitution can be represented by the following equation:</p>

<script type="math/tex; mode=display">\begin{align}
  y_{0} = \dfrac{b_{0}}{L_{00}}
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
  y_{i} = \dfrac{1}{L_{ii}}[b_{i} - \sum_{j=0}^{i-1}L_{ii} \times y_{j}] \quad i = 1,2,\dotsc,N-1 \quad (4)
\end{align}</script>

<p>Figuring out what exactly is going on was quite a daunting task, but I did figure it out eventually and here is how I went about it:</p>

<p>Let <em>L</em> in equation (2) to be the lower part of a 3x3 matrix A (as per (1)). So equation (2) can be represented in matrix form as:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
    \begin{pmatrix}
      L_{00} & 0 & 0 \\
      L_{10} & L_{11} & 0 \\
      L_{20} & L_{21} & L_{22}
    \end{pmatrix}
    \begin{pmatrix}
      y_{0} \\
      y_{1} \\
      y_{2}
    \end{pmatrix}
    =
    \begin{pmatrix}
      b_{0} \\
      b_{1} \\
      b_{2}
    \end{pmatrix}
\end{align} %]]&gt;</script>

<p>Our task now is calculate the column matrix containing the <em>y</em> unknowns.
Thus by equation (4), each of them can be calculated with the following sets of equations (if you find them confusing just correlate each value with that present in the matrices above and it should be clear):</p>

<script type="math/tex; mode=display">\begin{align}
  y_{0} = \dfrac{b_{0}}{L_{00}}
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
  y_{1} = \dfrac{1}{L_{11}} \times [b_{1} - L_{00} \times y_{0}]
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
  y_{2} = \dfrac{1}{L_{22}} \times [b_{2} - (L_{20} \times y_{0} + L_{21} \times y_{1})]
\end{align}</script>

<p>Its now quite obvious that forward substitution is called so because we start from the topmost row of the matrix and use the value of the variable calculated in that row to calculate the <em>y</em> for the following rows.</p>

<p>Now that we have the solution to equation (2), we can use the values generated in the <em>y</em> column vector to compute <em>x</em> in equation (3). Recall that the matrix <em>U</em> is the upper triangular decomposed part of <em>A</em> (equation (1)). This matrix can be solved using a technique called <em>backward substitution</em>. It is the exact reverse of the <em>forward substitution</em> that we just saw, i.e. the values of the bottom-most variables are calculated first and then substituted into the rows above to calculate subsquent variables above.</p>

<p>The equation describing backward substitution is described in Numerical Recipes as:</p>

<script type="math/tex; mode=display">\begin{align}
  x_{N-1} = \dfrac{y_{N-1}}{U_{N-1,N-1}}
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
  x_{i} = \dfrac{1}{U_{ii}}[y_{i} - \sum_{j=i+1}^{N-1}U_{ij} \times x_{j}] \quad i = N-2, N-3,\dotsc,0 \quad (5)
\end{align}</script>

<p>Lets try to understand this equation by extending the example we used above to understand forward substitution. To gain a better understanding of this concept, consider the equation (3) written in matrix form (keeping the same 3x3 matrix <em>A</em>):</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
    \begin{pmatrix}
      U_{00} & U_{01} & U_{02} \\
      0 & U_{11} & U_{12} \\
      0 & 0 & U_{22}
    \end{pmatrix}
    \begin{pmatrix}
      x_{0} \\
      x_{1} \\
      x_{2}
    \end{pmatrix}
    =
    \begin{pmatrix}
      y_{0} \\
      y_{1} \\
      y_{2}
    \end{pmatrix}
\end{align} %]]&gt;</script>

<p>Using the matrix representation above as reference, equation (5) can be expanded in terms of a 3x3 matrix as:</p>

<script type="math/tex; mode=display">\begin{align}
  x_{2} = \dfrac{y_{2}}{U_{22}}
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
  x_{1} = \dfrac{1}{U_{11}} \times [y_{1} - U_{12} \times x_{2}]
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
  x_{0} = \dfrac{1}{U_{00}} \times [y_{0} - (U_{01} \times x_{1} + U_{02} \times x_{2})]
\end{align}</script>

<p>Looking at the above equations its easy to see how backward substitution can be used to solve for unknown quantities when given a upper triangular matrix of co-efficients, by starting at the lowermost variable and gradually moving upward.</p>

<p>Now that the methodology behind solving sets of linear equations is clear, lets consider a set of 3 linear equations and 3 unknowns and compute the values of the unknown quantities using the nmatrix #solve method.</p>

<p>The #solve method can be called on any nxn square matrix of a floating point data type, and expects its sole argument to be a column matrix containing the right hand sides. It returns a column nmatrix object containing the computed co-efficients.</p>

<p>For this example, consider these 3 equations:</p>

<script type="math/tex; mode=display">x + y − z = 4</script>

<script type="math/tex; mode=display">x − 2y + 3z = −6</script>

<script type="math/tex; mode=display">2x + 3y + z = 7</script>

<p>These can be translated to Ruby code by creating an NMatrix only for the co-efficients and another one only for right hand sides:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">nmatrix</span><span class="delimiter">'</span></span>
coeffs = <span class="constant">NMatrix</span>.new([<span class="integer">3</span>,<span class="integer">3</span>],
  [<span class="integer">1</span>, <span class="integer">1</span>,<span class="integer">-1</span>,
   <span class="integer">1</span>,<span class="integer">-2</span>, <span class="integer">3</span>,
   <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">1</span>], <span class="key">dtype</span>: <span class="symbol">:float32</span>)

rhs = <span class="constant">NMatrix</span>.new([<span class="integer">3</span>,<span class="integer">1</span>],
  [<span class="integer">4</span>,
  <span class="integer">-6</span>,
   <span class="integer">7</span>], <span class="key">dtype</span>: <span class="symbol">:float32</span>)

solution = coeffs.solve(rhs)
<span class="comment">#=&gt; [1.0, 2.0, -1.0]</span>
</pre></td>
</tr></table>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Dimensional Interpolation: Introduction and Implementation in Ruby]]></title>
    <link href="http://v0dro.github.io/blog/2014/11/29/one-dimensional-interpolation-introduction-and-implementation-in-ruby/"/>
    <updated>2014-11-29T03:53:04+09:00</updated>
    <id>http://v0dro.github.io/blog/2014/11/29/one-dimensional-interpolation-introduction-and-implementation-in-ruby</id>
    <content type="html"><![CDATA[<p>Interpolation involves predicting the co-ordinates of a point given the co-ordinates of points around it. Interpolation can be done in one or more dimensions. In this article I will give you a brief introduction of one-dimensional interpolation and execute it on a sample data set using the <a href="https://github.com/v0dro/interpolation">interpolation</a> gem.</p>

<p>One dimensional interpolation involves considering consecutive points along the X-axis with known Y co-ordinates and predicting the Y co-ordinate for a given X co-ordinate.</p>

<p>There are several types of interpolation depending on the number of known points used for predicting the unknown point, and several methods to compute them, each with their own varying accuracy. Methods for interpolation include the classic Polynomial interpolation with Lagrange’s formula or spline interpolation using the concept of spline equations between points.</p>

<p>The spline method is found to be more accurate and hence that is what is used in the interpolation gem.</p>

<h2 id="common-interpolation-routines">Common Interpolation Routines</h2>

<p>Install the <code>interpolation</code> gem with <code>gem install interpolation</code>. Now lets see a few common interpolation routines and their implementation in Ruby:</p>

<h4 id="linear-interpolation">Linear Interpolation</h4>

<p>This is the simplest kind of interpolation. It involves simply considering two points such that <em>x[j]</em> &lt; <em>num</em> &lt; <em>x[j+1]</em>, where <em>num</em> is the unknown point, and considering the slope of the straight line between <em>(x[j], y[j] )</em> and <em>(x[j+1], y[j+1])</em>, predicts the Y co-ordinate using a simple linear polynomial.</p>

<p>Linear interpolation uses this equation:</p>

<script type="math/tex; mode=display">\begin{align}
    y = (y[j] + \frac{(interpolant - x[j])}{(x[j + 1] - x[j])} \times (y[j + 1] - y[j])
\end{align}</script>

<p>Here <em>interpolant</em> is the value of the X co-orinate whose corresponding Y-value needs to found.</p>

<p>Ruby code:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">interpolation</span><span class="delimiter">'</span></span>

x = (<span class="integer">0</span>..<span class="integer">100</span>).step(<span class="integer">3</span>).to_a
y = x.map { |a| <span class="constant">Math</span>.sin(a) }

int = <span class="constant">Interpolation</span>::<span class="constant">OneDimensional</span>.new x, y, <span class="key">type</span>: <span class="symbol">:linear</span>
int.interpolate <span class="integer">35</span>
<span class="comment"># =&gt; -0.328</span>
</pre></td>
</tr></table>
</div>

<h4 id="cubic-spline-interpolation">Cubic Spline Interpolation</h4>

<p>Cubic Spline interpolation defines a cubic spline equation for each set of points between the <em>1st</em> and <em>nth</em> points. Each equation is smooth in its first derivative and continuos in its second derivative.</p>

<p>So for example, if the points on a curve are labelled <em>i</em>, where <em>i = 1..n</em>, the equations representing any two points <em>i</em> and <em>i-1</em> will look like this:</p>

<script type="math/tex; mode=display">\begin{align}
    a_{i}x^3_{i} + b_{i}x^2_{i} + c_{i}x_{i} + d_{i} = y_{i}
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
    a_{i-1}x^3_{i-1} + b_{i-1}x^2_{i-1} + c_{i-1}x_{i-1} + d_{i-1} = y_{i-1}
\end{align}</script>

<p>Cubic spline interpolation involves finding the second derivative of all points <script type="math/tex">y_{i}</script>, which can then be used for evaluating the cubic spline polynomial, which is a function of <em>x</em>, <em>y</em> and the second derivatives of <em>y</em>.</p>

<p>For more information read <a href="http://mathworld.wolfram.com/CubicSpline.html">this</a> resource.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">interpolation</span><span class="delimiter">'</span></span>

x = (<span class="integer">0</span>..<span class="integer">9</span>).step(<span class="integer">1</span>).to_a
y = x.map { |e| <span class="constant">Math</span>.exp(e) }

f = <span class="constant">Interpolation</span>::<span class="constant">OneDimensional</span>.new(<span class="instance-variable">@x</span>, <span class="instance-variable">@y</span>, <span class="key">type</span>: <span class="symbol">:cubic</span>, <span class="key">sorted</span>: <span class="predefined-constant">true</span>)
f.interpolate(<span class="float">2.5</span>)
<span class="comment"># =&gt; 12.287</span>
</pre></td>
</tr></table>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Analysis in RUby: Basic Data Manipulation and Plotting]]></title>
    <link href="http://v0dro.github.io/blog/2014/11/25/data-analysis-in-ruby-basic-data-manipulation-and-plotting/"/>
    <updated>2014-11-25T17:25:13+09:00</updated>
    <id>http://v0dro.github.io/blog/2014/11/25/data-analysis-in-ruby-basic-data-manipulation-and-plotting</id>
    <content type="html"><![CDATA[<p>daru (Data Analysis in RUby) is a ruby gem for performing various data analysis and manipulation tasks in Ruby. It draws inspiration from pandas (python) and aims to be completely cross-compatible between all ruby implementations (MRI/JRuby etc.) yet leverage the individual benefits that each interpreter offers (for example the speed of C in MRI), while offering a simple and powerful API for data analysis, manipulation and visualization.</p>

<p>In this first article on daru, I will show you some aspects of how daru handles data and some operations that can be performed on a real-life data set.</p>

<h2 id="getting-started">Getting Started</h2>

<p>daru consists of two major data structures:</p>

<ul>
  <li><strong>Vector</strong> - A named one-dimensional array-like structure.</li>
  <li><strong>DataFrame</strong> - A named spreadsheet-like two-dimensional frame of data.</li>
</ul>

<p>A <em>Vector</em> can either be represented by a Ruby Array, NMatrix(MRI) or MDArray(JRuby) internally. This allows for fast data manipulation in native code. Users can change the underlying implementation at will (demonstrated in the <a href="http://v0dro.github.io/blog/2015/02/24/data-analysis-in-ruby-part-2/">next</a> blog post).</p>

<p>Both of these can be indexed by the <code>Daru::Index</code> or <code>Daru::MultiIndex</code> class, which allows us to reference and operate on data by name instead of the traditional numeric indexing, and also perform index-based manipulation, equality and plotting operations.</p>

<h4 id="vector">Vector</h4>

<p>The easiest way to create a vector is to simply pass the elements to a <code>Daru::Vector</code> constructor:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre>
v = <span class="constant">Daru</span>::<span class="constant">Vector</span>.new [<span class="integer">23</span>,<span class="integer">44</span>,<span class="integer">66</span>,<span class="integer">22</span>,<span class="integer">11</span>]

<span class="comment"># This will create a Vector object v</span>

<span class="comment"># =&gt; </span>
<span class="comment">##&lt;Daru::Vector:78168790 @name = nil @size = 5 &gt;</span>
<span class="comment">#   ni</span>
<span class="comment"># 0 23</span>
<span class="comment"># 1 44</span>
<span class="comment"># 2 66</span>
<span class="comment"># 3 22</span>
<span class="comment"># 4 11</span>
</pre></td>
</tr></table>
</div>

<p>Since no name has been specified, the vector is named <code>nil</code>, and since no index has been specified either, a numeric index from 0..4 has been generated for the vector (leftmost column).</p>

<p>A better way to create vectors would be to specify the name and the indexes:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre>
sherlock = <span class="constant">Daru</span>::<span class="constant">Vector</span>.new [<span class="integer">3</span>,<span class="integer">2</span>,<span class="integer">1</span>,<span class="integer">1</span>,<span class="integer">2</span>], <span class="key">name</span>: <span class="symbol">:sherlock</span>, <span class="key">index</span>: [<span class="symbol">:pipe</span>, <span class="symbol">:hat</span>, <span class="symbol">:violin</span>, <span class="symbol">:cloak</span>, <span class="symbol">:shoes</span>]

<span class="comment">#=&gt; </span>
<span class="comment">#&lt;Daru::Vector:78061610 @name = sherlock @size = 5 &gt;</span>
<span class="comment">#         sherlock</span>
<span class="comment">#    pipe       3</span>
<span class="comment">#     hat       2</span>
<span class="comment">#  violin       1</span>
<span class="comment">#   cloak       1</span>
<span class="comment">#   shoes       2</span>
</pre></td>
</tr></table>
</div>

<p>This way we can clearly see the quantity of each item possesed by Sherlock.</p>

<p>Data can be retrieved with the <code>[]</code> operator:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>
sherlock[<span class="symbol">:pipe</span>] <span class="comment">#=&gt; 3</span>
</pre></td>
</tr></table>
</div>

<h4 id="dataframe">DataFrame</h4>

<p>A basic DataFrame can be constructed by simply specifying the names of columns and their corresponding values in a hash:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre>
df = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new({<span class="key">a</span>: [<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>,<span class="integer">5</span>], <span class="key">b</span>: [<span class="integer">10</span>,<span class="integer">20</span>,<span class="integer">30</span>,<span class="integer">40</span>,<span class="integer">50</span>]}, <span class="key">name</span>: <span class="symbol">:normal</span>)

<span class="comment"># =&gt; </span>
<span class="comment">##&lt;Daru::DataFrame:77782370 @name = normal @size = 5&gt;</span>
<span class="comment">#            a      b </span>
<span class="comment">#     0      1     10 </span>
<span class="comment">#     1      2     20 </span>
<span class="comment">#     2      3     30 </span>
<span class="comment">#     3      4     40 </span>
<span class="comment">#     4      5     50 </span>
</pre></td>
</tr></table>
</div>

<p>You can also specify an index for the DataFrame alongwith the data and also specify the order in which the vectors should appear. Every vector in the DataFrame will carry the same index as the DataFrame once it has been created.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre>plus_one = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new({<span class="key">a</span>: [<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>,<span class="integer">5</span>], <span class="key">b</span>: [<span class="integer">10</span>,<span class="integer">20</span>,<span class="integer">30</span>,<span class="integer">40</span>,<span class="integer">50</span>], <span class="key">c</span>: [<span class="integer">11</span>,<span class="integer">22</span>,<span class="integer">33</span>,<span class="integer">44</span>,<span class="integer">55</span>]}, <span class="key">name</span>: <span class="symbol">:plus_one</span>, <span class="key">index</span>: [<span class="symbol">:a</span>, <span class="symbol">:e</span>, <span class="symbol">:i</span>, <span class="symbol">:o</span>, <span class="symbol">:u</span>], <span class="key">order</span>: [<span class="symbol">:c</span>, <span class="symbol">:a</span>, <span class="symbol">:b</span>])

<span class="comment"># =&gt; </span>
<span class="comment">##&lt;Daru::DataFrame:77605450 @name = plus_one @size = 5&gt;</span>
<span class="comment">#                c        a        b </span>
<span class="comment">#       a       11        1       10 </span>
<span class="comment">#       e       22        2       20 </span>
<span class="comment">#       i       33        3       30 </span>
<span class="comment">#       o       44        4       40 </span>
<span class="comment">#       u       55        5       50</span>
</pre></td>
</tr></table>
</div>

<p>daru will also add <code>nil</code> values to vectors that fall short of elements.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>
missing =  <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new({<span class="key">a</span>: [<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>], <span class="key">b</span>: [<span class="integer">1</span>]}, <span class="key">name</span>: <span class="symbol">:missing</span>)
<span class="comment">#=&gt; </span>
<span class="comment">#&lt;Daru::DataFrame:76043900 @name = missing @size = 3&gt;</span>
<span class="comment">#                    a          b </span>
<span class="comment">#         0          1          1 </span>
<span class="comment">#         1          2        nil </span>
<span class="comment">#         2          3        nil </span>
</pre></td>
</tr></table>
</div>

<p>Creating a DataFrame by specifying <code>Vector</code> objects in place of the values in the hash will correctly align the values according to the index of each vector. If a vector is missing an index present in another vector, that index will be added to the vector with the corresponding value set to <code>nil</code>.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
</pre></td>
  <td class="code"><pre>
a = <span class="constant">Daru</span>::<span class="constant">Vector</span>.new [<span class="integer">1</span>,<span class="integer">2</span>,<span class="integer">3</span>,<span class="integer">4</span>,<span class="integer">5</span>], <span class="key">index</span>: [<span class="symbol">:a</span>, <span class="symbol">:e</span>, <span class="symbol">:i</span>, <span class="symbol">:o</span>, <span class="symbol">:u</span>]
b = <span class="constant">Daru</span>::<span class="constant">Vector</span>.new [<span class="integer">43</span>,<span class="integer">22</span>,<span class="integer">13</span>], <span class="key">index</span>: [<span class="symbol">:i</span>, <span class="symbol">:a</span>, <span class="symbol">:queen</span>]
on_steroids = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.new({<span class="key">a</span>: a, <span class="key">b</span>: b}, <span class="key">name</span>: <span class="symbol">:on_steroids</span>)
<span class="comment">#=&gt; </span>
<span class="comment">#&lt;Daru::DataFrame:75841450 @name = on_steroids @size = 6&gt;</span>
<span class="comment">#                    a          b </span>
<span class="comment">#         a          1         22 </span>
<span class="comment">#         e          2        nil </span>
<span class="comment">#         i          3         43 </span>
<span class="comment">#         o          4        nil </span>
<span class="comment">#     queen        nil         13 </span>
<span class="comment">#         u          5        nil </span>

</pre></td>
</tr></table>
</div>

<p>A DataFrame can be constructed from multiple sources:</p>

<ul>
  <li>To construct by columns:
    <ul>
      <li><strong>Array of hashes</strong> - Where the key of each hash is the name of the column to which the value belongs.</li>
      <li><strong>Name-Array Hash</strong> - Where the hash key is set as the name of the vector and the data the corresponding value.</li>
      <li><strong>Name-Vector Hash</strong> - This is the most advanced way of creating a DataFrame. Treats the hash key as the name of the vector. Also aligns the data correctly based on index.</li>
      <li><strong>Array of Arrays</strong> - Each sub array will be considered as a Vector in the DataFrame.</li>
    </ul>
  </li>
  <li>To construct by rows using the <code>.rows</code> class method:
    <ul>
      <li><strong>Array of Arrays</strong> - This will treat each sub-array as an independent row.</li>
      <li><strong>Array of Vectors</strong> - Uses each Vector in the Array as a row of the DataFrame. Sets vector names according to the index of the Vector. Aligns vector elements by index.</li>
    </ul>
  </li>
</ul>

<h2 id="handling-data">Handling Data</h2>

<p>Now that you have a basic idea about representing data in daru, lets see some more features of daru by loading some real-life data from a CSV file and performing some operations on it.</p>

<p>For this purpose, we will use <a href="https://rubygems.org/gems/iruby">iruby</a> notebook, with which daru is compatible. iruby provides a great interface for visualizing and playing around with data. I highly recommend installing it for full utilization of this tutorial.</p>

<h4 id="loading-data-from-files">Loading Data From Files</h4>

<p>Let us load some data about the music listening history of one user from this subset of the <a href="https://github.com/v0dro/daru/blob/master/spec/fixtures/music_data.tsv">Last.fm data set</a>:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">daru</span><span class="delimiter">'</span></span>

df = <span class="constant">Daru</span>::<span class="constant">DataFrame</span>.from_csv <span class="string"><span class="delimiter">'</span><span class="content">music_data.tsv</span><span class="delimiter">'</span></span>, <span class="key">col_sep</span>: <span class="string"><span class="delimiter">&quot;</span><span class="char">\t</span><span class="delimiter">&quot;</span></span>

</pre></td>
</tr></table>
</div>

<p><img class="center" src="http://v0dro.github.io/images/daru1/create_music_df.png" alt="'Create a DataFrame from a TSV file.'" /></p>

<p>As you can see the <em>timestamp</em> field is in a somewhat non-Ruby format which is pretty difficult for the default Time class to understand, so we destructively map time zone information (IST in this case) and then change every <em>timestamp</em> string field into a Ruby <em>Time</em> object, so that operations on time can be easily performed.</p>

<p>Notice the syntax for referencing a particular vector. Use ‘row’ for referencing any row.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>
df.timestamp.recode! { |ts| ts += <span class="string"><span class="delimiter">&quot;</span><span class="content">+5:30</span><span class="delimiter">&quot;</span></span>}

</pre></td>
</tr></table>
</div>
<p><img class="center" src="http://v0dro.github.io/images/daru1/dmap_vector.png" alt="'Destructively map a given vector.'" /></p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>
require <span class="string"><span class="delimiter">'</span><span class="content">date</span><span class="delimiter">'</span></span>
df = df.recode(<span class="symbol">:row</span>) <span class="keyword">do</span> |row|
  row[<span class="symbol">:timestamp</span>] = <span class="constant">DateTime</span>.strptime(row[<span class="symbol">:timestamp</span>], <span class="string"><span class="delimiter">'</span><span class="content">%Y-%m-%dT%H:%M:%SZ%z</span><span class="delimiter">'</span></span>).to_time
  row
<span class="keyword">end</span>

</pre></td>
</tr></table>
</div>

<p><img class="center" src="http://v0dro.github.io/images/daru1/df_row_map.png" alt="center 'Map all rows of a DataFrame.'" /></p>

<h4 id="basic-querying">Basic Querying</h4>

<p>A bunch of rows can be selected by specifying a range:</p>

<p><code>df.row[900..923]</code></p>

<p><img class="center" src="http://v0dro.github.io/images/daru1/range_row_access.png" alt="center 'Accessing rows with a range'" /></p>

<h4 id="data-analysis">Data Analysis</h4>

<p>Lets dive deeper by actually trying to extract something useful from the data that we have. Say we want to know the name of the artist heard the maximum number of times. So we create a Vector which consists of the names of the artists as the index and the number of times the name appears in the data as the corresponding values:</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>
<span class="comment"># Group by artist name and call 'size' to see the number of rows each artist populates.</span>
artists = df.group_by(<span class="symbol">:artname</span>).size
</pre></td>
</tr></table>
</div>

<p><img class="center" src="http://v0dro.github.io/images/daru1/get_max_artists.png" alt="'Create a vector of artist names vs number of times they appear.'" /></p>

<p>To get the maximum value out of these, use <code>#max_index</code>. This will return a Vector which has the max:</p>

<p><code>count.max_index</code></p>

<p><img class="center" src="http://v0dro.github.io/images/daru1/artists_max.png" alt="'Obtain the most heard artist.'" /></p>

<h4 id="plotting">Plotting</h4>

<p>daru uses <a href="https://github.com/domitry/nyaplot">Nyaplot</a> for plotting, which is an optional dependency. Install nyaplot with <code>gem install nyaplot</code> and proceed.</p>

<p>To demonstrate, lets find the top ten artists heard by this user and plot the number of times their songs have been heard against their names in a bar graph. For this, use the <code>#sort</code> function, which will preserve the indexing of the vector.</p>

<div class="language-ruby highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>
top_ten = artists.sort(<span class="key">ascending</span>: <span class="predefined-constant">false</span>)[<span class="integer">0</span>..<span class="integer">10</span>]

top_ten.plot <span class="key">type</span>: <span class="symbol">:bar</span> <span class="keyword">do</span> |plt| 
  plt.width <span class="integer">1120</span> 
  plt.height <span class="integer">500</span>
  plt.legend <span class="predefined-constant">true</span>
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>

<p><img class="center" src="http://v0dro.github.io/images/daru1/plot_top_ten.png" alt="'Top ten artists plotted.'" /></p>

<p>More examples can be found in <a href="https://github.com/v0dro/daru#notebooks">the notebooks section of the daru README</a>.</p>

<h2 id="further-reading">Further Reading</h2>

<ul>
  <li>This was but a very small subset of the capabilities of daru. Go through the <a href="https://rubygems.org/gems/daru">documentation</a> for more methods of analysing your data with daru.</li>
  <li>You can find all the above examples implemented in <a href="http://nbviewer.ipython.org/github/v0dro/daru/blob/master/notebooks/intro_with_music_data_.ipynb">this notebook</a>.</li>
  <li>Contribute to daru on <a href="https://github.com/v0dro/daru">github</a>. Any contributions will be greatly appreciated!</li>
  <li>Many thanks to <a href="http://www.last.fm/">last.fm</a> for providing the data.</li>
  <li>Check out the <a href="http://v0dro.github.io/blog/2015/02/24/data-analysis-in-ruby-part-2/">next blog post in this series</a>, elaborating on the next release of daru.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing Matrix Elements When Expressed as a Contiguous 1D Array]]></title>
    <link href="http://v0dro.github.io/blog/2014/10/12/accessing-matrix-elements-when-expressed-as-a-contiguous-1d-array/"/>
    <updated>2014-10-12T22:22:10+09:00</updated>
    <id>http://v0dro.github.io/blog/2014/10/12/accessing-matrix-elements-when-expressed-as-a-contiguous-1d-array</id>
    <content type="html"><![CDATA[<p>This post will talk about methods to access different types of matrix elements (diagonals, columns, rows, etc.) when a matrix is expressed as a continguous 1D array.</p>

<p>Recently, I was working on implementing a matrix inversion routine using the Gauss-Jordan elimination technique in C++. This was part of the NMatrix ruby gem, and because of the limitations imposed by trying to interface a dynamic language like Ruby with C++, the elements of the NMatrix object had to expressed as a 1D contiguous C++ array for computation of the inverse.</p>

<p>The in-place Gauss-Jordan matrix inversion technique uses many matrix elements in every pass. Lets see some simple equations that can be used for accessing different types of elements in a matrix in a loop.</p>

<h4 id="diagonals">Diagonals</h4>

<p>Lets say we have a square matrix A with shape <em>M</em>. If <em>k</em> is iterator we are using for going over each diagonal element of the matrix, then the equation will be something like <script type="math/tex">k * (M + 1)</script>.</p>

<p>A for loop using the equation should look like this:</p>

<div class="language-cpp highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">for</span> (k = <span class="integer">0</span>; k &lt; M; ++k) {
    cout &lt;&lt; A[k * (M + <span class="integer">1</span>)];
}

<span class="comment">// This will print all the diagonal elements of a square matrix.</span>
</pre></td>
</tr></table>
</div>

<h4 id="rows">Rows</h4>

<p>To iterate over each element in a given row of a matrix, use <script type="math/tex">row*M + col</script>. Here <code>row</code> is the fixed row and <code>col</code> goes from 0 to M-1.</p>

<h4 id="columns">Columns</h4>

<p>To iterate over each element in a given column of a matrix, use <script type="math/tex">col*M + row</script>. Here <code>col</code> is the fixed column and <code>row</code> goes from 0 to M-1.</p>

<h4 id="general">General</h4>

<p>In general the equation <script type="math/tex">row*NCOLS + col</script> will yield a matrix element with row index <code>row</code> and column index <code>col</code>.</p>
]]></content>
  </entry>
  
</feed>
